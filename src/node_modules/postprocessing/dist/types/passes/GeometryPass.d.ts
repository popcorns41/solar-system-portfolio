import { Object3D, OrthographicCamera, PerspectiveCamera, Scene, TextureDataType, WebGLRenderTarget, WebGLRenderer } from "three";
import { Pass } from "../core/Pass.js";
import { Selective } from "../core/Selective.js";
import { MSAASamples } from "../enums/MSAASamples.js";
import { GBufferConfig } from "../utils/GBufferConfig.js";
import { GBufferTextureConfig } from "../utils/GBufferTextureConfig.js";
import { Selection } from "../utils/Selection.js";
/**
 * GeometryPass constructor options.
 *
 * @category Passes
 */
export interface GeometryPassOptions {
    /**
     * Determines whether a stencil buffer should be created.
     *
     * @defaultValue false
     */
    stencilBuffer?: boolean;
    /**
     * Determines whether a depth buffer should be created.
     *
     * @defaultValue true
     */
    depthBuffer?: boolean;
    /**
     * The texture data type of the primary color buffer.
     *
     * @defaultValue HalfFloatType
     */
    frameBufferType?: TextureDataType;
    /**
     * The amount of samples used for MSAA.
     *
     * @defaultValue 0
     */
    samples?: MSAASamples;
    /**
     * A custom G-Buffer configuration.
     */
    gBufferConfig?: GBufferConfig;
}
/**
 * A geometry pass.
 *
 * @category Passes
 */
export declare class GeometryPass extends Pass implements GeometryPassOptions, Selective {
    readonly selection: Selection;
    /**
     * A collection of materials that have been modified with `onBeforeCompile`.
     */
    private readonly registeredMaterials;
    /**
     * A pass that copies the default input buffer to the output color buffer.
     */
    private readonly copyPass;
    /**
     * A resource that wraps the G-Buffer.
     */
    private readonly gBufferResource;
    readonly stencilBuffer: boolean;
    readonly depthBuffer: boolean;
    readonly frameBufferType: TextureDataType;
    readonly gBufferConfig: GBufferConfig;
    /**
     * @see {@link samples}
     */
    private _samples;
    /**
     * Constructs a new geometry pass.
     *
     * @param scene - A scene.
     * @param camera - A camera.
     * @param options - Additional options.
     */
    constructor(scene: Scene, camera: OrthographicCamera | PerspectiveCamera, { stencilBuffer, depthBuffer, frameBufferType, samples, gBufferConfig }?: GeometryPassOptions);
    get scene(): Scene | null;
    set scene(value: Scene | null);
    get samples(): MSAASamples;
    set samples(value: MSAASamples);
    /**
     * Returns the G-Buffer render target, or null if this pass renders to screen.
     */
    get gBuffer(): WebGLRenderTarget | null;
    /**
     * Returns the G-Buffer texture configs that correspond to the current G-Buffer components.
     */
    protected get textureConfigs(): [string, GBufferTextureConfig][];
    get renderer(): WebGLRenderer | null;
    set renderer(value: WebGLRenderer | null);
    /**
     * Defines the primary G-Buffer texture configs.
     */
    protected updateTextureConfigs(): void;
    /**
     * Enables rendering to {@link GBuffer} components for the materials of a given mesh.
     *
     * Should be called when a material is added, removed or replaced at runtime.
     *
     * TODO Remove when `three` supports output layout definitions for MRT.
     *
     * @param object - The object to update.
     */
    private updateMaterial;
    /**
     * Updates the color space of the output buffers.
     */
    private updateOutputBufferColorSpace;
    /**
     * Updates the G-Buffer configuration.
     */
    private updateGBuffer;
    /**
     * Configures the depth texture.
     *
     * Uses the current {@link GBuffer.DEPTH} texture if available, or creates a new one.
     */
    private configureDepthTexture;
    /**
     * Updates the settings of the internal copy pass.
     */
    private updateCopyPass;
    protected onInputChange(): void;
    protected onOutputChange(): void;
    protected onResolutionChange(): void;
    protected onSceneChildAdded(object: Object3D): void;
    compile(): Promise<void>;
    render(): void;
}
