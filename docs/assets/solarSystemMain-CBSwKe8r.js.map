{"version":3,"file":"solarSystemMain-CBSwKe8r.js","sources":["../../node_modules/three/examples/jsm/controls/OrbitControls.js","../../node_modules/three/examples/jsm/shaders/CopyShader.js","../../node_modules/three/examples/jsm/postprocessing/Pass.js","../../node_modules/three/examples/jsm/postprocessing/ShaderPass.js","../../node_modules/three/examples/jsm/postprocessing/MaskPass.js","../../node_modules/three/examples/jsm/postprocessing/EffectComposer.js","../../node_modules/three/examples/jsm/shaders/LuminosityHighPassShader.js","../../node_modules/three/examples/jsm/postprocessing/UnrealBloomPass.js","../../node_modules/three/examples/jsm/postprocessing/RenderPass.js","../../node_modules/three/examples/jsm/postprocessing/OutlinePass.js","../../node_modules/three/examples/jsm/shaders/FXAAShader.js","../../scripts/solarSystem/core/state.js","../../scripts/solarSystem/core/initCanvasSetup.js","../../../../../../../images/sun.jpg","../../../../../../../images/8ball.jpg","../../scripts/solarSystem/objects/initPlanetObjects.js","../../scripts/solarSystem/input/mouse.js","../../scripts/solarSystem/animation/sequenceAnim.js","../../scripts/solarSystem/input/eventHandler.js","../../scripts/solarSystem/core/const.js","../../scripts/solarSystem/input/eventListeners.js","../../scripts/solarSystem/animation/animate.js","../../scripts/solarSystemMain.js"],"sourcesContent":["import {\n\tControls,\n\tMOUSE,\n\tQuaternion,\n\tSpherical,\n\tTOUCH,\n\tVector2,\n\tVector3,\n\tPlane,\n\tRay,\n\tMathUtils\n} from 'three';\n\n/**\n * Fires when the camera has been transformed by the controls.\n *\n * @event OrbitControls#change\n * @type {Object}\n */\nconst _changeEvent = { type: 'change' };\n\n/**\n * Fires when an interaction was initiated.\n *\n * @event OrbitControls#start\n * @type {Object}\n */\nconst _startEvent = { type: 'start' };\n\n/**\n * Fires when an interaction has finished.\n *\n * @event OrbitControls#end\n * @type {Object}\n */\nconst _endEvent = { type: 'end' };\n\nconst _ray = new Ray();\nconst _plane = new Plane();\nconst _TILT_LIMIT = Math.cos( 70 * MathUtils.DEG2RAD );\n\nconst _v = new Vector3();\nconst _twoPI = 2 * Math.PI;\n\nconst _STATE = {\n\tNONE: - 1,\n\tROTATE: 0,\n\tDOLLY: 1,\n\tPAN: 2,\n\tTOUCH_ROTATE: 3,\n\tTOUCH_PAN: 4,\n\tTOUCH_DOLLY_PAN: 5,\n\tTOUCH_DOLLY_ROTATE: 6\n};\nconst _EPS = 0.000001;\n\n\n/**\n * Orbit controls allow the camera to orbit around a target.\n *\n * OrbitControls performs orbiting, dollying (zooming), and panning. Unlike {@link TrackballControls},\n * it maintains the \"up\" direction `object.up` (+Y by default).\n *\n * - Orbit: Left mouse / touch: one-finger move.\n * - Zoom: Middle mouse, or mousewheel / touch: two-finger spread or squish.\n * - Pan: Right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move.\n *\n * ```js\n * const controls = new OrbitControls( camera, renderer.domElement );\n *\n * // controls.update() must be called after any manual changes to the camera's transform\n * camera.position.set( 0, 20, 100 );\n * controls.update();\n *\n * function animate() {\n *\n * \t// required if controls.enableDamping or controls.autoRotate are set to true\n * \tcontrols.update();\n *\n * \trenderer.render( scene, camera );\n *\n * }\n * ```\n *\n * @augments Controls\n * @three_import import { OrbitControls } from 'three/addons/controls/OrbitControls.js';\n */\nclass OrbitControls extends Controls {\n\n\t/**\n\t * Constructs a new controls instance.\n\t *\n\t * @param {Object3D} object - The object that is managed by the controls.\n\t * @param {?HTMLDOMElement} domElement - The HTML element used for event listeners.\n\t */\n\tconstructor( object, domElement = null ) {\n\n\t\tsuper( object, domElement );\n\n\t\tthis.state = _STATE.NONE;\n\n\t\t/**\n\t\t * The focus point of the controls, the `object` orbits around this.\n\t\t * It can be updated manually at any point to change the focus of the controls.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.target = new Vector3();\n\n\t\t/**\n\t\t * The focus point of the `minTargetRadius` and `maxTargetRadius` limits.\n\t\t * It can be updated manually at any point to change the center of interest\n\t\t * for the `target`.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.cursor = new Vector3();\n\n\t\t/**\n\t\t * How far you can dolly in (perspective camera only).\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.minDistance = 0;\n\n\t\t/**\n\t\t * How far you can dolly out (perspective camera only).\n\t\t *\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */\n\t\tthis.maxDistance = Infinity;\n\n\t\t/**\n\t\t * How far you can zoom in (orthographic camera only).\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.minZoom = 0;\n\n\t\t/**\n\t\t * How far you can zoom out (orthographic camera only).\n\t\t *\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */\n\t\tthis.maxZoom = Infinity;\n\n\t\t/**\n\t\t * How close you can get the target to the 3D `cursor`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.minTargetRadius = 0;\n\n\t\t/**\n\t\t * How far you can move the target from the 3D `cursor`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */\n\t\tthis.maxTargetRadius = Infinity;\n\n\t\t/**\n\t\t * How far you can orbit vertically, lower limit. Range is `[0, Math.PI]` radians.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.minPolarAngle = 0;\n\n\t\t/**\n\t\t * How far you can orbit vertically, upper limit. Range is `[0, Math.PI]` radians.\n\t\t *\n\t\t * @type {number}\n\t\t * @default Math.PI\n\t\t */\n\t\tthis.maxPolarAngle = Math.PI;\n\n\t\t/**\n\t\t * How far you can orbit horizontally, lower limit. If set, the interval `[ min, max ]`\n\t\t * must be a sub-interval of `[ - 2 PI, 2 PI ]`, with `( max - min < 2 PI )`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default -Infinity\n\t\t */\n\t\tthis.minAzimuthAngle = - Infinity;\n\n\t\t/**\n\t\t * How far you can orbit horizontally, upper limit. If set, the interval `[ min, max ]`\n\t\t * must be a sub-interval of `[ - 2 PI, 2 PI ]`, with `( max - min < 2 PI )`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default -Infinity\n\t\t */\n\t\tthis.maxAzimuthAngle = Infinity;\n\n\t\t/**\n\t\t * Set to `true` to enable damping (inertia), which can be used to give a sense of weight\n\t\t * to the controls. Note that if this is enabled, you must call `update()` in your animation\n\t\t * loop.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.enableDamping = false;\n\n\t\t/**\n\t\t * The damping inertia used if `enableDamping` is set to `true`.\n\t\t *\n\t\t * Note that for this to work, you must call `update()` in your animation loop.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.05\n\t\t */\n\t\tthis.dampingFactor = 0.05;\n\n\t\t/**\n\t\t * Enable or disable zooming (dollying) of the camera.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.enableZoom = true;\n\n\t\t/**\n\t\t * Speed of zooming / dollying.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.zoomSpeed = 1.0;\n\n\t\t/**\n\t\t * Enable or disable horizontal and vertical rotation of the camera.\n\t\t *\n\t\t * Note that it is possible to disable a single axis by setting the min and max of the\n\t\t * `minPolarAngle` or `minAzimuthAngle` to the same value, which will cause the vertical\n\t\t * or horizontal rotation to be fixed at that value.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.enableRotate = true;\n\n\t\t/**\n\t\t * Speed of rotation.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.rotateSpeed = 1.0;\n\n\t\t/**\n\t\t * How fast to rotate the camera when the keyboard is used.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.keyRotateSpeed = 1.0;\n\n\t\t/**\n\t\t * Enable or disable camera panning.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.enablePan = true;\n\n\t\t/**\n\t\t * Speed of panning.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.panSpeed = 1.0;\n\n\t\t/**\n\t\t * Defines how the camera's position is translated when panning. If `true`, the camera pans\n\t\t * in screen space. Otherwise, the camera pans in the plane orthogonal to the camera's up\n\t\t * direction.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.screenSpacePanning = true;\n\n\t\t/**\n\t\t * How fast to pan the camera when the keyboard is used in\n\t\t * pixels per keypress.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 7\n\t\t */\n\t\tthis.keyPanSpeed = 7.0;\n\n\t\t/**\n\t\t * Setting this property to `true` allows to zoom to the cursor's position.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.zoomToCursor = false;\n\n\t\t/**\n\t\t * Set to true to automatically rotate around the target\n\t\t *\n\t\t * Note that if this is enabled, you must call `update()` in your animation loop.\n\t\t * If you want the auto-rotate speed to be independent of the frame rate (the refresh\n\t\t * rate of the display), you must pass the time `deltaTime`, in seconds, to `update()`.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.autoRotate = false;\n\n\t\t/**\n\t\t * How fast to rotate around the target if `autoRotate` is `true`. The default  equates to 30 seconds\n\t\t * per orbit at 60fps.\n\t\t *\n\t\t * Note that if `autoRotate` is enabled, you must call `update()` in your animation loop.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 2\n\t\t */\n\t\tthis.autoRotateSpeed = 2.0;\n\n\t\t/**\n\t\t * This object contains references to the keycodes for controlling camera panning.\n\t\t *\n\t\t * ```js\n\t\t * controls.keys = {\n\t\t * \tLEFT: 'ArrowLeft', //left arrow\n\t\t * \tUP: 'ArrowUp', // up arrow\n\t\t * \tRIGHT: 'ArrowRight', // right arrow\n\t\t * \tBOTTOM: 'ArrowDown' // down arrow\n\t\t * }\n\t\t * ```\n\t\t * @type {Object}\n\t\t */\n\t\tthis.keys = { LEFT: 'ArrowLeft', UP: 'ArrowUp', RIGHT: 'ArrowRight', BOTTOM: 'ArrowDown' };\n\n\t\t/**\n\t\t * This object contains references to the mouse actions used by the controls.\n\t\t *\n\t\t * ```js\n\t\t * controls.mouseButtons = {\n\t\t * \tLEFT: THREE.MOUSE.ROTATE,\n\t\t * \tMIDDLE: THREE.MOUSE.DOLLY,\n\t\t * \tRIGHT: THREE.MOUSE.PAN\n\t\t * }\n\t\t * ```\n\t\t * @type {Object}\n\t\t */\n\t\tthis.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\n\n\t\t/**\n\t\t * This object contains references to the touch actions used by the controls.\n\t\t *\n\t\t * ```js\n\t\t * controls.mouseButtons = {\n\t\t * \tONE: THREE.TOUCH.ROTATE,\n\t\t * \tTWO: THREE.TOUCH.DOLLY_PAN\n\t\t * }\n\t\t * ```\n\t\t * @type {Object}\n\t\t */\n\t\tthis.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\n\n\t\t/**\n\t\t * Used internally by `saveState()` and `reset()`.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.target0 = this.target.clone();\n\n\t\t/**\n\t\t * Used internally by `saveState()` and `reset()`.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.position0 = this.object.position.clone();\n\n\t\t/**\n\t\t * Used internally by `saveState()` and `reset()`.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.zoom0 = this.object.zoom;\n\n\t\t// the target DOM element for key events\n\t\tthis._domElementKeyEvents = null;\n\n\t\t// internals\n\n\t\tthis._lastPosition = new Vector3();\n\t\tthis._lastQuaternion = new Quaternion();\n\t\tthis._lastTargetPosition = new Vector3();\n\n\t\t// so camera.up is the orbit axis\n\t\tthis._quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n\t\tthis._quatInverse = this._quat.clone().invert();\n\n\t\t// current position in spherical coordinates\n\t\tthis._spherical = new Spherical();\n\t\tthis._sphericalDelta = new Spherical();\n\n\t\tthis._scale = 1;\n\t\tthis._panOffset = new Vector3();\n\n\t\tthis._rotateStart = new Vector2();\n\t\tthis._rotateEnd = new Vector2();\n\t\tthis._rotateDelta = new Vector2();\n\n\t\tthis._panStart = new Vector2();\n\t\tthis._panEnd = new Vector2();\n\t\tthis._panDelta = new Vector2();\n\n\t\tthis._dollyStart = new Vector2();\n\t\tthis._dollyEnd = new Vector2();\n\t\tthis._dollyDelta = new Vector2();\n\n\t\tthis._dollyDirection = new Vector3();\n\t\tthis._mouse = new Vector2();\n\t\tthis._performCursorZoom = false;\n\n\t\tthis._pointers = [];\n\t\tthis._pointerPositions = {};\n\n\t\tthis._controlActive = false;\n\n\t\t// event listeners\n\n\t\tthis._onPointerMove = onPointerMove.bind( this );\n\t\tthis._onPointerDown = onPointerDown.bind( this );\n\t\tthis._onPointerUp = onPointerUp.bind( this );\n\t\tthis._onContextMenu = onContextMenu.bind( this );\n\t\tthis._onMouseWheel = onMouseWheel.bind( this );\n\t\tthis._onKeyDown = onKeyDown.bind( this );\n\n\t\tthis._onTouchStart = onTouchStart.bind( this );\n\t\tthis._onTouchMove = onTouchMove.bind( this );\n\n\t\tthis._onMouseDown = onMouseDown.bind( this );\n\t\tthis._onMouseMove = onMouseMove.bind( this );\n\n\t\tthis._interceptControlDown = interceptControlDown.bind( this );\n\t\tthis._interceptControlUp = interceptControlUp.bind( this );\n\n\t\t//\n\n\t\tif ( this.domElement !== null ) {\n\n\t\t\tthis.connect( this.domElement );\n\n\t\t}\n\n\t\tthis.update();\n\n\t}\n\n\tconnect( element ) {\n\n\t\tsuper.connect( element );\n\n\t\tthis.domElement.addEventListener( 'pointerdown', this._onPointerDown );\n\t\tthis.domElement.addEventListener( 'pointercancel', this._onPointerUp );\n\n\t\tthis.domElement.addEventListener( 'contextmenu', this._onContextMenu );\n\t\tthis.domElement.addEventListener( 'wheel', this._onMouseWheel, { passive: false } );\n\n\t\tconst document = this.domElement.getRootNode(); // offscreen canvas compatibility\n\t\tdocument.addEventListener( 'keydown', this._interceptControlDown, { passive: true, capture: true } );\n\n\t\tthis.domElement.style.touchAction = 'none'; // disable touch scroll\n\n\t}\n\n\tdisconnect() {\n\n\t\tthis.domElement.removeEventListener( 'pointerdown', this._onPointerDown );\n\t\tthis.domElement.removeEventListener( 'pointermove', this._onPointerMove );\n\t\tthis.domElement.removeEventListener( 'pointerup', this._onPointerUp );\n\t\tthis.domElement.removeEventListener( 'pointercancel', this._onPointerUp );\n\n\t\tthis.domElement.removeEventListener( 'wheel', this._onMouseWheel );\n\t\tthis.domElement.removeEventListener( 'contextmenu', this._onContextMenu );\n\n\t\tthis.stopListenToKeyEvents();\n\n\t\tconst document = this.domElement.getRootNode(); // offscreen canvas compatibility\n\t\tdocument.removeEventListener( 'keydown', this._interceptControlDown, { capture: true } );\n\n\t\tthis.domElement.style.touchAction = 'auto';\n\n\t}\n\n\tdispose() {\n\n\t\tthis.disconnect();\n\n\t}\n\n\t/**\n\t * Get the current vertical rotation, in radians.\n\t *\n\t * @return {number} The current vertical rotation, in radians.\n\t */\n\tgetPolarAngle() {\n\n\t\treturn this._spherical.phi;\n\n\t}\n\n\t/**\n\t * Get the current horizontal rotation, in radians.\n\t *\n\t * @return {number} The current horizontal rotation, in radians.\n\t */\n\tgetAzimuthalAngle() {\n\n\t\treturn this._spherical.theta;\n\n\t}\n\n\t/**\n\t * Returns the distance from the camera to the target.\n\t *\n\t * @return {number} The distance from the camera to the target.\n\t */\n\tgetDistance() {\n\n\t\treturn this.object.position.distanceTo( this.target );\n\n\t}\n\n\t/**\n\t * Adds key event listeners to the given DOM element.\n\t * `window` is a recommended argument for using this method.\n\t *\n\t * @param {HTMLDOMElement} domElement - The DOM element\n\t */\n\tlistenToKeyEvents( domElement ) {\n\n\t\tdomElement.addEventListener( 'keydown', this._onKeyDown );\n\t\tthis._domElementKeyEvents = domElement;\n\n\t}\n\n\t/**\n\t * Removes the key event listener previously defined with `listenToKeyEvents()`.\n\t */\n\tstopListenToKeyEvents() {\n\n\t\tif ( this._domElementKeyEvents !== null ) {\n\n\t\t\tthis._domElementKeyEvents.removeEventListener( 'keydown', this._onKeyDown );\n\t\t\tthis._domElementKeyEvents = null;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Save the current state of the controls. This can later be recovered with `reset()`.\n\t */\n\tsaveState() {\n\n\t\tthis.target0.copy( this.target );\n\t\tthis.position0.copy( this.object.position );\n\t\tthis.zoom0 = this.object.zoom;\n\n\t}\n\n\t/**\n\t * Reset the controls to their state from either the last time the `saveState()`\n\t * was called, or the initial state.\n\t */\n\treset() {\n\n\t\tthis.target.copy( this.target0 );\n\t\tthis.object.position.copy( this.position0 );\n\t\tthis.object.zoom = this.zoom0;\n\n\t\tthis.object.updateProjectionMatrix();\n\t\tthis.dispatchEvent( _changeEvent );\n\n\t\tthis.update();\n\n\t\tthis.state = _STATE.NONE;\n\n\t}\n\n\tupdate( deltaTime = null ) {\n\n\t\tconst position = this.object.position;\n\n\t\t_v.copy( position ).sub( this.target );\n\n\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t_v.applyQuaternion( this._quat );\n\n\t\t// angle from z-axis around y-axis\n\t\tthis._spherical.setFromVector3( _v );\n\n\t\tif ( this.autoRotate && this.state === _STATE.NONE ) {\n\n\t\t\tthis._rotateLeft( this._getAutoRotationAngle( deltaTime ) );\n\n\t\t}\n\n\t\tif ( this.enableDamping ) {\n\n\t\t\tthis._spherical.theta += this._sphericalDelta.theta * this.dampingFactor;\n\t\t\tthis._spherical.phi += this._sphericalDelta.phi * this.dampingFactor;\n\n\t\t} else {\n\n\t\t\tthis._spherical.theta += this._sphericalDelta.theta;\n\t\t\tthis._spherical.phi += this._sphericalDelta.phi;\n\n\t\t}\n\n\t\t// restrict theta to be between desired limits\n\n\t\tlet min = this.minAzimuthAngle;\n\t\tlet max = this.maxAzimuthAngle;\n\n\t\tif ( isFinite( min ) && isFinite( max ) ) {\n\n\t\t\tif ( min < - Math.PI ) min += _twoPI; else if ( min > Math.PI ) min -= _twoPI;\n\n\t\t\tif ( max < - Math.PI ) max += _twoPI; else if ( max > Math.PI ) max -= _twoPI;\n\n\t\t\tif ( min <= max ) {\n\n\t\t\t\tthis._spherical.theta = Math.max( min, Math.min( max, this._spherical.theta ) );\n\n\t\t\t} else {\n\n\t\t\t\tthis._spherical.theta = ( this._spherical.theta > ( min + max ) / 2 ) ?\n\t\t\t\t\tMath.max( min, this._spherical.theta ) :\n\t\t\t\t\tMath.min( max, this._spherical.theta );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// restrict phi to be between desired limits\n\t\tthis._spherical.phi = Math.max( this.minPolarAngle, Math.min( this.maxPolarAngle, this._spherical.phi ) );\n\n\t\tthis._spherical.makeSafe();\n\n\n\t\t// move target to panned location\n\n\t\tif ( this.enableDamping === true ) {\n\n\t\t\tthis.target.addScaledVector( this._panOffset, this.dampingFactor );\n\n\t\t} else {\n\n\t\t\tthis.target.add( this._panOffset );\n\n\t\t}\n\n\t\t// Limit the target distance from the cursor to create a sphere around the center of interest\n\t\tthis.target.sub( this.cursor );\n\t\tthis.target.clampLength( this.minTargetRadius, this.maxTargetRadius );\n\t\tthis.target.add( this.cursor );\n\n\t\tlet zoomChanged = false;\n\t\t// adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\n\t\t// we adjust zoom later in these cases\n\t\tif ( this.zoomToCursor && this._performCursorZoom || this.object.isOrthographicCamera ) {\n\n\t\t\tthis._spherical.radius = this._clampDistance( this._spherical.radius );\n\n\t\t} else {\n\n\t\t\tconst prevRadius = this._spherical.radius;\n\t\t\tthis._spherical.radius = this._clampDistance( this._spherical.radius * this._scale );\n\t\t\tzoomChanged = prevRadius != this._spherical.radius;\n\n\t\t}\n\n\t\t_v.setFromSpherical( this._spherical );\n\n\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t_v.applyQuaternion( this._quatInverse );\n\n\t\tposition.copy( this.target ).add( _v );\n\n\t\tthis.object.lookAt( this.target );\n\n\t\tif ( this.enableDamping === true ) {\n\n\t\t\tthis._sphericalDelta.theta *= ( 1 - this.dampingFactor );\n\t\t\tthis._sphericalDelta.phi *= ( 1 - this.dampingFactor );\n\n\t\t\tthis._panOffset.multiplyScalar( 1 - this.dampingFactor );\n\n\t\t} else {\n\n\t\t\tthis._sphericalDelta.set( 0, 0, 0 );\n\n\t\t\tthis._panOffset.set( 0, 0, 0 );\n\n\t\t}\n\n\t\t// adjust camera position\n\t\tif ( this.zoomToCursor && this._performCursorZoom ) {\n\n\t\t\tlet newRadius = null;\n\t\t\tif ( this.object.isPerspectiveCamera ) {\n\n\t\t\t\t// move the camera down the pointer ray\n\t\t\t\t// this method avoids floating point error\n\t\t\t\tconst prevRadius = _v.length();\n\t\t\t\tnewRadius = this._clampDistance( prevRadius * this._scale );\n\n\t\t\t\tconst radiusDelta = prevRadius - newRadius;\n\t\t\t\tthis.object.position.addScaledVector( this._dollyDirection, radiusDelta );\n\t\t\t\tthis.object.updateMatrixWorld();\n\n\t\t\t\tzoomChanged = !! radiusDelta;\n\n\t\t\t} else if ( this.object.isOrthographicCamera ) {\n\n\t\t\t\t// adjust the ortho camera position based on zoom changes\n\t\t\t\tconst mouseBefore = new Vector3( this._mouse.x, this._mouse.y, 0 );\n\t\t\t\tmouseBefore.unproject( this.object );\n\n\t\t\t\tconst prevZoom = this.object.zoom;\n\t\t\t\tthis.object.zoom = Math.max( this.minZoom, Math.min( this.maxZoom, this.object.zoom / this._scale ) );\n\t\t\t\tthis.object.updateProjectionMatrix();\n\n\t\t\t\tzoomChanged = prevZoom !== this.object.zoom;\n\n\t\t\t\tconst mouseAfter = new Vector3( this._mouse.x, this._mouse.y, 0 );\n\t\t\t\tmouseAfter.unproject( this.object );\n\n\t\t\t\tthis.object.position.sub( mouseAfter ).add( mouseBefore );\n\t\t\t\tthis.object.updateMatrixWorld();\n\n\t\t\t\tnewRadius = _v.length();\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.' );\n\t\t\t\tthis.zoomToCursor = false;\n\n\t\t\t}\n\n\t\t\t// handle the placement of the target\n\t\t\tif ( newRadius !== null ) {\n\n\t\t\t\tif ( this.screenSpacePanning ) {\n\n\t\t\t\t\t// position the orbit target in front of the new camera position\n\t\t\t\t\tthis.target.set( 0, 0, - 1 )\n\t\t\t\t\t\t.transformDirection( this.object.matrix )\n\t\t\t\t\t\t.multiplyScalar( newRadius )\n\t\t\t\t\t\t.add( this.object.position );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// get the ray and translation plane to compute target\n\t\t\t\t\t_ray.origin.copy( this.object.position );\n\t\t\t\t\t_ray.direction.set( 0, 0, - 1 ).transformDirection( this.object.matrix );\n\n\t\t\t\t\t// if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\n\t\t\t\t\t// extremely large values\n\t\t\t\t\tif ( Math.abs( this.object.up.dot( _ray.direction ) ) < _TILT_LIMIT ) {\n\n\t\t\t\t\t\tthis.object.lookAt( this.target );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t_plane.setFromNormalAndCoplanarPoint( this.object.up, this.target );\n\t\t\t\t\t\t_ray.intersectPlane( _plane, this.target );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( this.object.isOrthographicCamera ) {\n\n\t\t\tconst prevZoom = this.object.zoom;\n\t\t\tthis.object.zoom = Math.max( this.minZoom, Math.min( this.maxZoom, this.object.zoom / this._scale ) );\n\n\t\t\tif ( prevZoom !== this.object.zoom ) {\n\n\t\t\t\tthis.object.updateProjectionMatrix();\n\t\t\t\tzoomChanged = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._scale = 1;\n\t\tthis._performCursorZoom = false;\n\n\t\t// update condition is:\n\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\tif ( zoomChanged ||\n\t\t\tthis._lastPosition.distanceToSquared( this.object.position ) > _EPS ||\n\t\t\t8 * ( 1 - this._lastQuaternion.dot( this.object.quaternion ) ) > _EPS ||\n\t\t\tthis._lastTargetPosition.distanceToSquared( this.target ) > _EPS ) {\n\n\t\t\tthis.dispatchEvent( _changeEvent );\n\n\t\t\tthis._lastPosition.copy( this.object.position );\n\t\t\tthis._lastQuaternion.copy( this.object.quaternion );\n\t\t\tthis._lastTargetPosition.copy( this.target );\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\t_getAutoRotationAngle( deltaTime ) {\n\n\t\tif ( deltaTime !== null ) {\n\n\t\t\treturn ( _twoPI / 60 * this.autoRotateSpeed ) * deltaTime;\n\n\t\t} else {\n\n\t\t\treturn _twoPI / 60 / 60 * this.autoRotateSpeed;\n\n\t\t}\n\n\t}\n\n\t_getZoomScale( delta ) {\n\n\t\tconst normalizedDelta = Math.abs( delta * 0.01 );\n\t\treturn Math.pow( 0.95, this.zoomSpeed * normalizedDelta );\n\n\t}\n\n\t_rotateLeft( angle ) {\n\n\t\tthis._sphericalDelta.theta -= angle;\n\n\t}\n\n\t_rotateUp( angle ) {\n\n\t\tthis._sphericalDelta.phi -= angle;\n\n\t}\n\n\t_panLeft( distance, objectMatrix ) {\n\n\t\t_v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t_v.multiplyScalar( - distance );\n\n\t\tthis._panOffset.add( _v );\n\n\t}\n\n\t_panUp( distance, objectMatrix ) {\n\n\t\tif ( this.screenSpacePanning === true ) {\n\n\t\t\t_v.setFromMatrixColumn( objectMatrix, 1 );\n\n\t\t} else {\n\n\t\t\t_v.setFromMatrixColumn( objectMatrix, 0 );\n\t\t\t_v.crossVectors( this.object.up, _v );\n\n\t\t}\n\n\t\t_v.multiplyScalar( distance );\n\n\t\tthis._panOffset.add( _v );\n\n\t}\n\n\t// deltaX and deltaY are in pixels; right and down are positive\n\t_pan( deltaX, deltaY ) {\n\n\t\tconst element = this.domElement;\n\n\t\tif ( this.object.isPerspectiveCamera ) {\n\n\t\t\t// perspective\n\t\t\tconst position = this.object.position;\n\t\t\t_v.copy( position ).sub( this.target );\n\t\t\tlet targetDistance = _v.length();\n\n\t\t\t// half of the fov is center to top of screen\n\t\t\ttargetDistance *= Math.tan( ( this.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t// we use only clientHeight here so aspect ratio does not distort speed\n\t\t\tthis._panLeft( 2 * deltaX * targetDistance / element.clientHeight, this.object.matrix );\n\t\t\tthis._panUp( 2 * deltaY * targetDistance / element.clientHeight, this.object.matrix );\n\n\t\t} else if ( this.object.isOrthographicCamera ) {\n\n\t\t\t// orthographic\n\t\t\tthis._panLeft( deltaX * ( this.object.right - this.object.left ) / this.object.zoom / element.clientWidth, this.object.matrix );\n\t\t\tthis._panUp( deltaY * ( this.object.top - this.object.bottom ) / this.object.zoom / element.clientHeight, this.object.matrix );\n\n\t\t} else {\n\n\t\t\t// camera neither orthographic nor perspective\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\tthis.enablePan = false;\n\n\t\t}\n\n\t}\n\n\t_dollyOut( dollyScale ) {\n\n\t\tif ( this.object.isPerspectiveCamera || this.object.isOrthographicCamera ) {\n\n\t\t\tthis._scale /= dollyScale;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tthis.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\t_dollyIn( dollyScale ) {\n\n\t\tif ( this.object.isPerspectiveCamera || this.object.isOrthographicCamera ) {\n\n\t\t\tthis._scale *= dollyScale;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tthis.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\t_updateZoomParameters( x, y ) {\n\n\t\tif ( ! this.zoomToCursor ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis._performCursorZoom = true;\n\n\t\tconst rect = this.domElement.getBoundingClientRect();\n\t\tconst dx = x - rect.left;\n\t\tconst dy = y - rect.top;\n\t\tconst w = rect.width;\n\t\tconst h = rect.height;\n\n\t\tthis._mouse.x = ( dx / w ) * 2 - 1;\n\t\tthis._mouse.y = - ( dy / h ) * 2 + 1;\n\n\t\tthis._dollyDirection.set( this._mouse.x, this._mouse.y, 1 ).unproject( this.object ).sub( this.object.position ).normalize();\n\n\t}\n\n\t_clampDistance( dist ) {\n\n\t\treturn Math.max( this.minDistance, Math.min( this.maxDistance, dist ) );\n\n\t}\n\n\t//\n\t// event callbacks - update the object state\n\t//\n\n\t_handleMouseDownRotate( event ) {\n\n\t\tthis._rotateStart.set( event.clientX, event.clientY );\n\n\t}\n\n\t_handleMouseDownDolly( event ) {\n\n\t\tthis._updateZoomParameters( event.clientX, event.clientX );\n\t\tthis._dollyStart.set( event.clientX, event.clientY );\n\n\t}\n\n\t_handleMouseDownPan( event ) {\n\n\t\tthis._panStart.set( event.clientX, event.clientY );\n\n\t}\n\n\t_handleMouseMoveRotate( event ) {\n\n\t\tthis._rotateEnd.set( event.clientX, event.clientY );\n\n\t\tthis._rotateDelta.subVectors( this._rotateEnd, this._rotateStart ).multiplyScalar( this.rotateSpeed );\n\n\t\tconst element = this.domElement;\n\n\t\tthis._rotateLeft( _twoPI * this._rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\tthis._rotateUp( _twoPI * this._rotateDelta.y / element.clientHeight );\n\n\t\tthis._rotateStart.copy( this._rotateEnd );\n\n\t\tthis.update();\n\n\t}\n\n\t_handleMouseMoveDolly( event ) {\n\n\t\tthis._dollyEnd.set( event.clientX, event.clientY );\n\n\t\tthis._dollyDelta.subVectors( this._dollyEnd, this._dollyStart );\n\n\t\tif ( this._dollyDelta.y > 0 ) {\n\n\t\t\tthis._dollyOut( this._getZoomScale( this._dollyDelta.y ) );\n\n\t\t} else if ( this._dollyDelta.y < 0 ) {\n\n\t\t\tthis._dollyIn( this._getZoomScale( this._dollyDelta.y ) );\n\n\t\t}\n\n\t\tthis._dollyStart.copy( this._dollyEnd );\n\n\t\tthis.update();\n\n\t}\n\n\t_handleMouseMovePan( event ) {\n\n\t\tthis._panEnd.set( event.clientX, event.clientY );\n\n\t\tthis._panDelta.subVectors( this._panEnd, this._panStart ).multiplyScalar( this.panSpeed );\n\n\t\tthis._pan( this._panDelta.x, this._panDelta.y );\n\n\t\tthis._panStart.copy( this._panEnd );\n\n\t\tthis.update();\n\n\t}\n\n\t_handleMouseWheel( event ) {\n\n\t\tthis._updateZoomParameters( event.clientX, event.clientY );\n\n\t\tif ( event.deltaY < 0 ) {\n\n\t\t\tthis._dollyIn( this._getZoomScale( event.deltaY ) );\n\n\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\tthis._dollyOut( this._getZoomScale( event.deltaY ) );\n\n\t\t}\n\n\t\tthis.update();\n\n\t}\n\n\t_handleKeyDown( event ) {\n\n\t\tlet needsUpdate = false;\n\n\t\tswitch ( event.code ) {\n\n\t\t\tcase this.keys.UP:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( this.enableRotate ) {\n\n\t\t\t\t\t\tthis._rotateUp( _twoPI * this.keyRotateSpeed / this.domElement.clientHeight );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( this.enablePan ) {\n\n\t\t\t\t\t\tthis._pan( 0, this.keyPanSpeed );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase this.keys.BOTTOM:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( this.enableRotate ) {\n\n\t\t\t\t\t\tthis._rotateUp( - _twoPI * this.keyRotateSpeed / this.domElement.clientHeight );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( this.enablePan ) {\n\n\t\t\t\t\t\tthis._pan( 0, - this.keyPanSpeed );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase this.keys.LEFT:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( this.enableRotate ) {\n\n\t\t\t\t\t\tthis._rotateLeft( _twoPI * this.keyRotateSpeed / this.domElement.clientHeight );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( this.enablePan ) {\n\n\t\t\t\t\t\tthis._pan( this.keyPanSpeed, 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase this.keys.RIGHT:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( this.enableRotate ) {\n\n\t\t\t\t\t\tthis._rotateLeft( - _twoPI * this.keyRotateSpeed / this.domElement.clientHeight );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( this.enablePan ) {\n\n\t\t\t\t\t\tthis._pan( - this.keyPanSpeed, 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( needsUpdate ) {\n\n\t\t\t// prevent the browser from scrolling on cursor keys\n\t\t\tevent.preventDefault();\n\n\t\t\tthis.update();\n\n\t\t}\n\n\n\t}\n\n\t_handleTouchStartRotate( event ) {\n\n\t\tif ( this._pointers.length === 1 ) {\n\n\t\t\tthis._rotateStart.set( event.pageX, event.pageY );\n\n\t\t} else {\n\n\t\t\tconst position = this._getSecondPointerPosition( event );\n\n\t\t\tconst x = 0.5 * ( event.pageX + position.x );\n\t\t\tconst y = 0.5 * ( event.pageY + position.y );\n\n\t\t\tthis._rotateStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\t_handleTouchStartPan( event ) {\n\n\t\tif ( this._pointers.length === 1 ) {\n\n\t\t\tthis._panStart.set( event.pageX, event.pageY );\n\n\t\t} else {\n\n\t\t\tconst position = this._getSecondPointerPosition( event );\n\n\t\t\tconst x = 0.5 * ( event.pageX + position.x );\n\t\t\tconst y = 0.5 * ( event.pageY + position.y );\n\n\t\t\tthis._panStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\t_handleTouchStartDolly( event ) {\n\n\t\tconst position = this._getSecondPointerPosition( event );\n\n\t\tconst dx = event.pageX - position.x;\n\t\tconst dy = event.pageY - position.y;\n\n\t\tconst distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tthis._dollyStart.set( 0, distance );\n\n\t}\n\n\t_handleTouchStartDollyPan( event ) {\n\n\t\tif ( this.enableZoom ) this._handleTouchStartDolly( event );\n\n\t\tif ( this.enablePan ) this._handleTouchStartPan( event );\n\n\t}\n\n\t_handleTouchStartDollyRotate( event ) {\n\n\t\tif ( this.enableZoom ) this._handleTouchStartDolly( event );\n\n\t\tif ( this.enableRotate ) this._handleTouchStartRotate( event );\n\n\t}\n\n\t_handleTouchMoveRotate( event ) {\n\n\t\tif ( this._pointers.length == 1 ) {\n\n\t\t\tthis._rotateEnd.set( event.pageX, event.pageY );\n\n\t\t} else {\n\n\t\t\tconst position = this._getSecondPointerPosition( event );\n\n\t\t\tconst x = 0.5 * ( event.pageX + position.x );\n\t\t\tconst y = 0.5 * ( event.pageY + position.y );\n\n\t\t\tthis._rotateEnd.set( x, y );\n\n\t\t}\n\n\t\tthis._rotateDelta.subVectors( this._rotateEnd, this._rotateStart ).multiplyScalar( this.rotateSpeed );\n\n\t\tconst element = this.domElement;\n\n\t\tthis._rotateLeft( _twoPI * this._rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\tthis._rotateUp( _twoPI * this._rotateDelta.y / element.clientHeight );\n\n\t\tthis._rotateStart.copy( this._rotateEnd );\n\n\t}\n\n\t_handleTouchMovePan( event ) {\n\n\t\tif ( this._pointers.length === 1 ) {\n\n\t\t\tthis._panEnd.set( event.pageX, event.pageY );\n\n\t\t} else {\n\n\t\t\tconst position = this._getSecondPointerPosition( event );\n\n\t\t\tconst x = 0.5 * ( event.pageX + position.x );\n\t\t\tconst y = 0.5 * ( event.pageY + position.y );\n\n\t\t\tthis._panEnd.set( x, y );\n\n\t\t}\n\n\t\tthis._panDelta.subVectors( this._panEnd, this._panStart ).multiplyScalar( this.panSpeed );\n\n\t\tthis._pan( this._panDelta.x, this._panDelta.y );\n\n\t\tthis._panStart.copy( this._panEnd );\n\n\t}\n\n\t_handleTouchMoveDolly( event ) {\n\n\t\tconst position = this._getSecondPointerPosition( event );\n\n\t\tconst dx = event.pageX - position.x;\n\t\tconst dy = event.pageY - position.y;\n\n\t\tconst distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tthis._dollyEnd.set( 0, distance );\n\n\t\tthis._dollyDelta.set( 0, Math.pow( this._dollyEnd.y / this._dollyStart.y, this.zoomSpeed ) );\n\n\t\tthis._dollyOut( this._dollyDelta.y );\n\n\t\tthis._dollyStart.copy( this._dollyEnd );\n\n\t\tconst centerX = ( event.pageX + position.x ) * 0.5;\n\t\tconst centerY = ( event.pageY + position.y ) * 0.5;\n\n\t\tthis._updateZoomParameters( centerX, centerY );\n\n\t}\n\n\t_handleTouchMoveDollyPan( event ) {\n\n\t\tif ( this.enableZoom ) this._handleTouchMoveDolly( event );\n\n\t\tif ( this.enablePan ) this._handleTouchMovePan( event );\n\n\t}\n\n\t_handleTouchMoveDollyRotate( event ) {\n\n\t\tif ( this.enableZoom ) this._handleTouchMoveDolly( event );\n\n\t\tif ( this.enableRotate ) this._handleTouchMoveRotate( event );\n\n\t}\n\n\t// pointers\n\n\t_addPointer( event ) {\n\n\t\tthis._pointers.push( event.pointerId );\n\n\t}\n\n\t_removePointer( event ) {\n\n\t\tdelete this._pointerPositions[ event.pointerId ];\n\n\t\tfor ( let i = 0; i < this._pointers.length; i ++ ) {\n\n\t\t\tif ( this._pointers[ i ] == event.pointerId ) {\n\n\t\t\t\tthis._pointers.splice( i, 1 );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_isTrackingPointer( event ) {\n\n\t\tfor ( let i = 0; i < this._pointers.length; i ++ ) {\n\n\t\t\tif ( this._pointers[ i ] == event.pointerId ) return true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\t_trackPointer( event ) {\n\n\t\tlet position = this._pointerPositions[ event.pointerId ];\n\n\t\tif ( position === undefined ) {\n\n\t\t\tposition = new Vector2();\n\t\t\tthis._pointerPositions[ event.pointerId ] = position;\n\n\t\t}\n\n\t\tposition.set( event.pageX, event.pageY );\n\n\t}\n\n\t_getSecondPointerPosition( event ) {\n\n\t\tconst pointerId = ( event.pointerId === this._pointers[ 0 ] ) ? this._pointers[ 1 ] : this._pointers[ 0 ];\n\n\t\treturn this._pointerPositions[ pointerId ];\n\n\t}\n\n\t//\n\n\t_customWheelEvent( event ) {\n\n\t\tconst mode = event.deltaMode;\n\n\t\t// minimal wheel event altered to meet delta-zoom demand\n\t\tconst newEvent = {\n\t\t\tclientX: event.clientX,\n\t\t\tclientY: event.clientY,\n\t\t\tdeltaY: event.deltaY,\n\t\t};\n\n\t\tswitch ( mode ) {\n\n\t\t\tcase 1: // LINE_MODE\n\t\t\t\tnewEvent.deltaY *= 16;\n\t\t\t\tbreak;\n\n\t\t\tcase 2: // PAGE_MODE\n\t\t\t\tnewEvent.deltaY *= 100;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\t// detect if event was triggered by pinching\n\t\tif ( event.ctrlKey && ! this._controlActive ) {\n\n\t\t\tnewEvent.deltaY *= 10;\n\n\t\t}\n\n\t\treturn newEvent;\n\n\t}\n\n}\n\nfunction onPointerDown( event ) {\n\n\tif ( this.enabled === false ) return;\n\n\tif ( this._pointers.length === 0 ) {\n\n\t\tthis.domElement.setPointerCapture( event.pointerId );\n\n\t\tthis.domElement.addEventListener( 'pointermove', this._onPointerMove );\n\t\tthis.domElement.addEventListener( 'pointerup', this._onPointerUp );\n\n\t}\n\n\t//\n\n\tif ( this._isTrackingPointer( event ) ) return;\n\n\t//\n\n\tthis._addPointer( event );\n\n\tif ( event.pointerType === 'touch' ) {\n\n\t\tthis._onTouchStart( event );\n\n\t} else {\n\n\t\tthis._onMouseDown( event );\n\n\t}\n\n}\n\nfunction onPointerMove( event ) {\n\n\tif ( this.enabled === false ) return;\n\n\tif ( event.pointerType === 'touch' ) {\n\n\t\tthis._onTouchMove( event );\n\n\t} else {\n\n\t\tthis._onMouseMove( event );\n\n\t}\n\n}\n\nfunction onPointerUp( event ) {\n\n\tthis._removePointer( event );\n\n\tswitch ( this._pointers.length ) {\n\n\t\tcase 0:\n\n\t\t\tthis.domElement.releasePointerCapture( event.pointerId );\n\n\t\t\tthis.domElement.removeEventListener( 'pointermove', this._onPointerMove );\n\t\t\tthis.domElement.removeEventListener( 'pointerup', this._onPointerUp );\n\n\t\t\tthis.dispatchEvent( _endEvent );\n\n\t\t\tthis.state = _STATE.NONE;\n\n\t\t\tbreak;\n\n\t\tcase 1:\n\n\t\t\tconst pointerId = this._pointers[ 0 ];\n\t\t\tconst position = this._pointerPositions[ pointerId ];\n\n\t\t\t// minimal placeholder event - allows state correction on pointer-up\n\t\t\tthis._onTouchStart( { pointerId: pointerId, pageX: position.x, pageY: position.y } );\n\n\t\t\tbreak;\n\n\t}\n\n}\n\nfunction onMouseDown( event ) {\n\n\tlet mouseAction;\n\n\tswitch ( event.button ) {\n\n\t\tcase 0:\n\n\t\t\tmouseAction = this.mouseButtons.LEFT;\n\t\t\tbreak;\n\n\t\tcase 1:\n\n\t\t\tmouseAction = this.mouseButtons.MIDDLE;\n\t\t\tbreak;\n\n\t\tcase 2:\n\n\t\t\tmouseAction = this.mouseButtons.RIGHT;\n\t\t\tbreak;\n\n\t\tdefault:\n\n\t\t\tmouseAction = - 1;\n\n\t}\n\n\tswitch ( mouseAction ) {\n\n\t\tcase MOUSE.DOLLY:\n\n\t\t\tif ( this.enableZoom === false ) return;\n\n\t\t\tthis._handleMouseDownDolly( event );\n\n\t\t\tthis.state = _STATE.DOLLY;\n\n\t\t\tbreak;\n\n\t\tcase MOUSE.ROTATE:\n\n\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\tif ( this.enablePan === false ) return;\n\n\t\t\t\tthis._handleMouseDownPan( event );\n\n\t\t\t\tthis.state = _STATE.PAN;\n\n\t\t\t} else {\n\n\t\t\t\tif ( this.enableRotate === false ) return;\n\n\t\t\t\tthis._handleMouseDownRotate( event );\n\n\t\t\t\tthis.state = _STATE.ROTATE;\n\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\tcase MOUSE.PAN:\n\n\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\tif ( this.enableRotate === false ) return;\n\n\t\t\t\tthis._handleMouseDownRotate( event );\n\n\t\t\t\tthis.state = _STATE.ROTATE;\n\n\t\t\t} else {\n\n\t\t\t\tif ( this.enablePan === false ) return;\n\n\t\t\t\tthis._handleMouseDownPan( event );\n\n\t\t\t\tthis.state = _STATE.PAN;\n\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\tdefault:\n\n\t\t\tthis.state = _STATE.NONE;\n\n\t}\n\n\tif ( this.state !== _STATE.NONE ) {\n\n\t\tthis.dispatchEvent( _startEvent );\n\n\t}\n\n}\n\nfunction onMouseMove( event ) {\n\n\tswitch ( this.state ) {\n\n\t\tcase _STATE.ROTATE:\n\n\t\t\tif ( this.enableRotate === false ) return;\n\n\t\t\tthis._handleMouseMoveRotate( event );\n\n\t\t\tbreak;\n\n\t\tcase _STATE.DOLLY:\n\n\t\t\tif ( this.enableZoom === false ) return;\n\n\t\t\tthis._handleMouseMoveDolly( event );\n\n\t\t\tbreak;\n\n\t\tcase _STATE.PAN:\n\n\t\t\tif ( this.enablePan === false ) return;\n\n\t\t\tthis._handleMouseMovePan( event );\n\n\t\t\tbreak;\n\n\t}\n\n}\n\nfunction onMouseWheel( event ) {\n\n\tif ( this.enabled === false || this.enableZoom === false || this.state !== _STATE.NONE ) return;\n\n\tevent.preventDefault();\n\n\tthis.dispatchEvent( _startEvent );\n\n\tthis._handleMouseWheel( this._customWheelEvent( event ) );\n\n\tthis.dispatchEvent( _endEvent );\n\n}\n\nfunction onKeyDown( event ) {\n\n\tif ( this.enabled === false ) return;\n\n\tthis._handleKeyDown( event );\n\n}\n\nfunction onTouchStart( event ) {\n\n\tthis._trackPointer( event );\n\n\tswitch ( this._pointers.length ) {\n\n\t\tcase 1:\n\n\t\t\tswitch ( this.touches.ONE ) {\n\n\t\t\t\tcase TOUCH.ROTATE:\n\n\t\t\t\t\tif ( this.enableRotate === false ) return;\n\n\t\t\t\t\tthis._handleTouchStartRotate( event );\n\n\t\t\t\t\tthis.state = _STATE.TOUCH_ROTATE;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase TOUCH.PAN:\n\n\t\t\t\t\tif ( this.enablePan === false ) return;\n\n\t\t\t\t\tthis._handleTouchStartPan( event );\n\n\t\t\t\t\tthis.state = _STATE.TOUCH_PAN;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tthis.state = _STATE.NONE;\n\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\tcase 2:\n\n\t\t\tswitch ( this.touches.TWO ) {\n\n\t\t\t\tcase TOUCH.DOLLY_PAN:\n\n\t\t\t\t\tif ( this.enableZoom === false && this.enablePan === false ) return;\n\n\t\t\t\t\tthis._handleTouchStartDollyPan( event );\n\n\t\t\t\t\tthis.state = _STATE.TOUCH_DOLLY_PAN;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase TOUCH.DOLLY_ROTATE:\n\n\t\t\t\t\tif ( this.enableZoom === false && this.enableRotate === false ) return;\n\n\t\t\t\t\tthis._handleTouchStartDollyRotate( event );\n\n\t\t\t\t\tthis.state = _STATE.TOUCH_DOLLY_ROTATE;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tthis.state = _STATE.NONE;\n\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\tdefault:\n\n\t\t\tthis.state = _STATE.NONE;\n\n\t}\n\n\tif ( this.state !== _STATE.NONE ) {\n\n\t\tthis.dispatchEvent( _startEvent );\n\n\t}\n\n}\n\nfunction onTouchMove( event ) {\n\n\tthis._trackPointer( event );\n\n\tswitch ( this.state ) {\n\n\t\tcase _STATE.TOUCH_ROTATE:\n\n\t\t\tif ( this.enableRotate === false ) return;\n\n\t\t\tthis._handleTouchMoveRotate( event );\n\n\t\t\tthis.update();\n\n\t\t\tbreak;\n\n\t\tcase _STATE.TOUCH_PAN:\n\n\t\t\tif ( this.enablePan === false ) return;\n\n\t\t\tthis._handleTouchMovePan( event );\n\n\t\t\tthis.update();\n\n\t\t\tbreak;\n\n\t\tcase _STATE.TOUCH_DOLLY_PAN:\n\n\t\t\tif ( this.enableZoom === false && this.enablePan === false ) return;\n\n\t\t\tthis._handleTouchMoveDollyPan( event );\n\n\t\t\tthis.update();\n\n\t\t\tbreak;\n\n\t\tcase _STATE.TOUCH_DOLLY_ROTATE:\n\n\t\t\tif ( this.enableZoom === false && this.enableRotate === false ) return;\n\n\t\t\tthis._handleTouchMoveDollyRotate( event );\n\n\t\t\tthis.update();\n\n\t\t\tbreak;\n\n\t\tdefault:\n\n\t\t\tthis.state = _STATE.NONE;\n\n\t}\n\n}\n\nfunction onContextMenu( event ) {\n\n\tif ( this.enabled === false ) return;\n\n\tevent.preventDefault();\n\n}\n\nfunction interceptControlDown( event ) {\n\n\tif ( event.key === 'Control' ) {\n\n\t\tthis._controlActive = true;\n\n\t\tconst document = this.domElement.getRootNode(); // offscreen canvas compatibility\n\n\t\tdocument.addEventListener( 'keyup', this._interceptControlUp, { passive: true, capture: true } );\n\n\t}\n\n}\n\nfunction interceptControlUp( event ) {\n\n\tif ( event.key === 'Control' ) {\n\n\t\tthis._controlActive = false;\n\n\t\tconst document = this.domElement.getRootNode(); // offscreen canvas compatibility\n\n\t\tdocument.removeEventListener( 'keyup', this._interceptControlUp, { passive: true, capture: true } );\n\n\t}\n\n}\n\nexport { OrbitControls };\n","/**\n * @module CopyShader\n * @three_import import { CopyShader } from 'three/addons/shaders/CopyShader.js';\n */\n\n/**\n * Full-screen copy shader pass.\n *\n * @constant\n * @type {ShaderMaterial~Shader}\n */\nconst CopyShader = {\n\n\tname: 'CopyShader',\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'opacity': { value: 1.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float opacity;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\t\t\tgl_FragColor = opacity * texel;\n\n\n\t\t}`\n\n};\n\nexport { CopyShader };\n","import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tOrthographicCamera,\n\tMesh\n} from 'three';\n\n/**\n * Abstract base class for all post processing passes.\n *\n * This module is only relevant for post processing with {@link WebGLRenderer}.\n *\n * @abstract\n * @three_import import { Pass } from 'three/addons/postprocessing/Pass.js';\n */\nclass Pass {\n\n\t/**\n\t * Constructs a new pass.\n\t */\n\tconstructor() {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isPass = true;\n\n\t\t/**\n\t\t * If set to `true`, the pass is processed by the composer.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.enabled = true;\n\n\t\t/**\n\t\t * If set to `true`, the pass indicates to swap read and write buffer after rendering.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.needsSwap = true;\n\n\t\t/**\n\t\t * If set to `true`, the pass clears its buffer before rendering\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.clear = false;\n\n\t\t/**\n\t\t * If set to `true`, the result of the pass is rendered to screen. The last pass in the composers\n\t\t * pass chain gets automatically rendered to screen, no matter how this property is configured.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\t/**\n\t * Sets the size of the pass.\n\t *\n\t * @abstract\n\t * @param {number} width - The width to set.\n\t * @param {number} height - The width to set.\n\t */\n\tsetSize( /* width, height */ ) {}\n\n\t/**\n\t * This method holds the render logic of a pass. It must be implemented in all derived classes.\n\t *\n\t * @abstract\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the pass is no longer used in your app.\n\t *\n\t * @abstract\n\t */\n\tdispose() {}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nclass FullscreenTriangleGeometry extends BufferGeometry {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\n\t}\n\n}\n\nconst _geometry = new FullscreenTriangleGeometry();\n\n\n/**\n * This module is a helper for passes which need to render a full\n * screen effect which is quite common in context of post processing.\n *\n * The intended usage is to reuse a single full screen quad for rendering\n * subsequent passes by just reassigning the `material` reference.\n *\n * This module can only be used with {@link WebGLRenderer}.\n *\n * @augments Mesh\n * @three_import import { FullScreenQuad } from 'three/addons/postprocessing/Pass.js';\n */\nclass FullScreenQuad {\n\n\t/**\n\t * Constructs a new full screen quad.\n\t *\n\t * @param {?Material} material - The material to render te full screen quad with.\n\t */\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\t/**\n\t * Renders the full screen quad.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t */\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\t/**\n\t * The quad's material.\n\t *\n\t * @type {?Material}\n\t */\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { Pass, FullScreenQuad };\n","import {\n\tShaderMaterial,\n\tUniformsUtils\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\n\n/**\n * This pass can be used to create a post processing effect\n * with a raw GLSL shader object. Useful for implementing custom\n * effects.\n *\n * ```js\n * const fxaaPass = new ShaderPass( FXAAShader );\n * composer.addPass( fxaaPass );\n * ```\n *\n * @augments Pass\n * @three_import import { ShaderPass } from 'three/addons/postprocessing/ShaderPass.js';\n */\nclass ShaderPass extends Pass {\n\n\t/**\n\t * Constructs a new shader pass.\n\t *\n\t * @param {Object|ShaderMaterial} [shader] - A shader object holding vertex and fragment shader as well as\n\t * defines and uniforms. It's also valid to pass a custom shader material.\n\t * @param {string} [textureID='tDiffuse'] - The name of the texture uniform that should sample\n\t * the read buffer.\n\t */\n\tconstructor( shader, textureID = 'tDiffuse' ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The name of the texture uniform that should sample the read buffer.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'tDiffuse'\n\t\t */\n\t\tthis.textureID = textureID;\n\n\t\t/**\n\t\t * The pass uniforms.\n\t\t *\n\t\t * @type {?Object}\n\t\t */\n\t\tthis.uniforms = null;\n\n\t\t/**\n\t\t * The pass material.\n\t\t *\n\t\t * @type {?ShaderMaterial}\n\t\t */\n\t\tthis.material = null;\n\n\t\tif ( shader instanceof ShaderMaterial ) {\n\n\t\t\tthis.uniforms = shader.uniforms;\n\n\t\t\tthis.material = shader;\n\n\t\t} else if ( shader ) {\n\n\t\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t\tthis.material = new ShaderMaterial( {\n\n\t\t\t\tname: ( shader.name !== undefined ) ? shader.name : 'unspecified',\n\t\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\t\tuniforms: this.uniforms,\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t\t} );\n\n\t\t}\n\n\t\t// internals\n\n\t\tthis._fsQuad = new FullScreenQuad( this.material );\n\n\t}\n\n\t/**\n\t * Performs the shader pass.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis._fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the pass is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.material.dispose();\n\n\t\tthis._fsQuad.dispose();\n\n\t}\n\n}\n\nexport { ShaderPass };\n","import { Pass } from './Pass.js';\n\n/**\n * This pass can be used to define a mask during post processing.\n * Meaning only areas of subsequent post processing are affected\n * which lie in the masking area of this pass. Internally, the masking\n * is implemented with the stencil buffer.\n *\n * ```js\n * const maskPass = new MaskPass( scene, camera );\n * composer.addPass( maskPass );\n * ```\n *\n * @augments Pass\n * @three_import import { MaskPass } from 'three/addons/postprocessing/MaskPass.js';\n */\nclass MaskPass extends Pass {\n\n\t/**\n\t * Constructs a new mask pass.\n\t *\n\t * @param {Scene} scene - The 3D objects in this scene will define the mask.\n\t * @param {Camera} camera - The camera.\n\t */\n\tconstructor( scene, camera ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The scene that defines the mask.\n\t\t *\n\t\t * @type {Scene}\n\t\t */\n\t\tthis.scene = scene;\n\n\t\t/**\n\t\t * The camera.\n\t\t *\n\t\t * @type {Camera}\n\t\t */\n\t\tthis.camera = camera;\n\n\t\t/**\n\t\t * Overwritten to perform a clear operation by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.clear = true;\n\n\t\t/**\n\t\t * Overwritten to disable the swap.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.needsSwap = false;\n\n\t\t/**\n\t\t * Whether to inverse the mask or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.inverse = false;\n\n\t}\n\n\t/**\n\t * Performs a mask pass with the configured scene and camera.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst context = renderer.getContext();\n\t\tconst state = renderer.state;\n\n\t\t// don't update color or depth\n\n\t\tstate.buffers.color.setMask( false );\n\t\tstate.buffers.depth.setMask( false );\n\n\t\t// lock buffers\n\n\t\tstate.buffers.color.setLocked( true );\n\t\tstate.buffers.depth.setLocked( true );\n\n\t\t// set up stencil\n\n\t\tlet writeValue, clearValue;\n\n\t\tif ( this.inverse ) {\n\n\t\t\twriteValue = 0;\n\t\t\tclearValue = 1;\n\n\t\t} else {\n\n\t\t\twriteValue = 1;\n\t\t\tclearValue = 0;\n\n\t\t}\n\n\t\tstate.buffers.stencil.setTest( true );\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\tstate.buffers.stencil.setClear( clearValue );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t// draw into the stencil buffer\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\trenderer.setRenderTarget( writeBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// unlock color and depth buffer and make them writable for subsequent rendering/clearing\n\n\t\tstate.buffers.color.setLocked( false );\n\t\tstate.buffers.depth.setLocked( false );\n\n\t\tstate.buffers.color.setMask( true );\n\t\tstate.buffers.depth.setMask( true );\n\n\t\t// only render where stencil is set to 1\n\n\t\tstate.buffers.stencil.setLocked( false );\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t}\n\n}\n\n/**\n * This pass can be used to clear a mask previously defined with {@link MaskPass}.\n *\n * ```js\n * const clearPass = new ClearMaskPass();\n * composer.addPass( clearPass );\n * ```\n *\n * @augments Pass\n */\nclass ClearMaskPass extends Pass {\n\n\t/**\n\t * Constructs a new clear mask pass.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * Overwritten to disable the swap.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.needsSwap = false;\n\n\t}\n\n\t/**\n\t * Performs the clear of the currently defined mask.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\trenderer.state.buffers.stencil.setLocked( false );\n\t\trenderer.state.buffers.stencil.setTest( false );\n\n\t}\n\n}\n\nexport { MaskPass, ClearMaskPass };\n","import {\n\tClock,\n\tHalfFloatType,\n\tNoBlending,\n\tVector2,\n\tWebGLRenderTarget\n} from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from './ShaderPass.js';\nimport { ClearMaskPass, MaskPass } from './MaskPass.js';\n\n/**\n * Used to implement post-processing effects in three.js.\n * The class manages a chain of post-processing passes to produce the final visual result.\n * Post-processing passes are executed in order of their addition/insertion.\n * The last pass is automatically rendered to screen.\n *\n * This module can only be used with {@link WebGLRenderer}.\n *\n * ```js\n * const composer = new EffectComposer( renderer );\n *\n * // adding some passes\n * const renderPass = new RenderPass( scene, camera );\n * composer.addPass( renderPass );\n *\n * const glitchPass = new GlitchPass();\n * composer.addPass( glitchPass );\n *\n * const outputPass = new OutputPass()\n * composer.addPass( outputPass );\n *\n * function animate() {\n *\n * \tcomposer.render(); // instead of renderer.render()\n *\n * }\n * ```\n *\n * @three_import import { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js';\n */\nclass EffectComposer {\n\n\t/**\n\t * Constructs a new effect composer.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} [renderTarget] - This render target and a clone will\n\t * be used as the internal read and write buffers. If not given, the composer creates\n\t * the buffers automatically.\n\t */\n\tconstructor( renderer, renderTarget ) {\n\n\t\t/**\n\t\t * The renderer.\n\t\t *\n\t\t * @type {WebGLRenderer}\n\t\t */\n\t\tthis.renderer = renderer;\n\n\t\tthis._pixelRatio = renderer.getPixelRatio();\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = renderer.getSize( new Vector2() );\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, { type: HalfFloatType } );\n\t\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t\t} else {\n\n\t\t\tthis._width = renderTarget.width;\n\t\t\tthis._height = renderTarget.height;\n\n\t\t}\n\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\t\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\t\t/**\n\t\t * A reference to the internal write buffer. Passes usually write\n\t\t * their result into this buffer.\n\t\t *\n\t\t * @type {WebGLRenderTarget}\n\t\t */\n\t\tthis.writeBuffer = this.renderTarget1;\n\n\t\t/**\n\t\t * A reference to the internal read buffer. Passes usually read\n\t\t * the previous render result from this buffer.\n\t\t *\n\t\t * @type {WebGLRenderTarget}\n\t\t */\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t\t/**\n\t\t * Whether the final pass is rendered to the screen (default framebuffer) or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.renderToScreen = true;\n\n\t\t/**\n\t\t * An array representing the (ordered) chain of post-processing passes.\n\t\t *\n\t\t * @type {Array<Pass>}\n\t\t */\n\t\tthis.passes = [];\n\n\t\t/**\n\t\t * A copy pass used for internal swap operations.\n\t\t *\n\t\t * @private\n\t\t * @type {ShaderPass}\n\t\t */\n\t\tthis.copyPass = new ShaderPass( CopyShader );\n\t\tthis.copyPass.material.blending = NoBlending;\n\n\t\t/**\n\t\t * The internal clock for managing time data.\n\t\t *\n\t\t * @private\n\t\t * @type {Clock}\n\t\t */\n\t\tthis.clock = new Clock();\n\n\t}\n\n\t/**\n\t * Swaps the internal read/write buffers.\n\t */\n\tswapBuffers() {\n\n\t\tconst tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t}\n\n\t/**\n\t * Adds the given pass to the pass chain.\n\t *\n\t * @param {Pass} pass - The pass to add.\n\t */\n\taddPass( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\t/**\n\t * Inserts the given pass at a given index.\n\t *\n\t * @param {Pass} pass - The pass to insert.\n\t * @param {number} index - The index into the pass chain.\n\t */\n\tinsertPass( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\t/**\n\t * Removes the given pass from the pass chain.\n\t *\n\t * @param {Pass} pass - The pass to remove.\n\t */\n\tremovePass( pass ) {\n\n\t\tconst index = this.passes.indexOf( pass );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tthis.passes.splice( index, 1 );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns `true` if the pass for the given index is the last enabled pass in the pass chain.\n\t *\n\t * @param {number} passIndex - The pass index.\n\t * @return {boolean} Whether the pass for the given index is the last pass in the pass chain.\n\t */\n\tisLastEnabledPass( passIndex ) {\n\n\t\tfor ( let i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t/**\n\t * Executes all enabled post-processing passes in order to produce the final frame.\n\t *\n\t * @param {number} deltaTime - The delta time in seconds. If not given, the composer computes\n\t * its own time delta value.\n\t */\n\trender( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tconst currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tlet maskActive = false;\n\n\t\tfor ( let i = 0, il = this.passes.length; i < il; i ++ ) {\n\n\t\t\tconst pass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tconst context = this.renderer.getContext();\n\t\t\t\t\tconst stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n\t/**\n\t * Resets the internal state of the EffectComposer.\n\t *\n\t * @param {WebGLRenderTarget} [renderTarget] - This render target has the same purpose like\n\t * the one from the constructor. If set, it is used to setup the read and write buffers.\n\t */\n\treset( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t}\n\n\t/**\n\t * Resizes the internal read and write buffers as well as all passes. Similar to {@link WebGLRenderer#setSize},\n\t * this method honors the current pixel ration.\n\t *\n\t * @param {number} width - The width in logical pixels.\n\t * @param {number} height - The height in logical pixels.\n\t */\n\tsetSize( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tconst effectiveWidth = this._width * this._pixelRatio;\n\t\tconst effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( let i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets device pixel ratio. This is usually used for HiDPI device to prevent blurring output.\n\t * Setting the pixel ratio will automatically resize the composer.\n\t *\n\t * @param {number} pixelRatio - The pixel ratio to set.\n\t */\n\tsetPixelRatio( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the composer is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\n\t\tthis.copyPass.dispose();\n\n\t}\n\n}\n\nexport { EffectComposer };\n","import {\n\tColor\n} from 'three';\n\n/**\n * @module LuminosityHighPassShader\n * @three_import import { LuminosityHighPassShader } from 'three/addons/shaders/LuminosityHighPassShader.js';\n */\n\n/**\n * Luminosity high pass shader.\n *\n * @constant\n * @type {ShaderMaterial~Shader}\n */\nconst LuminosityHighPassShader = {\n\n\tname: 'LuminosityHighPassShader',\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'luminosityThreshold': { value: 1.0 },\n\t\t'smoothWidth': { value: 1.0 },\n\t\t'defaultColor': { value: new Color( 0x000000 ) },\n\t\t'defaultOpacity': { value: 0.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform vec3 defaultColor;\n\t\tuniform float defaultOpacity;\n\t\tuniform float luminosityThreshold;\n\t\tuniform float smoothWidth;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\n\t\t\tfloat v = luminance( texel.xyz );\n\n\t\t\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\n\n\t\t\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\n\n\t\t\tgl_FragColor = mix( outputColor, texel, alpha );\n\n\t\t}`\n\n};\n\nexport { LuminosityHighPassShader };\n","import {\n\tAdditiveBlending,\n\tColor,\n\tHalfFloatType,\n\tMeshBasicMaterial,\n\tShaderMaterial,\n\tUniformsUtils,\n\tVector2,\n\tVector3,\n\tWebGLRenderTarget\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { LuminosityHighPassShader } from '../shaders/LuminosityHighPassShader.js';\n\n/**\n * This pass is inspired by the bloom pass of Unreal Engine. It creates a\n * mip map chain of bloom textures and blurs them with different radii. Because\n * of the weighted combination of mips, and because larger blurs are done on\n * higher mips, this effect provides good quality and performance.\n *\n * When using this pass, tone mapping must be enabled in the renderer settings.\n *\n * Reference:\n * - [Bloom in Unreal Engine]{@link https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/Bloom/}\n *\n * ```js\n * const resolution = new THREE.Vector2( window.innerWidth, window.innerHeight );\n * const bloomPass = new UnrealBloomPass( resolution, 1.5, 0.4, 0.85 );\n * composer.addPass( bloomPass );\n * ```\n *\n * @augments Pass\n * @three_import import { UnrealBloomPass } from 'three/addons/postprocessing/UnrealBloomPass.js';\n */\nclass UnrealBloomPass extends Pass {\n\n\t/**\n\t * Constructs a new Unreal Bloom pass.\n\t *\n\t * @param {Vector2} [resolution] - The effect's resolution.\n\t * @param {number} [strength=1] - The Bloom strength.\n\t * @param {number} radius - The Bloom radius.\n\t * @param {number} threshold - The luminance threshold limits which bright areas contribute to the Bloom effect.\n\t */\n\tconstructor( resolution, strength = 1, radius, threshold ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The Bloom strength.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.strength = strength;\n\n\t\t/**\n\t\t * The Bloom radius.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.radius = radius;\n\n\t\t/**\n\t\t * The luminance threshold limits which bright areas contribute to the Bloom effect.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.threshold = threshold;\n\n\t\t/**\n\t\t * The effect's resolution.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (256,256)\n\t\t */\n\t\tthis.resolution = ( resolution !== undefined ) ? new Vector2( resolution.x, resolution.y ) : new Vector2( 256, 256 );\n\n\t\t/**\n\t\t * The effect's clear color\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (0,0,0)\n\t\t */\n\t\tthis.clearColor = new Color( 0, 0, 0 );\n\n\t\t/**\n\t\t * Overwritten to disable the swap.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.needsSwap = false;\n\n\t\t// internals\n\n\t\t// render targets\n\t\tthis.renderTargetsHorizontal = [];\n\t\tthis.renderTargetsVertical = [];\n\t\tthis.nMips = 5;\n\t\tlet resx = Math.round( this.resolution.x / 2 );\n\t\tlet resy = Math.round( this.resolution.y / 2 );\n\n\t\tthis.renderTargetBright = new WebGLRenderTarget( resx, resy, { type: HalfFloatType } );\n\t\tthis.renderTargetBright.texture.name = 'UnrealBloomPass.bright';\n\t\tthis.renderTargetBright.texture.generateMipmaps = false;\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tconst renderTargetHorizontal = new WebGLRenderTarget( resx, resy, { type: HalfFloatType } );\n\n\t\t\trenderTargetHorizontal.texture.name = 'UnrealBloomPass.h' + i;\n\t\t\trenderTargetHorizontal.texture.generateMipmaps = false;\n\n\t\t\tthis.renderTargetsHorizontal.push( renderTargetHorizontal );\n\n\t\t\tconst renderTargetVertical = new WebGLRenderTarget( resx, resy, { type: HalfFloatType } );\n\n\t\t\trenderTargetVertical.texture.name = 'UnrealBloomPass.v' + i;\n\t\t\trenderTargetVertical.texture.generateMipmaps = false;\n\n\t\t\tthis.renderTargetsVertical.push( renderTargetVertical );\n\n\t\t\tresx = Math.round( resx / 2 );\n\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t\t// luminosity high pass material\n\n\t\tconst highPassShader = LuminosityHighPassShader;\n\t\tthis.highPassUniforms = UniformsUtils.clone( highPassShader.uniforms );\n\n\t\tthis.highPassUniforms[ 'luminosityThreshold' ].value = threshold;\n\t\tthis.highPassUniforms[ 'smoothWidth' ].value = 0.01;\n\n\t\tthis.materialHighPassFilter = new ShaderMaterial( {\n\t\t\tuniforms: this.highPassUniforms,\n\t\t\tvertexShader: highPassShader.vertexShader,\n\t\t\tfragmentShader: highPassShader.fragmentShader\n\t\t} );\n\n\t\t// gaussian blur materials\n\n\t\tthis.separableBlurMaterials = [];\n\t\tconst kernelSizeArray = [ 3, 5, 7, 9, 11 ];\n\t\tresx = Math.round( this.resolution.x / 2 );\n\t\tresy = Math.round( this.resolution.y / 2 );\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.separableBlurMaterials.push( this._getSeparableBlurMaterial( kernelSizeArray[ i ] ) );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'invSize' ].value = new Vector2( 1 / resx, 1 / resy );\n\n\t\t\tresx = Math.round( resx / 2 );\n\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t\t// composite material\n\n\t\tthis.compositeMaterial = this._getCompositeMaterial( this.nMips );\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture1' ].value = this.renderTargetsVertical[ 0 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture2' ].value = this.renderTargetsVertical[ 1 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture3' ].value = this.renderTargetsVertical[ 2 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture4' ].value = this.renderTargetsVertical[ 3 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture5' ].value = this.renderTargetsVertical[ 4 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'bloomStrength' ].value = strength;\n\t\tthis.compositeMaterial.uniforms[ 'bloomRadius' ].value = 0.1;\n\n\t\tconst bloomFactors = [ 1.0, 0.8, 0.6, 0.4, 0.2 ];\n\t\tthis.compositeMaterial.uniforms[ 'bloomFactors' ].value = bloomFactors;\n\t\tthis.bloomTintColors = [ new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ) ];\n\t\tthis.compositeMaterial.uniforms[ 'bloomTintColors' ].value = this.bloomTintColors;\n\n\t\t// blend material\n\n\t\tthis.copyUniforms = UniformsUtils.clone( CopyShader.uniforms );\n\n\t\tthis.blendMaterial = new ShaderMaterial( {\n\t\t\tuniforms: this.copyUniforms,\n\t\t\tvertexShader: CopyShader.vertexShader,\n\t\t\tfragmentShader: CopyShader.fragmentShader,\n\t\t\tblending: AdditiveBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\tthis._oldClearColor = new Color();\n\t\tthis._oldClearAlpha = 1;\n\n\t\tthis._basic = new MeshBasicMaterial();\n\n\t\tthis._fsQuad = new FullScreenQuad( null );\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the pass is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tfor ( let i = 0; i < this.renderTargetsHorizontal.length; i ++ ) {\n\n\t\t\tthis.renderTargetsHorizontal[ i ].dispose();\n\n\t\t}\n\n\t\tfor ( let i = 0; i < this.renderTargetsVertical.length; i ++ ) {\n\n\t\t\tthis.renderTargetsVertical[ i ].dispose();\n\n\t\t}\n\n\t\tthis.renderTargetBright.dispose();\n\n\t\t//\n\n\t\tfor ( let i = 0; i < this.separableBlurMaterials.length; i ++ ) {\n\n\t\t\tthis.separableBlurMaterials[ i ].dispose();\n\n\t\t}\n\n\t\tthis.compositeMaterial.dispose();\n\t\tthis.blendMaterial.dispose();\n\t\tthis._basic.dispose();\n\n\t\t//\n\n\t\tthis._fsQuad.dispose();\n\n\t}\n\n\t/**\n\t * Sets the size of the pass.\n\t *\n\t * @param {number} width - The width to set.\n\t * @param {number} height - The width to set.\n\t */\n\tsetSize( width, height ) {\n\n\t\tlet resx = Math.round( width / 2 );\n\t\tlet resy = Math.round( height / 2 );\n\n\t\tthis.renderTargetBright.setSize( resx, resy );\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.renderTargetsHorizontal[ i ].setSize( resx, resy );\n\t\t\tthis.renderTargetsVertical[ i ].setSize( resx, resy );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'invSize' ].value = new Vector2( 1 / resx, 1 / resy );\n\n\t\t\tresx = Math.round( resx / 2 );\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Performs the Bloom pass.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\n\n\t\trenderer.getClearColor( this._oldClearColor );\n\t\tthis._oldClearAlpha = renderer.getClearAlpha();\n\t\tconst oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\trenderer.setClearColor( this.clearColor, 0 );\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\n\n\t\t// Render input to screen\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\tthis._fsQuad.material = this._basic;\n\t\t\tthis._basic.map = readBuffer.texture;\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\trenderer.clear();\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t}\n\n\t\t// 1. Extract Bright Areas\n\n\t\tthis.highPassUniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\tthis.highPassUniforms[ 'luminosityThreshold' ].value = this.threshold;\n\t\tthis._fsQuad.material = this.materialHighPassFilter;\n\n\t\trenderer.setRenderTarget( this.renderTargetBright );\n\t\trenderer.clear();\n\t\tthis._fsQuad.render( renderer );\n\n\t\t// 2. Blur All the mips progressively\n\n\t\tlet inputRenderTarget = this.renderTargetBright;\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis._fsQuad.material = this.separableBlurMaterials[ i ];\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'colorTexture' ].value = inputRenderTarget.texture;\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'direction' ].value = UnrealBloomPass.BlurDirectionX;\n\t\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ i ] );\n\t\t\trenderer.clear();\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'colorTexture' ].value = this.renderTargetsHorizontal[ i ].texture;\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'direction' ].value = UnrealBloomPass.BlurDirectionY;\n\t\t\trenderer.setRenderTarget( this.renderTargetsVertical[ i ] );\n\t\t\trenderer.clear();\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t\tinputRenderTarget = this.renderTargetsVertical[ i ];\n\n\t\t}\n\n\t\t// Composite All the mips\n\n\t\tthis._fsQuad.material = this.compositeMaterial;\n\t\tthis.compositeMaterial.uniforms[ 'bloomStrength' ].value = this.strength;\n\t\tthis.compositeMaterial.uniforms[ 'bloomRadius' ].value = this.radius;\n\t\tthis.compositeMaterial.uniforms[ 'bloomTintColors' ].value = this.bloomTintColors;\n\n\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ 0 ] );\n\t\trenderer.clear();\n\t\tthis._fsQuad.render( renderer );\n\n\t\t// Blend it additively over the input texture\n\n\t\tthis._fsQuad.material = this.blendMaterial;\n\t\tthis.copyUniforms[ 'tDiffuse' ].value = this.renderTargetsHorizontal[ 0 ].texture;\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( readBuffer );\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t}\n\n\t\t// Restore renderer settings\n\n\t\trenderer.setClearColor( this._oldClearColor, this._oldClearAlpha );\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n\t// internals\n\n\t_getSeparableBlurMaterial( kernelRadius ) {\n\n\t\tconst coefficients = [];\n\n\t\tfor ( let i = 0; i < kernelRadius; i ++ ) {\n\n\t\t\tcoefficients.push( 0.39894 * Math.exp( - 0.5 * i * i / ( kernelRadius * kernelRadius ) ) / kernelRadius );\n\n\t\t}\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t'KERNEL_RADIUS': kernelRadius\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t'colorTexture': { value: null },\n\t\t\t\t'invSize': { value: new Vector2( 0.5, 0.5 ) }, // inverse texture size\n\t\t\t\t'direction': { value: new Vector2( 0.5, 0.5 ) },\n\t\t\t\t'gaussianCoefficients': { value: coefficients } // precomputed Gaussian coefficients\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t`varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n\n\t\t\tfragmentShader:\n\t\t\t\t`#include <common>\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 invSize;\n\t\t\t\tuniform vec2 direction;\n\t\t\t\tuniform float gaussianCoefficients[KERNEL_RADIUS];\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tfloat weightSum = gaussianCoefficients[0];\n\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv ).rgb * weightSum;\n\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\n\t\t\t\t\t\tfloat x = float(i);\n\t\t\t\t\t\tfloat w = gaussianCoefficients[i];\n\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\n\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset ).rgb;\n\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset ).rgb;\n\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\n\t\t\t\t\t\tweightSum += 2.0 * w;\n\t\t\t\t\t}\n\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n\t\t\t\t}`\n\t\t} );\n\n\t}\n\n\t_getCompositeMaterial( nMips ) {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t'NUM_MIPS': nMips\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t'blurTexture1': { value: null },\n\t\t\t\t'blurTexture2': { value: null },\n\t\t\t\t'blurTexture3': { value: null },\n\t\t\t\t'blurTexture4': { value: null },\n\t\t\t\t'blurTexture5': { value: null },\n\t\t\t\t'bloomStrength': { value: 1.0 },\n\t\t\t\t'bloomFactors': { value: null },\n\t\t\t\t'bloomTintColors': { value: null },\n\t\t\t\t'bloomRadius': { value: 0.0 }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t`varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n\n\t\t\tfragmentShader:\n\t\t\t\t`varying vec2 vUv;\n\t\t\t\tuniform sampler2D blurTexture1;\n\t\t\t\tuniform sampler2D blurTexture2;\n\t\t\t\tuniform sampler2D blurTexture3;\n\t\t\t\tuniform sampler2D blurTexture4;\n\t\t\t\tuniform sampler2D blurTexture5;\n\t\t\t\tuniform float bloomStrength;\n\t\t\t\tuniform float bloomRadius;\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\n\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\n\n\t\t\t\tfloat lerpBloomFactor(const in float factor) {\n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\n\t\t\t\t}`\n\t\t} );\n\n\t}\n\n}\n\nUnrealBloomPass.BlurDirectionX = new Vector2( 1.0, 0.0 );\nUnrealBloomPass.BlurDirectionY = new Vector2( 0.0, 1.0 );\n\nexport { UnrealBloomPass };\n","import {\n\tColor\n} from 'three';\nimport { Pass } from './Pass.js';\n\n/**\n * This class represents a render pass. It takes a camera and a scene and produces\n * a beauty pass for subsequent post processing effects.\n *\n * ```js\n * const renderPass = new RenderPass( scene, camera );\n * composer.addPass( renderPass );\n * ```\n *\n * @augments Pass\n * @three_import import { RenderPass } from 'three/addons/postprocessing/RenderPass.js';\n */\nclass RenderPass extends Pass {\n\n\t/**\n\t * Constructs a new render pass.\n\t *\n\t * @param {Scene} scene - The scene to render.\n\t * @param {Camera} camera - The camera.\n\t * @param {?Material} [overrideMaterial=null] - The override material. If set, this material is used\n\t * for all objects in the scene.\n\t * @param {?(number|Color|string)} [clearColor=null] - The clear color of the render pass.\n\t * @param {?number} [clearAlpha=null] - The clear alpha of the render pass.\n\t */\n\tconstructor( scene, camera, overrideMaterial = null, clearColor = null, clearAlpha = null ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The scene to render.\n\t\t *\n\t\t * @type {Scene}\n\t\t */\n\t\tthis.scene = scene;\n\n\t\t/**\n\t\t * The camera.\n\t\t *\n\t\t * @type {Camera}\n\t\t */\n\t\tthis.camera = camera;\n\n\t\t/**\n\t\t * The override material. If set, this material is used\n\t\t * for all objects in the scene.\n\t\t *\n\t\t * @type {?Material}\n\t\t * @default null\n\t\t */\n\t\tthis.overrideMaterial = overrideMaterial;\n\n\t\t/**\n\t\t * The clear color of the render pass.\n\t\t *\n\t\t * @type {?(number|Color|string)}\n\t\t * @default null\n\t\t */\n\t\tthis.clearColor = clearColor;\n\n\t\t/**\n\t\t * The clear alpha of the render pass.\n\t\t *\n\t\t * @type {?number}\n\t\t * @default null\n\t\t */\n\t\tthis.clearAlpha = clearAlpha;\n\n\t\t/**\n\t\t * Overwritten to perform a clear operation by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.clear = true;\n\n\t\t/**\n\t\t * If set to `true`, only the depth can be cleared when `clear` is to `false`.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.clearDepth = false;\n\n\t\t/**\n\t\t * Overwritten to disable the swap.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.needsSwap = false;\n\t\tthis._oldClearColor = new Color();\n\n\t}\n\n\t/**\n\t * Performs a beauty pass with the configured scene and camera.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tlet oldClearAlpha, oldOverrideMaterial;\n\n\t\tif ( this.overrideMaterial !== null ) {\n\n\t\t\toldOverrideMaterial = this.scene.overrideMaterial;\n\n\t\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\t}\n\n\t\tif ( this.clearColor !== null ) {\n\n\t\t\trenderer.getClearColor( this._oldClearColor );\n\t\t\trenderer.setClearColor( this.clearColor, renderer.getClearAlpha() );\n\n\t\t}\n\n\t\tif ( this.clearAlpha !== null ) {\n\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\t\t\trenderer.setClearAlpha( this.clearAlpha );\n\n\t\t}\n\n\t\tif ( this.clearDepth == true ) {\n\n\t\t\trenderer.clearDepth();\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\n\t\tif ( this.clear === true ) {\n\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t}\n\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// restore\n\n\t\tif ( this.clearColor !== null ) {\n\n\t\t\trenderer.setClearColor( this._oldClearColor );\n\n\t\t}\n\n\t\tif ( this.clearAlpha !== null ) {\n\n\t\t\trenderer.setClearAlpha( oldClearAlpha );\n\n\t\t}\n\n\t\tif ( this.overrideMaterial !== null ) {\n\n\t\t\tthis.scene.overrideMaterial = oldOverrideMaterial;\n\n\t\t}\n\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n}\n\nexport { RenderPass };\n","import {\n\tAdditiveBlending,\n\tColor,\n\tDoubleSide,\n\tHalfFloatType,\n\tMatrix4,\n\tMeshDepthMaterial,\n\tNoBlending,\n\tRGBADepthPacking,\n\tShaderMaterial,\n\tUniformsUtils,\n\tVector2,\n\tVector3,\n\tWebGLRenderTarget\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\n/**\n * A pass for rendering outlines around selected objects.\n *\n * ```js\n * const resolution = new THREE.Vector2( window.innerWidth, window.innerHeight );\n * const outlinePass = new OutlinePass( resolution, scene, camera );\n * composer.addPass( outlinePass );\n * ```\n *\n * @augments Pass\n * @three_import import { OutlinePass } from 'three/addons/postprocessing/OutlinePass.js';\n */\nclass OutlinePass extends Pass {\n\n\t/**\n\t * Constructs a new outline pass.\n\t *\n\t * @param {Vector2} [resolution] - The effect's resolution.\n\t * @param {Scene} scene - The scene to render.\n\t * @param {Camera} camera - The camera.\n\t * @param {Array<Object3D>} [selectedObjects] - The selected 3D objects that should receive an outline.\n\t *\n\t */\n\tconstructor( resolution, scene, camera, selectedObjects ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The scene to render.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.renderScene = scene;\n\n\t\t/**\n\t\t * The camera.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.renderCamera = camera;\n\n\t\t/**\n\t\t * The selected 3D objects that should receive an outline.\n\t\t *\n\t\t * @type {Array<Object3D>}\n\t\t */\n\t\tthis.selectedObjects = selectedObjects !== undefined ? selectedObjects : [];\n\n\t\t/**\n\t\t * The visible edge color.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */\n\t\tthis.visibleEdgeColor = new Color( 1, 1, 1 );\n\n\t\t/**\n\t\t * The hidden edge color.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (0.1,0.04,0.02)\n\t\t */\n\t\tthis.hiddenEdgeColor = new Color( 0.1, 0.04, 0.02 );\n\n\t\t/**\n\t\t * Can be used for an animated glow/pulse effect.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.edgeGlow = 0.0;\n\n\t\t/**\n\t\t * Whether to use a pattern texture for to highlight selected\n\t\t * 3D objects or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.usePatternTexture = false;\n\n\t\t/**\n\t\t * Can be used to highlight selected 3D objects. Requires to set\n\t\t * {@link OutlinePass#usePatternTexture} to `true`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.patternTexture = null;\n\n\t\t/**\n\t\t * The edge thickness.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.edgeThickness = 1.0;\n\n\t\t/**\n\t\t * The edge strength.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 3\n\t\t */\n\t\tthis.edgeStrength = 3.0;\n\n\t\t/**\n\t\t * The downsample ratio. The effect can be rendered in a much\n\t\t * lower resolution than the beauty pass.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 2\n\t\t */\n\t\tthis.downSampleRatio = 2;\n\n\t\t/**\n\t\t * The pulse period.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.pulsePeriod = 0;\n\n\t\tthis._visibilityCache = new Map();\n\t\tthis._selectionCache = new Set();\n\n\t\t/**\n\t\t * The effect's resolution.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (256,256)\n\t\t */\n\t\tthis.resolution = ( resolution !== undefined ) ? new Vector2( resolution.x, resolution.y ) : new Vector2( 256, 256 );\n\n\t\tconst resx = Math.round( this.resolution.x / this.downSampleRatio );\n\t\tconst resy = Math.round( this.resolution.y / this.downSampleRatio );\n\n\t\tthis.renderTargetMaskBuffer = new WebGLRenderTarget( this.resolution.x, this.resolution.y );\n\t\tthis.renderTargetMaskBuffer.texture.name = 'OutlinePass.mask';\n\t\tthis.renderTargetMaskBuffer.texture.generateMipmaps = false;\n\n\t\tthis.depthMaterial = new MeshDepthMaterial();\n\t\tthis.depthMaterial.side = DoubleSide;\n\t\tthis.depthMaterial.depthPacking = RGBADepthPacking;\n\t\tthis.depthMaterial.blending = NoBlending;\n\n\t\tthis.prepareMaskMaterial = this._getPrepareMaskMaterial();\n\t\tthis.prepareMaskMaterial.side = DoubleSide;\n\t\tthis.prepareMaskMaterial.fragmentShader = replaceDepthToViewZ( this.prepareMaskMaterial.fragmentShader, this.renderCamera );\n\n\t\tthis.renderTargetDepthBuffer = new WebGLRenderTarget( this.resolution.x, this.resolution.y, { type: HalfFloatType } );\n\t\tthis.renderTargetDepthBuffer.texture.name = 'OutlinePass.depth';\n\t\tthis.renderTargetDepthBuffer.texture.generateMipmaps = false;\n\n\t\tthis.renderTargetMaskDownSampleBuffer = new WebGLRenderTarget( resx, resy, { type: HalfFloatType } );\n\t\tthis.renderTargetMaskDownSampleBuffer.texture.name = 'OutlinePass.depthDownSample';\n\t\tthis.renderTargetMaskDownSampleBuffer.texture.generateMipmaps = false;\n\n\t\tthis.renderTargetBlurBuffer1 = new WebGLRenderTarget( resx, resy, { type: HalfFloatType } );\n\t\tthis.renderTargetBlurBuffer1.texture.name = 'OutlinePass.blur1';\n\t\tthis.renderTargetBlurBuffer1.texture.generateMipmaps = false;\n\t\tthis.renderTargetBlurBuffer2 = new WebGLRenderTarget( Math.round( resx / 2 ), Math.round( resy / 2 ), { type: HalfFloatType } );\n\t\tthis.renderTargetBlurBuffer2.texture.name = 'OutlinePass.blur2';\n\t\tthis.renderTargetBlurBuffer2.texture.generateMipmaps = false;\n\n\t\tthis.edgeDetectionMaterial = this._getEdgeDetectionMaterial();\n\t\tthis.renderTargetEdgeBuffer1 = new WebGLRenderTarget( resx, resy, { type: HalfFloatType } );\n\t\tthis.renderTargetEdgeBuffer1.texture.name = 'OutlinePass.edge1';\n\t\tthis.renderTargetEdgeBuffer1.texture.generateMipmaps = false;\n\t\tthis.renderTargetEdgeBuffer2 = new WebGLRenderTarget( Math.round( resx / 2 ), Math.round( resy / 2 ), { type: HalfFloatType } );\n\t\tthis.renderTargetEdgeBuffer2.texture.name = 'OutlinePass.edge2';\n\t\tthis.renderTargetEdgeBuffer2.texture.generateMipmaps = false;\n\n\t\tconst MAX_EDGE_THICKNESS = 4;\n\t\tconst MAX_EDGE_GLOW = 4;\n\n\t\tthis.separableBlurMaterial1 = this._getSeparableBlurMaterial( MAX_EDGE_THICKNESS );\n\t\tthis.separableBlurMaterial1.uniforms[ 'texSize' ].value.set( resx, resy );\n\t\tthis.separableBlurMaterial1.uniforms[ 'kernelRadius' ].value = 1;\n\t\tthis.separableBlurMaterial2 = this._getSeparableBlurMaterial( MAX_EDGE_GLOW );\n\t\tthis.separableBlurMaterial2.uniforms[ 'texSize' ].value.set( Math.round( resx / 2 ), Math.round( resy / 2 ) );\n\t\tthis.separableBlurMaterial2.uniforms[ 'kernelRadius' ].value = MAX_EDGE_GLOW;\n\n\t\t// Overlay material\n\t\tthis.overlayMaterial = this._getOverlayMaterial();\n\n\t\t// copy material\n\n\t\tconst copyShader = CopyShader;\n\n\t\tthis.copyUniforms = UniformsUtils.clone( copyShader.uniforms );\n\n\t\tthis.materialCopy = new ShaderMaterial( {\n\t\t\tuniforms: this.copyUniforms,\n\t\t\tvertexShader: copyShader.vertexShader,\n\t\t\tfragmentShader: copyShader.fragmentShader,\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t} );\n\n\t\tthis.enabled = true;\n\t\tthis.needsSwap = false;\n\n\t\tthis._oldClearColor = new Color();\n\t\tthis.oldClearAlpha = 1;\n\n\t\tthis._fsQuad = new FullScreenQuad( null );\n\n\t\tthis.tempPulseColor1 = new Color();\n\t\tthis.tempPulseColor2 = new Color();\n\t\tthis.textureMatrix = new Matrix4();\n\n\t\tfunction replaceDepthToViewZ( string, camera ) {\n\n\t\t\tconst type = camera.isPerspectiveCamera ? 'perspective' : 'orthographic';\n\n\t\t\treturn string.replace( /DEPTH_TO_VIEW_Z/g, type + 'DepthToViewZ' );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the pass is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.renderTargetMaskBuffer.dispose();\n\t\tthis.renderTargetDepthBuffer.dispose();\n\t\tthis.renderTargetMaskDownSampleBuffer.dispose();\n\t\tthis.renderTargetBlurBuffer1.dispose();\n\t\tthis.renderTargetBlurBuffer2.dispose();\n\t\tthis.renderTargetEdgeBuffer1.dispose();\n\t\tthis.renderTargetEdgeBuffer2.dispose();\n\n\t\tthis.depthMaterial.dispose();\n\t\tthis.prepareMaskMaterial.dispose();\n\t\tthis.edgeDetectionMaterial.dispose();\n\t\tthis.separableBlurMaterial1.dispose();\n\t\tthis.separableBlurMaterial2.dispose();\n\t\tthis.overlayMaterial.dispose();\n\t\tthis.materialCopy.dispose();\n\n\t\tthis._fsQuad.dispose();\n\n\t}\n\n\t/**\n\t * Sets the size of the pass.\n\t *\n\t * @param {number} width - The width to set.\n\t * @param {number} height - The width to set.\n\t */\n\tsetSize( width, height ) {\n\n\t\tthis.renderTargetMaskBuffer.setSize( width, height );\n\t\tthis.renderTargetDepthBuffer.setSize( width, height );\n\n\t\tlet resx = Math.round( width / this.downSampleRatio );\n\t\tlet resy = Math.round( height / this.downSampleRatio );\n\t\tthis.renderTargetMaskDownSampleBuffer.setSize( resx, resy );\n\t\tthis.renderTargetBlurBuffer1.setSize( resx, resy );\n\t\tthis.renderTargetEdgeBuffer1.setSize( resx, resy );\n\t\tthis.separableBlurMaterial1.uniforms[ 'texSize' ].value.set( resx, resy );\n\n\t\tresx = Math.round( resx / 2 );\n\t\tresy = Math.round( resy / 2 );\n\n\t\tthis.renderTargetBlurBuffer2.setSize( resx, resy );\n\t\tthis.renderTargetEdgeBuffer2.setSize( resx, resy );\n\n\t\tthis.separableBlurMaterial2.uniforms[ 'texSize' ].value.set( resx, resy );\n\n\t}\n\n\t/**\n\t * Performs the Outline pass.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\n\n\t\tif ( this.selectedObjects.length > 0 ) {\n\n\t\t\trenderer.getClearColor( this._oldClearColor );\n\t\t\tthis.oldClearAlpha = renderer.getClearAlpha();\n\t\t\tconst oldAutoClear = renderer.autoClear;\n\n\t\t\trenderer.autoClear = false;\n\n\t\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\n\n\t\t\trenderer.setClearColor( 0xffffff, 1 );\n\n\t\t\tthis._updateSelectionCache();\n\n\t\t\t// Make selected objects invisible\n\t\t\tthis._changeVisibilityOfSelectedObjects( false );\n\n\t\t\tconst currentBackground = this.renderScene.background;\n\t\t\tconst currentOverrideMaterial = this.renderScene.overrideMaterial;\n\t\t\tthis.renderScene.background = null;\n\n\t\t\t// 1. Draw Non Selected objects in the depth buffer\n\t\t\tthis.renderScene.overrideMaterial = this.depthMaterial;\n\t\t\trenderer.setRenderTarget( this.renderTargetDepthBuffer );\n\t\t\trenderer.clear();\n\t\t\trenderer.render( this.renderScene, this.renderCamera );\n\n\t\t\t// Make selected objects visible\n\t\t\tthis._changeVisibilityOfSelectedObjects( true );\n\t\t\tthis._visibilityCache.clear();\n\n\t\t\t// Update Texture Matrix for Depth compare\n\t\t\tthis._updateTextureMatrix();\n\n\t\t\t// Make non selected objects invisible, and draw only the selected objects, by comparing the depth buffer of non selected objects\n\t\t\tthis._changeVisibilityOfNonSelectedObjects( false );\n\t\t\tthis.renderScene.overrideMaterial = this.prepareMaskMaterial;\n\t\t\tthis.prepareMaskMaterial.uniforms[ 'cameraNearFar' ].value.set( this.renderCamera.near, this.renderCamera.far );\n\t\t\tthis.prepareMaskMaterial.uniforms[ 'depthTexture' ].value = this.renderTargetDepthBuffer.texture;\n\t\t\tthis.prepareMaskMaterial.uniforms[ 'textureMatrix' ].value = this.textureMatrix;\n\t\t\trenderer.setRenderTarget( this.renderTargetMaskBuffer );\n\t\t\trenderer.clear();\n\t\t\trenderer.render( this.renderScene, this.renderCamera );\n\t\t\tthis._changeVisibilityOfNonSelectedObjects( true );\n\t\t\tthis._visibilityCache.clear();\n\t\t\tthis._selectionCache.clear();\n\n\t\t\tthis.renderScene.background = currentBackground;\n\t\t\tthis.renderScene.overrideMaterial = currentOverrideMaterial;\n\n\t\t\t// 2. Downsample to Half resolution\n\t\t\tthis._fsQuad.material = this.materialCopy;\n\t\t\tthis.copyUniforms[ 'tDiffuse' ].value = this.renderTargetMaskBuffer.texture;\n\t\t\trenderer.setRenderTarget( this.renderTargetMaskDownSampleBuffer );\n\t\t\trenderer.clear();\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t\tthis.tempPulseColor1.copy( this.visibleEdgeColor );\n\t\t\tthis.tempPulseColor2.copy( this.hiddenEdgeColor );\n\n\t\t\tif ( this.pulsePeriod > 0 ) {\n\n\t\t\t\tconst scalar = ( 1 + 0.25 ) / 2 + Math.cos( performance.now() * 0.01 / this.pulsePeriod ) * ( 1.0 - 0.25 ) / 2;\n\t\t\t\tthis.tempPulseColor1.multiplyScalar( scalar );\n\t\t\t\tthis.tempPulseColor2.multiplyScalar( scalar );\n\n\t\t\t}\n\n\t\t\t// 3. Apply Edge Detection Pass\n\t\t\tthis._fsQuad.material = this.edgeDetectionMaterial;\n\t\t\tthis.edgeDetectionMaterial.uniforms[ 'maskTexture' ].value = this.renderTargetMaskDownSampleBuffer.texture;\n\t\t\tthis.edgeDetectionMaterial.uniforms[ 'texSize' ].value.set( this.renderTargetMaskDownSampleBuffer.width, this.renderTargetMaskDownSampleBuffer.height );\n\t\t\tthis.edgeDetectionMaterial.uniforms[ 'visibleEdgeColor' ].value = this.tempPulseColor1;\n\t\t\tthis.edgeDetectionMaterial.uniforms[ 'hiddenEdgeColor' ].value = this.tempPulseColor2;\n\t\t\trenderer.setRenderTarget( this.renderTargetEdgeBuffer1 );\n\t\t\trenderer.clear();\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t\t// 4. Apply Blur on Half res\n\t\t\tthis._fsQuad.material = this.separableBlurMaterial1;\n\t\t\tthis.separableBlurMaterial1.uniforms[ 'colorTexture' ].value = this.renderTargetEdgeBuffer1.texture;\n\t\t\tthis.separableBlurMaterial1.uniforms[ 'direction' ].value = OutlinePass.BlurDirectionX;\n\t\t\tthis.separableBlurMaterial1.uniforms[ 'kernelRadius' ].value = this.edgeThickness;\n\t\t\trenderer.setRenderTarget( this.renderTargetBlurBuffer1 );\n\t\t\trenderer.clear();\n\t\t\tthis._fsQuad.render( renderer );\n\t\t\tthis.separableBlurMaterial1.uniforms[ 'colorTexture' ].value = this.renderTargetBlurBuffer1.texture;\n\t\t\tthis.separableBlurMaterial1.uniforms[ 'direction' ].value = OutlinePass.BlurDirectionY;\n\t\t\trenderer.setRenderTarget( this.renderTargetEdgeBuffer1 );\n\t\t\trenderer.clear();\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t\t// Apply Blur on quarter res\n\t\t\tthis._fsQuad.material = this.separableBlurMaterial2;\n\t\t\tthis.separableBlurMaterial2.uniforms[ 'colorTexture' ].value = this.renderTargetEdgeBuffer1.texture;\n\t\t\tthis.separableBlurMaterial2.uniforms[ 'direction' ].value = OutlinePass.BlurDirectionX;\n\t\t\trenderer.setRenderTarget( this.renderTargetBlurBuffer2 );\n\t\t\trenderer.clear();\n\t\t\tthis._fsQuad.render( renderer );\n\t\t\tthis.separableBlurMaterial2.uniforms[ 'colorTexture' ].value = this.renderTargetBlurBuffer2.texture;\n\t\t\tthis.separableBlurMaterial2.uniforms[ 'direction' ].value = OutlinePass.BlurDirectionY;\n\t\t\trenderer.setRenderTarget( this.renderTargetEdgeBuffer2 );\n\t\t\trenderer.clear();\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t\t// Blend it additively over the input texture\n\t\t\tthis._fsQuad.material = this.overlayMaterial;\n\t\t\tthis.overlayMaterial.uniforms[ 'maskTexture' ].value = this.renderTargetMaskBuffer.texture;\n\t\t\tthis.overlayMaterial.uniforms[ 'edgeTexture1' ].value = this.renderTargetEdgeBuffer1.texture;\n\t\t\tthis.overlayMaterial.uniforms[ 'edgeTexture2' ].value = this.renderTargetEdgeBuffer2.texture;\n\t\t\tthis.overlayMaterial.uniforms[ 'patternTexture' ].value = this.patternTexture;\n\t\t\tthis.overlayMaterial.uniforms[ 'edgeStrength' ].value = this.edgeStrength;\n\t\t\tthis.overlayMaterial.uniforms[ 'edgeGlow' ].value = this.edgeGlow;\n\t\t\tthis.overlayMaterial.uniforms[ 'usePatternTexture' ].value = this.usePatternTexture;\n\n\n\t\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\n\n\t\t\trenderer.setRenderTarget( readBuffer );\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t\trenderer.setClearColor( this._oldClearColor, this.oldClearAlpha );\n\t\t\trenderer.autoClear = oldAutoClear;\n\n\t\t}\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\tthis._fsQuad.material = this.materialCopy;\n\t\t\tthis.copyUniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n\t// internals\n\n\t_updateSelectionCache() {\n\n\t\tconst cache = this._selectionCache;\n\n\t\tfunction gatherSelectedMeshesCallBack( object ) {\n\n\t\t\tif ( object.isMesh ) cache.add( object );\n\n\t\t}\n\n\t\tcache.clear();\n\n\t\tfor ( let i = 0; i < this.selectedObjects.length; i ++ ) {\n\n\t\t\tconst selectedObject = this.selectedObjects[ i ];\n\t\t\tselectedObject.traverse( gatherSelectedMeshesCallBack );\n\n\t\t}\n\n\t}\n\n\t_changeVisibilityOfSelectedObjects( bVisible ) {\n\n\t\tconst cache = this._visibilityCache;\n\n\t\tfor ( const mesh of this._selectionCache ) {\n\n\t\t\tif ( bVisible === true ) {\n\n\t\t\t\tmesh.visible = cache.get( mesh );\n\n\t\t\t} else {\n\n\t\t\t\tcache.set( mesh, mesh.visible );\n\t\t\t\tmesh.visible = bVisible;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_changeVisibilityOfNonSelectedObjects( bVisible ) {\n\n\t\tconst visibilityCache = this._visibilityCache;\n\t\tconst selectionCache = this._selectionCache;\n\n\t\tfunction VisibilityChangeCallBack( object ) {\n\n\t\t\tif ( object.isMesh || object.isSprite ) {\n\n\t\t\t\t// only meshes and sprites are supported by OutlinePass\n\n\t\t\t\tif ( ! selectionCache.has( object ) ) {\n\n\t\t\t\t\tconst visibility = object.visible;\n\n\t\t\t\t\tif ( bVisible === false || visibilityCache.get( object ) === true ) {\n\n\t\t\t\t\t\tobject.visible = bVisible;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvisibilityCache.set( object, visibility );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isPoints || object.isLine ) {\n\n\t\t\t\t// the visibility of points and lines is always set to false in order to\n\t\t\t\t// not affect the outline computation\n\n\t\t\t\tif ( bVisible === true ) {\n\n\t\t\t\t\tobject.visible = visibilityCache.get( object ); // restore\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvisibilityCache.set( object, object.visible );\n\t\t\t\t\tobject.visible = bVisible;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderScene.traverse( VisibilityChangeCallBack );\n\n\t}\n\n\t_updateTextureMatrix() {\n\n\t\tthis.textureMatrix.set( 0.5, 0.0, 0.0, 0.5,\n\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t0.0, 0.0, 0.0, 1.0 );\n\t\tthis.textureMatrix.multiply( this.renderCamera.projectionMatrix );\n\t\tthis.textureMatrix.multiply( this.renderCamera.matrixWorldInverse );\n\n\t}\n\n\t_getPrepareMaskMaterial() {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tuniforms: {\n\t\t\t\t'depthTexture': { value: null },\n\t\t\t\t'cameraNearFar': { value: new Vector2( 0.5, 0.5 ) },\n\t\t\t\t'textureMatrix': { value: null }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t`#include <batching_pars_vertex>\n\t\t\t\t#include <morphtarget_pars_vertex>\n\t\t\t\t#include <skinning_pars_vertex>\n\n\t\t\t\tvarying vec4 projTexCoord;\n\t\t\t\tvarying vec4 vPosition;\n\t\t\t\tuniform mat4 textureMatrix;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\t#include <batching_vertex>\n\t\t\t\t\t#include <skinbase_vertex>\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <morphtarget_vertex>\n\t\t\t\t\t#include <skinning_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t\tvPosition = mvPosition;\n\n\t\t\t\t\tvec4 worldPosition = vec4( transformed, 1.0 );\n\n\t\t\t\t\t#ifdef USE_INSTANCING\n\n\t\t\t\t\t\tworldPosition = instanceMatrix * worldPosition;\n\n\t\t\t\t\t#endif\n\n\t\t\t\t\tworldPosition = modelMatrix * worldPosition;\n\n\t\t\t\t\tprojTexCoord = textureMatrix * worldPosition;\n\n\t\t\t\t}`,\n\n\t\t\tfragmentShader:\n\t\t\t\t`#include <packing>\n\t\t\t\tvarying vec4 vPosition;\n\t\t\t\tvarying vec4 projTexCoord;\n\t\t\t\tuniform sampler2D depthTexture;\n\t\t\t\tuniform vec2 cameraNearFar;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tfloat depth = unpackRGBAToDepth(texture2DProj( depthTexture, projTexCoord ));\n\t\t\t\t\tfloat viewZ = - DEPTH_TO_VIEW_Z( depth, cameraNearFar.x, cameraNearFar.y );\n\t\t\t\t\tfloat depthTest = (-vPosition.z > viewZ) ? 1.0 : 0.0;\n\t\t\t\t\tgl_FragColor = vec4(0.0, depthTest, 1.0, 1.0);\n\n\t\t\t\t}`\n\n\t\t} );\n\n\t}\n\n\t_getEdgeDetectionMaterial() {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tuniforms: {\n\t\t\t\t'maskTexture': { value: null },\n\t\t\t\t'texSize': { value: new Vector2( 0.5, 0.5 ) },\n\t\t\t\t'visibleEdgeColor': { value: new Vector3( 1.0, 1.0, 1.0 ) },\n\t\t\t\t'hiddenEdgeColor': { value: new Vector3( 1.0, 1.0, 1.0 ) },\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t`varying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n\n\t\t\tfragmentShader:\n\t\t\t\t`varying vec2 vUv;\n\n\t\t\t\tuniform sampler2D maskTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec3 visibleEdgeColor;\n\t\t\t\tuniform vec3 hiddenEdgeColor;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tvec4 uvOffset = vec4(1.0, 0.0, 0.0, 1.0) * vec4(invSize, invSize);\n\t\t\t\t\tvec4 c1 = texture2D( maskTexture, vUv + uvOffset.xy);\n\t\t\t\t\tvec4 c2 = texture2D( maskTexture, vUv - uvOffset.xy);\n\t\t\t\t\tvec4 c3 = texture2D( maskTexture, vUv + uvOffset.yw);\n\t\t\t\t\tvec4 c4 = texture2D( maskTexture, vUv - uvOffset.yw);\n\t\t\t\t\tfloat diff1 = (c1.r - c2.r)*0.5;\n\t\t\t\t\tfloat diff2 = (c3.r - c4.r)*0.5;\n\t\t\t\t\tfloat d = length( vec2(diff1, diff2) );\n\t\t\t\t\tfloat a1 = min(c1.g, c2.g);\n\t\t\t\t\tfloat a2 = min(c3.g, c4.g);\n\t\t\t\t\tfloat visibilityFactor = min(a1, a2);\n\t\t\t\t\tvec3 edgeColor = 1.0 - visibilityFactor > 0.001 ? visibleEdgeColor : hiddenEdgeColor;\n\t\t\t\t\tgl_FragColor = vec4(edgeColor, 1.0) * vec4(d);\n\t\t\t\t}`\n\t\t} );\n\n\t}\n\n\t_getSeparableBlurMaterial( maxRadius ) {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t'MAX_RADIUS': maxRadius,\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t'colorTexture': { value: null },\n\t\t\t\t'texSize': { value: new Vector2( 0.5, 0.5 ) },\n\t\t\t\t'direction': { value: new Vector2( 0.5, 0.5 ) },\n\t\t\t\t'kernelRadius': { value: 1.0 }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t`varying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n\n\t\t\tfragmentShader:\n\t\t\t\t`#include <common>\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec2 direction;\n\t\t\t\tuniform float kernelRadius;\n\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tfloat sigma = kernelRadius/2.0;\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, sigma);\n\t\t\t\t\tvec4 diffuseSum = texture2D( colorTexture, vUv) * weightSum;\n\t\t\t\t\tvec2 delta = direction * invSize * kernelRadius/float(MAX_RADIUS);\n\t\t\t\t\tvec2 uvOffset = delta;\n\t\t\t\t\tfor( int i = 1; i <= MAX_RADIUS; i ++ ) {\n\t\t\t\t\t\tfloat x = kernelRadius * float(i) / float(MAX_RADIUS);\n\t\t\t\t\t\tfloat w = gaussianPdf(x, sigma);\n\t\t\t\t\t\tvec4 sample1 = texture2D( colorTexture, vUv + uvOffset);\n\t\t\t\t\t\tvec4 sample2 = texture2D( colorTexture, vUv - uvOffset);\n\t\t\t\t\t\tdiffuseSum += ((sample1 + sample2) * w);\n\t\t\t\t\t\tweightSum += (2.0 * w);\n\t\t\t\t\t\tuvOffset += delta;\n\t\t\t\t\t}\n\t\t\t\t\tgl_FragColor = diffuseSum/weightSum;\n\t\t\t\t}`\n\t\t} );\n\n\t}\n\n\t_getOverlayMaterial() {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tuniforms: {\n\t\t\t\t'maskTexture': { value: null },\n\t\t\t\t'edgeTexture1': { value: null },\n\t\t\t\t'edgeTexture2': { value: null },\n\t\t\t\t'patternTexture': { value: null },\n\t\t\t\t'edgeStrength': { value: 1.0 },\n\t\t\t\t'edgeGlow': { value: 1.0 },\n\t\t\t\t'usePatternTexture': { value: 0.0 }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t`varying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n\n\t\t\tfragmentShader:\n\t\t\t\t`varying vec2 vUv;\n\n\t\t\t\tuniform sampler2D maskTexture;\n\t\t\t\tuniform sampler2D edgeTexture1;\n\t\t\t\tuniform sampler2D edgeTexture2;\n\t\t\t\tuniform sampler2D patternTexture;\n\t\t\t\tuniform float edgeStrength;\n\t\t\t\tuniform float edgeGlow;\n\t\t\t\tuniform bool usePatternTexture;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec4 edgeValue1 = texture2D(edgeTexture1, vUv);\n\t\t\t\t\tvec4 edgeValue2 = texture2D(edgeTexture2, vUv);\n\t\t\t\t\tvec4 maskColor = texture2D(maskTexture, vUv);\n\t\t\t\t\tvec4 patternColor = texture2D(patternTexture, 6.0 * vUv);\n\t\t\t\t\tfloat visibilityFactor = 1.0 - maskColor.g > 0.0 ? 1.0 : 0.5;\n\t\t\t\t\tvec4 edgeValue = edgeValue1 + edgeValue2 * edgeGlow;\n\t\t\t\t\tvec4 finalColor = edgeStrength * maskColor.r * edgeValue;\n\t\t\t\t\tif(usePatternTexture)\n\t\t\t\t\t\tfinalColor += + visibilityFactor * (1.0 - maskColor.r) * (1.0 - patternColor.r);\n\t\t\t\t\tgl_FragColor = finalColor;\n\t\t\t\t}`,\n\t\t\tblending: AdditiveBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t}\n\n}\n\nOutlinePass.BlurDirectionX = new Vector2( 1.0, 0.0 );\nOutlinePass.BlurDirectionY = new Vector2( 0.0, 1.0 );\n\nexport { OutlinePass };\n","import {\n\tVector2\n} from 'three';\n\n/**\n * @module FXAAShader\n * @three_import import { FXAAShader } from 'three/addons/shaders/FXAAShader.js';\n */\n\n/**\n * FXAA algorithm from NVIDIA, C# implementation by Jasper Flick, GLSL port by Dave Hoskins.\n *\n * References:\n * - {@link http://developer.download.nvidia.com/assets/gamedev/files/sdk/11/FXAA_WhitePaper.pdf}.\n * - {@link https://catlikecoding.com/unity/tutorials/advanced-rendering/fxaa/}.\n *\n * @constant\n * @type {ShaderMaterial~Shader}\n */\nconst FXAAShader = {\n\n\tname: 'FXAAShader',\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'resolution': { value: new Vector2( 1 / 1024, 1 / 512 ) }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform vec2 resolution;\n\t\tvarying vec2 vUv;\n\n\t\t#define EDGE_STEP_COUNT 6\n\t\t#define EDGE_GUESS 8.0\n\t\t#define EDGE_STEPS 1.0, 1.5, 2.0, 2.0, 2.0, 4.0\n\t\tconst float edgeSteps[EDGE_STEP_COUNT] = float[EDGE_STEP_COUNT]( EDGE_STEPS );\n\n\t\tfloat _ContrastThreshold = 0.0312;\n\t\tfloat _RelativeThreshold = 0.063;\n\t\tfloat _SubpixelBlending = 1.0;\n\n\t\tvec4 Sample( sampler2D  tex2D, vec2 uv ) {\n\n\t\t\treturn texture( tex2D, uv );\n\n\t\t}\n\n\t\tfloat SampleLuminance( sampler2D tex2D, vec2 uv ) {\n\n\t\t\treturn dot( Sample( tex2D, uv ).rgb, vec3( 0.3, 0.59, 0.11 ) );\n\n\t\t}\n\n\t\tfloat SampleLuminance( sampler2D tex2D, vec2 texSize, vec2 uv, float uOffset, float vOffset ) {\n\n\t\t\tuv += texSize * vec2(uOffset, vOffset);\n\t\t\treturn SampleLuminance(tex2D, uv);\n\n\t\t}\n\n\t\tstruct LuminanceData {\n\n\t\t\tfloat m, n, e, s, w;\n\t\t\tfloat ne, nw, se, sw;\n\t\t\tfloat highest, lowest, contrast;\n\n\t\t};\n\n\t\tLuminanceData SampleLuminanceNeighborhood( sampler2D tex2D, vec2 texSize, vec2 uv ) {\n\n\t\t\tLuminanceData l;\n\t\t\tl.m = SampleLuminance( tex2D, uv );\n\t\t\tl.n = SampleLuminance( tex2D, texSize, uv,  0.0,  1.0 );\n\t\t\tl.e = SampleLuminance( tex2D, texSize, uv,  1.0,  0.0 );\n\t\t\tl.s = SampleLuminance( tex2D, texSize, uv,  0.0, -1.0 );\n\t\t\tl.w = SampleLuminance( tex2D, texSize, uv, -1.0,  0.0 );\n\n\t\t\tl.ne = SampleLuminance( tex2D, texSize, uv,  1.0,  1.0 );\n\t\t\tl.nw = SampleLuminance( tex2D, texSize, uv, -1.0,  1.0 );\n\t\t\tl.se = SampleLuminance( tex2D, texSize, uv,  1.0, -1.0 );\n\t\t\tl.sw = SampleLuminance( tex2D, texSize, uv, -1.0, -1.0 );\n\n\t\t\tl.highest = max( max( max( max( l.n, l.e ), l.s ), l.w ), l.m );\n\t\t\tl.lowest = min( min( min( min( l.n, l.e ), l.s ), l.w ), l.m );\n\t\t\tl.contrast = l.highest - l.lowest;\n\t\t\treturn l;\n\n\t\t}\n\n\t\tbool ShouldSkipPixel( LuminanceData l ) {\n\n\t\t\tfloat threshold = max( _ContrastThreshold, _RelativeThreshold * l.highest );\n\t\t\treturn l.contrast < threshold;\n\n\t\t}\n\n\t\tfloat DeterminePixelBlendFactor( LuminanceData l ) {\n\n\t\t\tfloat f = 2.0 * ( l.n + l.e + l.s + l.w );\n\t\t\tf += l.ne + l.nw + l.se + l.sw;\n\t\t\tf *= 1.0 / 12.0;\n\t\t\tf = abs( f - l.m );\n\t\t\tf = clamp( f / l.contrast, 0.0, 1.0 );\n\n\t\t\tfloat blendFactor = smoothstep( 0.0, 1.0, f );\n\t\t\treturn blendFactor * blendFactor * _SubpixelBlending;\n\n\t\t}\n\n\t\tstruct EdgeData {\n\n\t\t\tbool isHorizontal;\n\t\t\tfloat pixelStep;\n\t\t\tfloat oppositeLuminance, gradient;\n\n\t\t};\n\n\t\tEdgeData DetermineEdge( vec2 texSize, LuminanceData l ) {\n\n\t\t\tEdgeData e;\n\t\t\tfloat horizontal =\n\t\t\t\tabs( l.n + l.s - 2.0 * l.m ) * 2.0 +\n\t\t\t\tabs( l.ne + l.se - 2.0 * l.e ) +\n\t\t\t\tabs( l.nw + l.sw - 2.0 * l.w );\n\t\t\tfloat vertical =\n\t\t\t\tabs( l.e + l.w - 2.0 * l.m ) * 2.0 +\n\t\t\t\tabs( l.ne + l.nw - 2.0 * l.n ) +\n\t\t\t\tabs( l.se + l.sw - 2.0 * l.s );\n\t\t\te.isHorizontal = horizontal >= vertical;\n\n\t\t\tfloat pLuminance = e.isHorizontal ? l.n : l.e;\n\t\t\tfloat nLuminance = e.isHorizontal ? l.s : l.w;\n\t\t\tfloat pGradient = abs( pLuminance - l.m );\n\t\t\tfloat nGradient = abs( nLuminance - l.m );\n\n\t\t\te.pixelStep = e.isHorizontal ? texSize.y : texSize.x;\n\n\t\t\tif (pGradient < nGradient) {\n\n\t\t\t\te.pixelStep = -e.pixelStep;\n\t\t\t\te.oppositeLuminance = nLuminance;\n\t\t\t\te.gradient = nGradient;\n\n\t\t\t} else {\n\n\t\t\t\te.oppositeLuminance = pLuminance;\n\t\t\t\te.gradient = pGradient;\n\n\t\t\t}\n\n\t\t\treturn e;\n\n\t\t}\n\n\t\tfloat DetermineEdgeBlendFactor( sampler2D  tex2D, vec2 texSize, LuminanceData l, EdgeData e, vec2 uv ) {\n\n\t\t\tvec2 uvEdge = uv;\n\t\t\tvec2 edgeStep;\n\t\t\tif (e.isHorizontal) {\n\n\t\t\t\tuvEdge.y += e.pixelStep * 0.5;\n\t\t\t\tedgeStep = vec2( texSize.x, 0.0 );\n\n\t\t\t} else {\n\n\t\t\t\tuvEdge.x += e.pixelStep * 0.5;\n\t\t\t\tedgeStep = vec2( 0.0, texSize.y );\n\n\t\t\t}\n\n\t\t\tfloat edgeLuminance = ( l.m + e.oppositeLuminance ) * 0.5;\n\t\t\tfloat gradientThreshold = e.gradient * 0.25;\n\n\t\t\tvec2 puv = uvEdge + edgeStep * edgeSteps[0];\n\t\t\tfloat pLuminanceDelta = SampleLuminance( tex2D, puv ) - edgeLuminance;\n\t\t\tbool pAtEnd = abs( pLuminanceDelta ) >= gradientThreshold;\n\n\t\t\tfor ( int i = 1; i < EDGE_STEP_COUNT && !pAtEnd; i++ ) {\n\n\t\t\t\tpuv += edgeStep * edgeSteps[i];\n\t\t\t\tpLuminanceDelta = SampleLuminance( tex2D, puv ) - edgeLuminance;\n\t\t\t\tpAtEnd = abs( pLuminanceDelta ) >= gradientThreshold;\n\n\t\t\t}\n\n\t\t\tif ( !pAtEnd ) {\n\n\t\t\t\tpuv += edgeStep * EDGE_GUESS;\n\n\t\t\t}\n\n\t\t\tvec2 nuv = uvEdge - edgeStep * edgeSteps[0];\n\t\t\tfloat nLuminanceDelta = SampleLuminance( tex2D, nuv ) - edgeLuminance;\n\t\t\tbool nAtEnd = abs( nLuminanceDelta ) >= gradientThreshold;\n\n\t\t\tfor ( int i = 1; i < EDGE_STEP_COUNT && !nAtEnd; i++ ) {\n\n\t\t\t\tnuv -= edgeStep * edgeSteps[i];\n\t\t\t\tnLuminanceDelta = SampleLuminance( tex2D, nuv ) - edgeLuminance;\n\t\t\t\tnAtEnd = abs( nLuminanceDelta ) >= gradientThreshold;\n\n\t\t\t}\n\n\t\t\tif ( !nAtEnd ) {\n\n\t\t\t\tnuv -= edgeStep * EDGE_GUESS;\n\n\t\t\t}\n\n\t\t\tfloat pDistance, nDistance;\n\t\t\tif ( e.isHorizontal ) {\n\n\t\t\t\tpDistance = puv.x - uv.x;\n\t\t\t\tnDistance = uv.x - nuv.x;\n\n\t\t\t} else {\n\n\t\t\t\tpDistance = puv.y - uv.y;\n\t\t\t\tnDistance = uv.y - nuv.y;\n\n\t\t\t}\n\n\t\t\tfloat shortestDistance;\n\t\t\tbool deltaSign;\n\t\t\tif ( pDistance <= nDistance ) {\n\n\t\t\t\tshortestDistance = pDistance;\n\t\t\t\tdeltaSign = pLuminanceDelta >= 0.0;\n\n\t\t\t} else {\n\n\t\t\t\tshortestDistance = nDistance;\n\t\t\t\tdeltaSign = nLuminanceDelta >= 0.0;\n\n\t\t\t}\n\n\t\t\tif ( deltaSign == ( l.m - edgeLuminance >= 0.0 ) ) {\n\n\t\t\t\treturn 0.0;\n\n\t\t\t}\n\n\t\t\treturn 0.5 - shortestDistance / ( pDistance + nDistance );\n\n\t\t}\n\n\t\tvec4 ApplyFXAA( sampler2D  tex2D, vec2 texSize, vec2 uv ) {\n\n\t\t\tLuminanceData luminance = SampleLuminanceNeighborhood( tex2D, texSize, uv );\n\t\t\tif ( ShouldSkipPixel( luminance ) ) {\n\n\t\t\t\treturn Sample( tex2D, uv );\n\n\t\t\t}\n\n\t\t\tfloat pixelBlend = DeterminePixelBlendFactor( luminance );\n\t\t\tEdgeData edge = DetermineEdge( texSize, luminance );\n\t\t\tfloat edgeBlend = DetermineEdgeBlendFactor( tex2D, texSize, luminance, edge, uv );\n\t\t\tfloat finalBlend = max( pixelBlend, edgeBlend );\n\n\t\t\tif (edge.isHorizontal) {\n\n\t\t\t\tuv.y += edge.pixelStep * finalBlend;\n\n\t\t\t} else {\n\n\t\t\t\tuv.x += edge.pixelStep * finalBlend;\n\n\t\t\t}\n\n\t\t\treturn Sample( tex2D, uv );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tgl_FragColor = ApplyFXAA( tDiffuse, resolution.xy, vUv );\n\n\t\t}`\n\n};\n\nexport { FXAAShader };\n","import {Vector2,Vector3} from 'three';\n\nexport const state = {\n  isZoomingOut: false,\n  isMovingTowardsPlanet: false,\n  targetCameraPosition: new Vector3(),\n  hoverEnabled: false,\n  hasMouseMove: false,\n  offset: 0,\n  ndcRange: new Vector2()\n  // you can add more shared flags here later\n};\n\nexport const settings = {\n    accelerationOrbit: 0,\n    acceleration: 1\n  };","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js';\nimport { UnrealBloomPass } from 'three/addons/postprocessing/UnrealBloomPass.js';\nimport { RenderPass } from 'three/addons/postprocessing/RenderPass.js';\nimport { OutlinePass } from 'three/addons/postprocessing/OutlinePass.js';\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass.js';\nimport { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader.js';\nimport {state,settings} from '/scripts/solarSystem/core/state.js';\n\nexport function initSetup(){\n    console.log(\"Create the scene\");\n    const scene = new THREE.Scene();\n\n\n    const colour = new THREE.Color(0x121212);\n    scene.background = colour;\n\n    console.log(\"Create a perspective projection camera\");\n    var camera = new THREE.PerspectiveCamera( 45, window.innerWidth/window.innerHeight, 0.1, 1000 );\n    camera.position.set(-175, 115, 5);\n\n    const canvas = document.getElementById('threeCanvas');\n    const renderer = new THREE.WebGLRenderer({ canvas, antialias: true, alpha: true, preserveDrawingBuffer: true });\n\n    console.log(\"Create the renderer\");\n\n    renderer.setClearColor(0x000000, 0); \n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n\n    // ******  SHADOWS  ******\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap; // Use soft shadows\n\n    console.log(\"Create an orbit control\");\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.75;\n    controls.screenSpacePanning = false;\n    controls.maxDistance = 600;\n    \n    return {\n        scene,\n        camera,\n        renderer,\n        controls,\n        canvas\n    };\n}\n\nexport function postProcessSetup(renderer,scene,camera){\n    const renderTarget = new THREE.WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n        format: THREE.RGBAFormat,  \n        type: THREE.UnsignedByteType,\n        depthBuffer: true,\n        stencilBuffer: false\n    });\n\n    const composer = new EffectComposer(renderer, renderTarget);\n    composer.addPass(new RenderPass(scene, camera));\n    const fxaaPass = new ShaderPass(FXAAShader);\n    const pixelRatio = renderer.getPixelRatio();\n\n    fxaaPass.material.uniforms['resolution'].value.set(\n        1 / (window.innerWidth * pixelRatio),\n        1 / (window.innerHeight * pixelRatio)\n    );\n\n    composer.addPass(fxaaPass);\n\n    // ******  OUTLINE PASS  ******\n    const outlinePass = new OutlinePass(new THREE.Vector2(window.innerWidth, window.innerHeight), scene, camera);\n    outlinePass.edgeStrength = 3;\n    outlinePass.edgeGlow = 1;\n    outlinePass.visibleEdgeColor.set(0xFFFFFF);\n    outlinePass.hiddenEdgeColor.set(0x190a05);\n    composer.addPass(outlinePass);\n\n    // ******  BLOOM PASS  ******\n    const bloomPass = new UnrealBloomPass(new THREE.Vector2(window.innerWidth, window.innerHeight), 0.0001, 0.4, 0.001);\n    bloomPass.renderToScreen = true;\n    bloomPass.clear = false;\n    bloomPass.threshold = 1;\n    bloomPass.radius = 0.9;\n    composer.addPass(bloomPass);\n\n    return {\n        composer,\n        outlinePass,\n        fxaaPass\n    };\n}\n\nexport function lightingSetup(scene){\n    console.log(\"Add the ambient light\");\n    var lightAmbient = new THREE.AmbientLight(0x222222, 6); \n\n\n    const hemiLight = new THREE.HemisphereLight(0xffffff, 0x222222, 0.2);\n\n    scene.add(lightAmbient);\n    scene.add(hemiLight);\n}\n\n\nexport function initPlanetsToScene(scene,sun,planets){\n    scene.add(sun);\n    planets.forEach((planet) => {\n        scene.add(planet.planet3d); // Add to the scene\n    });\n    window.dispatchEvent(new CustomEvent(\"planetsLoaded\"));\n}\n\nexport function devStateSetup(){\n    state.hoverEnabled = true;\n    settings.accelerationOrbit = 1;\n}","export default \"__VITE_PUBLIC_ASSET__7f38635d__\"","export default \"__VITE_PUBLIC_ASSET__78e6bed0__\"","import sunTexture from '/images/sun.jpg';\nimport * as THREE from 'three';\nimport {getCachedModel} from '@model/modelCache.js';\nimport poolBallTexture from '/images/8ball.jpg';\n\n\nconst loadTexture = new THREE.TextureLoader();\n\nexport function bootupPlanetConditions(planets){\n    planets.forEach((planet) => {\n        planet.planet3d.visible = false; // Initially hide them all\n    });\n}\n\nexport function rePositionSun(sun){\n    sun.scale.set(1.7, 1.7, 1.7);\n    //initial y: -50\n    //target y: 40\n    sun.position.y=-50;\n    sun.position.z=0;\n    sun.position.x=0;\n}\n\nexport function initSun(){\n    const sunSize = 697/40; // 40 is the scale factor to make it fit in the scene, 697 is the real diameter of the sun in km\n    let sunMat;\n    const sunGeom = new THREE.SphereGeometry(sunSize, 64, 64);\n    \n    sunMat = new THREE.MeshStandardMaterial({\n    emissive: 0xFFF88F,\n    emissiveMap: loadTexture.load(sunTexture),\n    emissiveIntensity: 1,\n    color: new THREE.Color(0xFFA500)\n    });\n\n    sunMat.transparent = true;\n\n    const sun = new THREE.Mesh(sunGeom, sunMat);\n\n    window.dispatchEvent(new CustomEvent(\"sunLoaded\"));\n\n    //point light in the sun\n    const pointLight = new THREE.PointLight(0xFDFFD3 , 1200, 400, 1.4);\n    pointLight.shadow.mapSize.width = 1024;\n    pointLight.shadow.mapSize.height = 1024;\n    pointLight.shadow.camera.near = 10;\n    pointLight.shadow.camera.far = 20;\n    sun.add(pointLight);\n\n    sun.planet = sun;\n    window.dispatchEvent(new CustomEvent(\"sunLoaded\"));\n    return sun;\n}\n\n\nexport async function initPlanetObjects() {\n  //orginal distances\n  // const mercury = await createglbPlanet(\"mercury\",40,0.20);\n  //   mercury.planet.rotation.x = -90 * Math.PI / 180;\n  //   const venus = await createglbPlanet(\"venus\",65,6.1);\n  //   const earth = new createPlanet('Earth', 6.4, 90, 0, poolBallTexture);\n  //   const mars = await createglbPlanet(\"mars\",115,4);\n  //   const jupiter = await createglbPlanet(\"jupiter\",170,15);\n  //   const saturn = await createglbPlanet(\"saturn\",240,1);\n\n    const mercury = await createglbPlanet(\"mercury\",40,0.25);\n    mercury.planet.rotation.x = -90 * Math.PI / 180;\n    const venus = await createglbPlanet(\"venus\",65,6.8);\n    const earth = new createPlanet('Earth', 9, 90, 0, poolBallTexture);\n    const mars = await createglbPlanet(\"mars\",125,6.5);\n    const jupiter = await createglbPlanet(\"jupiter\",160,15);\n    const saturn = await createglbPlanet(\"saturn\",210,1);\n\n    earth.planet.castShadow = true;\n    earth.planet.receiveShadow = true;\n\n    mercury.planet.castShadow = true;\n    mercury.planet.receiveShadow = true;\n    venus.planet.castShadow = true;\n    venus.planet.receiveShadow = true;\n    mars.planet.castShadow = true;\n    mars.planet.receiveShadow = true;\n    jupiter.planet.castShadow = true;\n    jupiter.planet.receiveShadow = true;\n\n    saturn.planet.castShadow = true;\n    saturn.planet.receiveShadow = true;\n\n    const planets = [\n      {\n        name: 'mercury',\n        planet: mercury.planet,\n        planet3d: mercury.planet3d,\n        meshes: mercury.meshes,\n        rotationSpeed: 0.005,\n        orbitSpeed: 0.002,\n        orbit: mercury.orbit,\n        label: \"Experience\",\n        rotateSelf: (mesh, speed, accel) => mesh.rotateZ(speed * accel),\n      },\n      {\n        name: 'venus',\n        planet: venus.planet,\n        planet3d: venus.planet3d,\n        meshes: venus.meshes,\n        rotationSpeed: 0.005,\n        orbitSpeed: 0.0006,\n        orbit: venus.orbit,\n        label: \"Skill sets/Resume\",\n        rotateSelf: (mesh, speed, accel) => mesh.rotateY(speed * accel),\n      },\n      {\n        name: 'earth',\n        planet: earth.planet,\n        planet3d: earth.planet3d,\n        meshes: earth.meshes,\n        rotationSpeed: 0.005,\n        orbitSpeed: 0.001,\n        orbit: earth.orbit,\n        label: \"Robotics\",\n        rotateSelf: (mesh, speed, accel) => mesh.rotateY(speed * accel),\n      },\n      {\n        name: 'mars',\n        planet: mars.planet,\n        planet3d: mars.planet3d,\n        meshes: mars.meshes,\n        rotationSpeed: 0.008,\n        orbitSpeed: 0.0012,\n        orbit: mars.orbit,\n        label: \"Extracurricular\",\n        rotateSelf: (mesh, speed, accel) => mesh.rotateY(speed * accel),\n      },\n      {\n        name: 'jupiter',\n        planet: jupiter.planet,\n        planet3d: jupiter.planet3d,\n        meshes: jupiter.meshes,\n        rotationSpeed: 0.005,\n        orbitSpeed: 0.0006,\n        orbit: jupiter.orbit,\n        label: \"Childhood\",\n        rotateSelf: (mesh, speed, accel) => mesh.rotateY(speed * accel),\n      },\n      {\n        name: 'saturn',\n        planet: saturn.planet,\n        planet3d: saturn.planet3d,\n        meshes: saturn.meshes,\n        rotationSpeed: 0.01,\n        orbitSpeed: 0.0002,\n        orbit: saturn.orbit,\n        label: \"About me\",\n        rotateSelf: (mesh, speed, accel) => mesh.rotateY(speed * accel),\n      }\n    ];\n\n    preparePlanetTransparency(planets);\n\n    for (const p of planets){\n      p.planet3d.rotateY(-0.5);\n    }\n\n    return planets;\n}\n\n//helper function to create a planet with GLB model\n\nfunction createPlanet(planetName, size, position, tilt, texture){\n\n    let material;\n    if (texture instanceof THREE.Material){\n      material = texture;\n    }else {\n      material = new THREE.MeshPhongMaterial({\n      map: loadTexture.load(texture)\n      });\n    } \n\n    const name = planetName;\n    const geometry = new THREE.SphereGeometry(size, 32, 20);\n    const planet = new THREE.Mesh(geometry, material);\n    const planet3d = new THREE.Object3D;\n    const planetSystem = new THREE.Group();\n    planetSystem.add(planet);\n    planet.position.x = position;\n    planet.rotation.z = tilt * Math.PI / 180;\n\n    // add orbit path\n    const orbitPath = new THREE.EllipseCurve(\n      0, 0,            // ax, aY\n      position, position, // xRadius, yRadius\n      0, 2 * Math.PI,   // aStartAngle, aEndAngle\n      false,            // aClockwise\n      0                 // aRotation\n  );\n\n    const pathPoints = orbitPath.getPoints(100);\n    const orbitGeometry = new THREE.BufferGeometry().setFromPoints(pathPoints);\n    const orbitMaterial = new THREE.LineBasicMaterial({ color: 0xFFFFFF, transparent: true, opacity: 0.5 });\n    const orbit = new THREE.LineLoop(orbitGeometry, orbitMaterial);\n    orbit.rotation.x = Math.PI / 2;\n    planet.orbit = orbit;\n    planetSystem.add(orbit);\n\n    //add planet system to planet3d object and to the scene\n    planet3d.add(planetSystem);\n    const meshes = [planet];\n    return {name,planet,planet3d, orbit,meshes};\n  }\n\nasync function createglbPlanet(name,position,scale){\n  \n      const planet = await getCachedModel(name);\n      planet.traverse((child) => {\n        if (child.isMesh) {\n          child.material = new THREE.MeshStandardMaterial({\n            map: child.material.map,\n            color: child.material.color,\n          });\n          child.geometry.computeVertexNormals();\n        }\n      });\n  \n      const planet3d = new THREE.Object3D;\n      const planetSystem = new THREE.Group();\n      planetSystem.add(planet);\n  \n      planet.position.x = position;\n      planet.scale.set(scale,scale,scale);\n  \n      const orbitPath = new THREE.EllipseCurve(\n        0, 0,            // ax, aY\n        position, position, // xRadius, yRadius\n        0, 2 * Math.PI,   // aStartAngle, aEndAngle\n        false,            // aClockwise\n        0                 // aRotation\n      );\n  \n      const pathPoints = orbitPath.getPoints(100);\n      const orbitGeometry = new THREE.BufferGeometry().setFromPoints(pathPoints);\n      const orbitMaterial = new THREE.LineBasicMaterial({ color: 0xFFFFFF, transparent: true, opacity: 0.5 });\n      const orbit = new THREE.LineLoop(orbitGeometry, orbitMaterial);\n      orbit.rotation.x = Math.PI / 2;\n      planet.orbit = orbit;\n  \n      planetSystem.add(orbit);\n  \n      planet3d.add(planetSystem);\n  \n  \n      let meshes = [];\n      planet.traverse(child => {\n        if (child.isMesh) {\n          meshes.push(child);\n        } \n      });\n  \n  \n      return {name,planet,planet3d,orbit,meshes};\n    }\n\n\nfunction preparePlanetTransparency(planets){\n  for (let i= 0;i<planets.length;i++){\n    const planetGroup = planets[i].planet3d;\n    planetGroup.traverse(child => {\n    if (child.isMesh || child.isLine) {\n        child.material.transparent = true;}\n      });\n  }\n}\n\n","import {Raycaster,Vector2,Vector3} from 'three';\nimport {state,settings} from '/scripts/solarSystem/core/state.js';\n\nexport class MouseHandler {\n  constructor({\n    sun,\n    planets,\n    camera,\n    controls,\n    outlinePass,\n    offsets,\n    canvas\n  }) {\n    this.raycaster =  new Raycaster();\n    this.sun = sun;\n    this.sunMat = sun.material;\n    this.planets = planets;\n    this.camera = camera;\n    this.controls = controls;\n    this.outlinePass = outlinePass;\n    this.offsets = offsets;\n    this.canvas = canvas;\n    this.raycastTargets = this.planets.flatMap(p => p.meshes);\n    this.raycastTargets.unshift(this.sun);\n    this.clientMouse = new Vector2();\n\n    // Bind event handlers\n    this.onClick = this.onClick.bind(this);\n    this.onMouseMove = this.onMouseMove.bind(this);\n  }\n\n  onClick(event) {\n    event.preventDefault();\n  \n      state.ndcRange.x = (event.clientX / window.innerWidth) * 2 - 1;\n      state.ndcRange.y = - (event.clientY / window.innerHeight) * 2 + 1;\n  \n      this.raycaster.setFromCamera(state.ndcRange, this.camera);\n      var intersects = this.raycaster.intersectObjects(this.raycastTargets);\n  \n      if (intersects.length > 0) {\n        const clickedObject = intersects[0].object;\n        const selectedPlanetIndex = identifyPlanet(clickedObject,this.sunMat, this.planets);\n        let selectedPlanet = null;\n        if (selectedPlanetIndex === 0) {\n          selectedPlanet = this.sun;\n        } else if (selectedPlanetIndex > 0) {\n          selectedPlanet = this.planets[selectedPlanetIndex - 1];\n        }\n  \n        if (selectedPlanet) {\n          window.planetIndex = selectedPlanetIndex;\n          state.offset = this.offsets[selectedPlanetIndex];\n          const indexAnnouncementEvent = new CustomEvent(\"solarSystemToInfoSection\",\n            {\n              detail: {index: window.planetIndex}\n            }\n          )\n          window.dispatchEvent(indexAnnouncementEvent);\n          settings.accelerationOrbit = 0;\n  \n          const planetPosition = new Vector3();\n  \n          if (!(selectedPlanet === this.sun)) {\n            const fadeSunRequiredAnnouncement = new CustomEvent(\"changeSunOpacity\",\n                {\n                    detail: {opacity: 0,duration: 1000}\n\n                }\n            );\n            this.canvas.dispatchEvent(fadeSunRequiredAnnouncement);\n            //fadeSunOpacity(sunMat, 0, 1000);\n            selectedPlanet.planet.getWorldPosition(planetPosition);\n          }\n  \n          window.dispatchEvent(new CustomEvent(\"circularBorder\"));\n          \n          state.isMovingTowardsPlanet = true;\n          this.controls.target.copy(planetPosition);\n          this.camera.lookAt(planetPosition);\n          state.targetCameraPosition.copy(planetPosition).add(\n            this.camera.position.clone().sub(planetPosition).normalize().multiplyScalar(state.offset)\n          );\n          // Wait for sequential hide to complete before moving camera\n          const sequentialHideEvent = new CustomEvent(\"hideOutofViewPlanets\",\n                {\n                    detail: {selectedPlanet: selectedPlanet,delay:300}\n                }\n            );\n            this.canvas.dispatchEvent(sequentialHideEvent);\n\n          setTimeout(()=>{\n            window.dispatchEvent(new CustomEvent(\"beginPlanetTransform\"));\n          },1000)\n          \n          document.body.style.cursor = 'default';\n          state.hoverEnabled = false;\n          state.hasMouseMove = false;\n          document.getElementById('hoverCard').style.display = 'none';\n          this.outlinePass.selectedObjects = [];\n        }\n      }\n  }\n\n  onMouseMove(event) {\n    if (!(state.hoverEnabled)) return;\n\n    event.preventDefault();\n    state.hasMouseMove = true;\n    this.clientMouse.x = event.clientX;\n    this.clientMouse.y = event.clientY;\n    \n    state.ndcRange.x = (event.clientX / window.innerWidth) * 2 - 1;\n    state.ndcRange.y = - (event.clientY / window.innerHeight) * 2 + 1;\n  }\n\n\n  updateCardForHoveredObject(object,card) {\n    // Check sun first (not in planets array)\n    if (object === this.sun) {\n      card.innerText = \"Contact me\";\n      return;\n    }\n\n    // Check planets array\n    for (const planet of this.planets) {\n      if (planet.meshes.includes(object)) {\n        card.innerText = planet.label;\n        return;\n      }\n    }\n\n    console.log(object,\"not found!\");\n    // Default fallback if nothing matches\n    card.innerText = \"\";\n    card.style.display = \"none\";\n}\n\n  attach() {\n    this.canvas.addEventListener('click', this.onClick, false);\n    this.canvas.addEventListener('mousemove', this.onMouseMove, false);\n  }\n\n  detach() {\n    this.canvas.removeEventListener('click', this.onClick);\n    this.canvas.removeEventListener('mousemove', this.onMouseMove);\n  }\n}\n\n//helper functions\n\n     function isDescendantOf(object, potentialAncestor) {\n    let current = object;\n    while (current) {\n      if (current === potentialAncestor) return true;\n      current = current.parent;\n    }\n    return false;\n  }\n\n  function identifyPlanet(clickedObject, sunMat, planets) {\n    if (clickedObject.material === sunMat) {\n      return 0;\n    }\n\n    for (let i = 0; i < planets.length; i++) {\n      if (planets[i].planet && isDescendantOf(clickedObject, planets[i].planet)) {\n        return i+1;\n      }\n    }\n    return null;\n  }\n\n","export function solarStartSunrise(sun) {\n    const startY = sun.position.y;\n    const targetY = 45;\n    const duration = 8000;\n    const startTime = performance.now();\n\n    function rise(currentTime) {\n      const elapsed = currentTime - startTime;\n      const t = Math.min(elapsed / duration, 1);\n\n      // Eased movement (cubic ease-out)\n      const easedT = 1 - Math.pow(1 - t, 2);\n      \n      sun.position.y = startY + (targetY - startY) * easedT;\n\n      if (t < 1) {\n        requestAnimationFrame(rise);\n      }else{\n        window.dispatchEvent(new CustomEvent(\"sunRose\"));\n      }\n    }\n\n    requestAnimationFrame(rise);\n}\n\nexport function solarTransformDownZoomOut(sun) {\n    const startY = sun.position.y;\n    const targetY = 0;\n\n    const startScale = sun.scale.x; // assumed uniform scale\n    const targetScale = 1;\n\n    const duration = 2500; // ms\n    const startTime = performance.now();\n\n    function animate(time) {\n      const elapsed = time - startTime;\n      const t = Math.min(elapsed / duration, 1);\n      const easedT = t * t * (3 - 2 * t); // smoothstep easing\n\n      // Position\n      sun.position.y = startY + (targetY - startY) * easedT;\n\n      // Scale\n      const scale = startScale + (targetScale - startScale) * easedT;\n      sun.scale.set(scale, scale, scale);\n\n      if (t < 1) {\n        requestAnimationFrame(animate);\n      }else{\n        window.dispatchEvent(new CustomEvent(\"sunZoomComplete\"));\n      }\n    }\n\n    requestAnimationFrame(animate);\n  }\n\nexport  function fadeSunOpacity(sunMat,targetOpacity, duration = 1000) {\n    if (!sunMat) return;\n\n    sunMat.transparent = true;\n    const startOpacity = sunMat.opacity;\n    const startTime = performance.now();\n\n    function fadeStep(currentTime) {\n      const elapsed = currentTime - startTime;\n      const t = Math.min(elapsed / duration, 1);\n      const easedT = t * t * (3 - 2 * t); // smoothstep easing\n\n      sunMat.opacity = startOpacity + (targetOpacity - startOpacity) * easedT;\n\n      if (t < 1) {\n        requestAnimationFrame(fadeStep);\n      }\n    }\n\n    requestAnimationFrame(fadeStep);\n  }\n\nexport function hideAllExceptSelected(selected,sun,planets) {\n    const isSunSelected = selected === sun;\n    sun.material.transparent = true;\n    sun.material.opacity = isSunSelected ? 1 : 0;\n\n    planets.forEach((planetObj) => {\n      const mesh = planetObj.planet;\n\n      if (!mesh) return;\n\n      const isSelected = planetObj === selected;\n\n      mesh.traverse(child => {\n        if ((child.isMesh || child.isLine) && child.material) {\n          const materials = Array.isArray(child.material) ? child.material : [child.material];\n          materials.forEach(mat => {\n            mat.transparent = true;\n            mat.opacity = isSelected ? 1 : 0;\n          });\n\n          child.visible = true; // Always keep children visible to prevent render bugs\n        }\n      });\n    });\n  }\n\nexport function sequentialHideUnselected(selectedPlanet, planets, delay = 300,duration=1000) {\n  console.log(\"selectedPlanet\",selectedPlanet);\n    for (let i = planets.length - 1; i >= 0; i--) {\n      const planet3d = planets[i].planet3d;\n      const planet = planets[i].planet;\n      const isSelected = planet === selectedPlanet.planet;\n\n      setTimeout(() => {\n        if (isSelected) {\n          if (selectedPlanet.orbit && selectedPlanet.orbit.material) {\n            const orbitMaterial = selectedPlanet.orbit.material;\n            orbitMaterial.transparent = true;\n\n            const startTime = performance.now();\n\n            function fadeOrbit(currentTime) {\n              const elapsed = currentTime - startTime;\n              const t = Math.min(elapsed / duration, 1);\n              const easedT = t * t * (3 - 2 * t);\n\n              orbitMaterial.opacity = 1 - easedT;\n\n              if (t < 1) {\n                requestAnimationFrame(fadeOrbit);\n              } else {\n                selectedPlanet.orbit.visible = false;\n              }\n            }\n\n            requestAnimationFrame(fadeOrbit);\n          }\n        } else {\n          hidePlanet(planet3d);\n        }\n      }, (planets.length - 1 - i) * delay); // reverse order\n    }\n  }\n\n  export function sequentialReveal(planets, delay = 1000,onComplete = () => {}) {\n    planets.forEach((planet, index) => {\n      setTimeout(() => {\n        revealPlanet(planet.planet3d);\n\n        // After the last planet, fire the event\n        if (index === planets.length - 1) {\n          setTimeout(() => {\n            window.dispatchEvent(new CustomEvent(\"planetsInView\"));\n            onComplete();\n          }, delay); // wait for the final reveal animation\n        }\n\n      }, index * delay);\n    });\n  }\n\n  //helper functions\n\nfunction hidePlanet(planetGroup) {\nreturn new Promise((resolve) => {\n    planetGroup.traverse(child => {\n    if (child.isMesh || child.isLine) {\n        const duration = 200;\n        const startTime = performance.now();\n\n        function fade(currentTime) {\n        const elapsed = currentTime - startTime;\n        const t = Math.min(elapsed / duration, 1);\n        const easedT = 1 - (t * t * (3 - 2 * t)); // smoothstep fade-out\n\n        child.material.opacity = easedT;\n\n        if (t < 1) {\n            requestAnimationFrame(fade);\n        } else {\n            child.visible = false;\n            resolve(); \n        }\n        }\n\n        requestAnimationFrame(fade);\n    }\n    });\n});\n}\n\n\nfunction revealPlanet(planetGroup) {\nplanetGroup.visible = true;\n\nplanetGroup.traverse(child => {\n    if ((child.isMesh || child.isLine) && child.material) {\n    child.visible = true;\n\n    const materials = Array.isArray(child.material) ? child.material : [child.material];\n    materials.forEach(mat => {\n        mat.transparent = true;\n\n        // Force reset opacity in case it’s stuck\n        mat.opacity = 0;\n\n        // Reset potential side-effects\n        if (mat.depthWrite === false) mat.depthWrite = true;\n        if (mat.color && mat.color.a !== undefined) mat.color.a = 1.0;\n    });\n\n    const duration = 800;\n    const startTime = performance.now();\n\n    function fade(currentTime) {\n        const elapsed = currentTime - startTime;\n        const t = Math.min(elapsed / duration, 1);\n        const easedT = t * t * (3 - 2 * t); // smoothstep\n\n        materials.forEach(mat => {\n        mat.opacity = easedT;\n        });\n\n        if (t < 1) {\n        requestAnimationFrame(fade);\n        }\n    }\n\n    requestAnimationFrame(fade);\n    }\n});\n}","import {Vector3} from 'three';\nimport {state} from '/scripts/solarSystem/core/state.js';\nimport {hideAllExceptSelected} from  '/scripts/solarSystem/animation/sequenceAnim.js';\n\n//sequenceAnim functions are called on directly due to poor eventDispatch performances at 0 delay time\nexport function planetChange({event,sun,planets,controls,camera,offsets,canvas}){\n    const index = event.detail.index;\n    let selected;\n    // Determine the selected planet based on the index\n    if (index == 0) {\n        selected = sun;\n    }else{\n        selected = planets[index - 1];\n    }\n    state.offset = offsets[index];\n\n    selected.planet.visible = true;\n        selected.planet.traverse(child => {\n        child.visible = true; // <- make child renderable\n        if (child.material) {\n        child.material.transparent = true;\n        child.material.opacity = 1;\n        }\n    });\n\n    hideAllExceptSelected(selected,sun,planets);\n    const planetPosition = new Vector3();\n    selected.planet.getWorldPosition(planetPosition);\n\n    // Update camera target and position\n\n    controls.target.copy(planetPosition);\n    camera.lookAt(planetPosition);\n    state.targetCameraPosition.copy(planetPosition).add(\n    camera.position.clone().sub(planetPosition).normalize().multiplyScalar(state.offset)\n    );\n    \n    camera.position.copy(state.targetCameraPosition);\n  }\n\n  export async function handleZoomOut(canvas,settings) {\n    state.isZoomingOut = true;\n    console.log(\"zoom out received!\");\n    const bringBackSunEvent = new CustomEvent(\"changeSunOpacity\",{\n      detail:{opacity:1,duration:2000}\n    });\n    canvas.dispatchEvent(bringBackSunEvent);\n    settings.accelerationOrbit = 1;\n\n    const revealEvent = new  CustomEvent(\"revealPlanets\",{\n        detail: {delay:1000}\n      });\n    setTimeout(() => {\n      window.dispatchEvent(revealEvent);\n    }, 500);\n  }\n\n  export function handleResize({canvas, renderer, camera, fxaaPass, composer}) {\n  const dpr = window.devicePixelRatio || 1;\n\n  // Update camera aspect ratio & projection matrix\n  camera.aspect = window.innerWidth / window.innerHeight;\n  camera.updateProjectionMatrix();\n\n  // Update renderer size and pixel ratio\n  renderer.setPixelRatio(dpr);\n  renderer.setSize(window.innerWidth, window.innerHeight, false);\n\n  canvas.style.width = '100vw';\n  canvas.style.height = '100vh';\n\n  composer.setSize(window.innerWidth, window.innerHeight);\n\n  // Update FXAA pass resolution uniforms\n  if (fxaaPass) {\n    fxaaPass.material.uniforms['resolution'].value.set(\n      1 / (window.innerWidth * dpr),\n      1 / (window.innerHeight * dpr)\n    );\n  }\n\n  console.log(\"resize triggered!\");\n}","import {Vector3} from 'three';\n\nexport const offsets = [\n    90,    // sun\n    40,  // mercury\n    40,  // venus\n    43,    // earth\n    50,    // mars\n    65,    // jupiter\n    90     // saturn\n  ];\n\n  export const zoomOutTargetPosition = new Vector3(-175, 115, 5);","import {planetChange,handleZoomOut,handleResize} from '/scripts/solarSystem/input/eventHandler.js';\nimport {sequentialHideUnselected, sequentialReveal, solarStartSunrise,solarTransformDownZoomOut,fadeSunOpacity} from '/scripts/solarSystem/animation/sequenceAnim.js';\nimport {state,settings} from '/scripts/solarSystem/core/state.js';\nimport { offsets } from '/scripts/solarSystem/core/const.js';\n\nexport function initEventListeners({canvas, renderer, camera, fxaaPass,sun,planets,controls,composer}){\n\n    window.addEventListener(\"beginTutorial\", () => {\n        setTimeout(() => {\n            const card = document.getElementById(\"tutorialCard\");\n            card.classList.add(\"show\");\n        }, 500);\n    });\n\n    document.getElementById(\"closeTutorial\").addEventListener(\"click\", () => {\n        const card = document.getElementById(\"tutorialCard\");\n        card.style.display=\"none\";\n    });\n\n\n    canvas.addEventListener('changeSunOpacity',(e) =>fadeSunOpacity(sun.material,e.detail.opacity,e.detail.duration));\n    canvas.addEventListener('hideOutofViewPlanets',(e)=>sequentialHideUnselected(e.detail.selectedPlanet,planets,e.detail.delay));\n\n    window.addEventListener('zoomOutNeeded',()=>{ \n    handleZoomOut(canvas,settings);\n    });\n\n    window.addEventListener('beginSunrise', () => {\n    solarStartSunrise(sun);\n    });\n\n    window.addEventListener('solarTransformDownZoomOutCue', () => {\n        solarTransformDownZoomOut(sun);\n        settings.accelerationOrbit = 1;\n    });\n    window.addEventListener('revealPlanets', (e) => {sequentialReveal(planets,\n        e.detail.delay,\n        () => {state.hoverEnabled = true;});\n    });\n    window.addEventListener('resize', handleResize({canvas,renderer,camera,fxaaPass,composer}));\n    window.addEventListener('orientationchange',  handleResize({canvas,renderer,camera,fxaaPass,composer}));\n    window.addEventListener(\"planetChange\", (event) => {\n    planetChange({event,sun,planets,controls,camera,offsets,canvas});\n    });\n\n    const observer = new ResizeObserver(() => {\n        console.log('Element resized!');\n        // Your resize logic (camera.aspect, renderer.setSize, etc.)\n        handleResize({canvas,renderer,camera,fxaaPass,composer});\n    });\n\n    observer.observe(document.getElementById('threeCanvas'));\n}","import {state,settings} from '/scripts/solarSystem/core/state.js';\nimport {zoomOutTargetPosition} from '/scripts/solarSystem/core/const.js'\n\nexport const animate = (sun,planets,mouseHandler,outlinePass,camera,controls,composer) =>{\n     //rotating planets around the sun and itself\n    sun.rotateY(0.0015 * settings.acceleration);\n\n\n    for (const p of planets) {\n      p.rotateSelf(p.planet, p.rotationSpeed, settings.acceleration);\n      p.planet3d.rotateY(p.orbitSpeed * settings.accelerationOrbit);\n    }\n     mouseHandler.raycaster.setFromCamera(state.ndcRange, camera);\n\n    // Check for intersections\n    var intersects = mouseHandler.raycaster.intersectObjects(mouseHandler.raycastTargets);\n    const card = document.getElementById('hoverCard');\n\n    outlinePass.selectedObjects = [];\n\n    if (state.hasMouseMove){\n      if ((intersects.length > 0) && (state.hoverEnabled == true)) {\n        const intersectedObject = intersects[0].object;\n\n        document.body.style.cursor = 'pointer';\n\n        outlinePass.selectedObjects = [intersectedObject];\n        mouseHandler.updateCardForHoveredObject(intersectedObject,card);  \n\n\n        card.style.left = `${mouseHandler.clientMouse.x + 10}px`;\n        card.style.top = `${mouseHandler.clientMouse.y + 10}px`;\n        card.style.display = 'block';\n    }else {\n      card.innerText = \"\";\n      card.style.display = \"none\";\n      document.body.style.cursor = 'default';\n    }\n  }\n    \n\n  // ******  ZOOM IN/OUT  ******\n  if (state.isMovingTowardsPlanet) {\n    camera.position.lerp(state.targetCameraPosition, 0.03);\n    if (camera.position.distanceTo(state.targetCameraPosition) < 1) {\n      state.isMovingTowardsPlanet = false;\n    }\n  } else if (state.isZoomingOut) {\n    camera.position.lerp(zoomOutTargetPosition, 0.03);\n\n    if (camera.position.distanceTo(zoomOutTargetPosition) < 1) {\n        state.isZoomingOut = false;\n    }\n  }\n\n    controls.update();\n    composer.render();\n    requestAnimationFrame(()=>animate(sun,planets,mouseHandler,outlinePass,camera,controls,composer));\n\n  };","//script imports\nimport {initSetup,postProcessSetup,lightingSetup,initPlanetsToScene,devStateSetup} from '/scripts/solarSystem/core/initCanvasSetup.js';\nimport {initSun,initPlanetObjects,bootupPlanetConditions,rePositionSun} from '/scripts/solarSystem/objects/initPlanetObjects.js';\nimport {MouseHandler} from '/scripts/solarSystem/input/mouse.js';\nimport { initEventListeners } from './solarSystem/input/eventListeners.js';\nimport {offsets} from '/scripts/solarSystem/core/const.js';\nimport {animate} from '/scripts/solarSystem/animation/animate.js'\n\nexport async function initSolarSystem(isDev){\n  // ******  SETUP  ******\n  const { scene, camera, renderer, controls, canvas } = initSetup();\n  const { composer,outlinePass,fxaaPass } = postProcessSetup(renderer, scene, camera);\n  lightingSetup(scene);\n\n  // ******  SUN  ******\n  const sun = initSun();\n\n\n  const planets = await initPlanetObjects();\n\n  initPlanetsToScene(scene,sun,planets);\n  if (!(isDev)){\n    rePositionSun(sun);\n    bootupPlanetConditions(planets);\n  }else{\n    devStateSetup();\n  }\n     // mouse movement\n  const mouseHandler = new MouseHandler({sun,planets,camera,controls,outlinePass,offsets,canvas});\n\n  //attach click events to canvas\n  mouseHandler.attach(); \n  animate(sun,planets,mouseHandler,outlinePass,camera,controls,composer);\n  initEventListeners({canvas, renderer, camera, fxaaPass,sun,planets,controls,composer});\n}\n\n\n\n  \n\n\n "],"names":["_changeEvent","_startEvent","_endEvent","_ray","Ray","_plane","Plane","_TILT_LIMIT","MathUtils","_v","Vector3","_twoPI","_STATE","_EPS","OrbitControls","Controls","object","domElement","MOUSE","TOUCH","Quaternion","Spherical","Vector2","onPointerMove","onPointerDown","onPointerUp","onContextMenu","onMouseWheel","onKeyDown","onTouchStart","onTouchMove","onMouseDown","onMouseMove","interceptControlDown","interceptControlUp","element","deltaTime","position","min","max","zoomChanged","prevRadius","newRadius","radiusDelta","mouseBefore","prevZoom","mouseAfter","delta","normalizedDelta","angle","distance","objectMatrix","deltaX","deltaY","targetDistance","dollyScale","x","y","rect","dx","dy","w","h","dist","event","needsUpdate","centerX","centerY","i","pointerId","mode","newEvent","mouseAction","CopyShader","Pass","_camera","OrthographicCamera","FullscreenTriangleGeometry","BufferGeometry","Float32BufferAttribute","_geometry","FullScreenQuad","material","Mesh","renderer","value","ShaderPass","shader","textureID","ShaderMaterial","UniformsUtils","writeBuffer","readBuffer","MaskPass","scene","camera","context","state","writeValue","clearValue","ClearMaskPass","EffectComposer","renderTarget","size","WebGLRenderTarget","HalfFloatType","NoBlending","Clock","tmp","pass","index","passIndex","currentRenderTarget","maskActive","il","stencil","width","height","effectiveWidth","effectiveHeight","pixelRatio","LuminosityHighPassShader","Color","UnrealBloomPass","resolution","strength","radius","threshold","resx","resy","renderTargetHorizontal","renderTargetVertical","highPassShader","kernelSizeArray","bloomFactors","AdditiveBlending","MeshBasicMaterial","oldAutoClear","inputRenderTarget","kernelRadius","coefficients","nMips","RenderPass","overrideMaterial","clearColor","clearAlpha","oldClearAlpha","oldOverrideMaterial","OutlinePass","selectedObjects","MeshDepthMaterial","DoubleSide","RGBADepthPacking","replaceDepthToViewZ","MAX_EDGE_THICKNESS","MAX_EDGE_GLOW","copyShader","Matrix4","string","type","currentBackground","currentOverrideMaterial","scalar","cache","gatherSelectedMeshesCallBack","bVisible","mesh","visibilityCache","selectionCache","VisibilityChangeCallBack","visibility","maxRadius","FXAAShader","settings","initSetup","THREE.Scene","colour","THREE.Color","THREE.PerspectiveCamera","canvas","THREE.WebGLRenderer","THREE.PCFSoftShadowMap","controls","postProcessSetup","THREE.WebGLRenderTarget","THREE.RGBAFormat","THREE.UnsignedByteType","composer","fxaaPass","outlinePass","THREE.Vector2","bloomPass","lightingSetup","lightAmbient","THREE.AmbientLight","hemiLight","THREE.HemisphereLight","initPlanetsToScene","sun","planets","planet","devStateSetup","sunTexture","poolBallTexture","loadTexture","THREE.TextureLoader","bootupPlanetConditions","rePositionSun","initSun","sunMat","sunGeom","THREE.SphereGeometry","THREE.MeshStandardMaterial","THREE.Mesh","pointLight","THREE.PointLight","initPlanetObjects","mercury","createglbPlanet","venus","earth","createPlanet","mars","jupiter","saturn","speed","accel","preparePlanetTransparency","p","planetName","tilt","texture","THREE.Material","THREE.MeshPhongMaterial","name","geometry","planet3d","THREE.Object3D","planetSystem","THREE.Group","pathPoints","THREE.EllipseCurve","orbitGeometry","THREE.BufferGeometry","orbitMaterial","THREE.LineBasicMaterial","orbit","THREE.LineLoop","scale","getCachedModel","child","meshes","MouseHandler","offsets","Raycaster","intersects","clickedObject","selectedPlanetIndex","identifyPlanet","selectedPlanet","indexAnnouncementEvent","planetPosition","fadeSunRequiredAnnouncement","sequentialHideEvent","card","isDescendantOf","potentialAncestor","current","solarStartSunrise","startY","targetY","duration","startTime","rise","currentTime","elapsed","t","easedT","solarTransformDownZoomOut","startScale","targetScale","animate","time","fadeSunOpacity","targetOpacity","startOpacity","fadeStep","hideAllExceptSelected","selected","isSunSelected","planetObj","isSelected","mat","sequentialHideUnselected","delay","fadeOrbit","hidePlanet","sequentialReveal","onComplete","revealPlanet","planetGroup","resolve","fade","materials","planetChange","handleZoomOut","bringBackSunEvent","revealEvent","handleResize","dpr","zoomOutTargetPosition","initEventListeners","e","mouseHandler","intersectedObject","initSolarSystem","isDev"],"mappings":"8YAmBA,MAAMA,EAAe,CAAE,KAAM,QAAQ,EAQ/BC,EAAc,CAAE,KAAM,OAAO,EAQ7BC,GAAY,CAAE,KAAM,KAAK,EAEzBC,EAAO,IAAIC,GACXC,EAAS,IAAIC,GACbC,GAAc,KAAK,IAAK,GAAKC,GAAU,OAAO,EAE9CC,EAAK,IAAIC,EACTC,EAAS,EAAI,KAAK,GAElBC,EAAS,CACd,KAAM,GACN,OAAQ,EACR,MAAO,EACP,IAAK,EACL,aAAc,EACd,UAAW,EACX,gBAAiB,EACjB,mBAAoB,CACrB,EACMC,EAAO,KAiCb,MAAMC,WAAsBC,EAAS,CAQpC,YAAaC,EAAQC,EAAa,KAAO,CAExC,MAAOD,EAAQC,CAAU,EAEzB,KAAK,MAAQL,EAAO,KAQpB,KAAK,OAAS,IAAIF,EASlB,KAAK,OAAS,IAAIA,EAQlB,KAAK,YAAc,EAQnB,KAAK,YAAc,IAQnB,KAAK,QAAU,EAQf,KAAK,QAAU,IAQf,KAAK,gBAAkB,EAQvB,KAAK,gBAAkB,IAQvB,KAAK,cAAgB,EAQrB,KAAK,cAAgB,KAAK,GAS1B,KAAK,gBAAkB,KASvB,KAAK,gBAAkB,IAUvB,KAAK,cAAgB,GAUrB,KAAK,cAAgB,IAQrB,KAAK,WAAa,GAQlB,KAAK,UAAY,EAYjB,KAAK,aAAe,GAQpB,KAAK,YAAc,EAQnB,KAAK,eAAiB,EAQtB,KAAK,UAAY,GAQjB,KAAK,SAAW,EAUhB,KAAK,mBAAqB,GAS1B,KAAK,YAAc,EAQnB,KAAK,aAAe,GAYpB,KAAK,WAAa,GAWlB,KAAK,gBAAkB,EAevB,KAAK,KAAO,CAAE,KAAM,YAAa,GAAI,UAAW,MAAO,aAAc,OAAQ,WAAW,EAcxF,KAAK,aAAe,CAAE,KAAMQ,EAAM,OAAQ,OAAQA,EAAM,MAAO,MAAOA,EAAM,GAAG,EAa/E,KAAK,QAAU,CAAE,IAAKC,EAAM,OAAQ,IAAKA,EAAM,SAAS,EAOxD,KAAK,QAAU,KAAK,OAAO,MAAK,EAOhC,KAAK,UAAY,KAAK,OAAO,SAAS,MAAK,EAO3C,KAAK,MAAQ,KAAK,OAAO,KAGzB,KAAK,qBAAuB,KAI5B,KAAK,cAAgB,IAAIT,EACzB,KAAK,gBAAkB,IAAIU,EAC3B,KAAK,oBAAsB,IAAIV,EAG/B,KAAK,MAAQ,IAAIU,EAAU,EAAG,mBAAoBJ,EAAO,GAAI,IAAIN,EAAS,EAAG,EAAG,CAAC,CAAE,EACnF,KAAK,aAAe,KAAK,MAAM,MAAK,EAAG,OAAM,EAG7C,KAAK,WAAa,IAAIW,EACtB,KAAK,gBAAkB,IAAIA,EAE3B,KAAK,OAAS,EACd,KAAK,WAAa,IAAIX,EAEtB,KAAK,aAAe,IAAIY,EACxB,KAAK,WAAa,IAAIA,EACtB,KAAK,aAAe,IAAIA,EAExB,KAAK,UAAY,IAAIA,EACrB,KAAK,QAAU,IAAIA,EACnB,KAAK,UAAY,IAAIA,EAErB,KAAK,YAAc,IAAIA,EACvB,KAAK,UAAY,IAAIA,EACrB,KAAK,YAAc,IAAIA,EAEvB,KAAK,gBAAkB,IAAIZ,EAC3B,KAAK,OAAS,IAAIY,EAClB,KAAK,mBAAqB,GAE1B,KAAK,UAAY,CAAA,EACjB,KAAK,kBAAoB,CAAA,EAEzB,KAAK,eAAiB,GAItB,KAAK,eAAiBC,GAAc,KAAM,IAAI,EAC9C,KAAK,eAAiBC,GAAc,KAAM,IAAI,EAC9C,KAAK,aAAeC,GAAY,KAAM,IAAI,EAC1C,KAAK,eAAiBC,GAAc,KAAM,IAAI,EAC9C,KAAK,cAAgBC,GAAa,KAAM,IAAI,EAC5C,KAAK,WAAaC,GAAU,KAAM,IAAI,EAEtC,KAAK,cAAgBC,GAAa,KAAM,IAAI,EAC5C,KAAK,aAAeC,GAAY,KAAM,IAAI,EAE1C,KAAK,aAAeC,GAAY,KAAM,IAAI,EAC1C,KAAK,aAAeC,GAAY,KAAM,IAAI,EAE1C,KAAK,sBAAwBC,GAAqB,KAAM,IAAI,EAC5D,KAAK,oBAAsBC,GAAmB,KAAM,IAAI,EAInD,KAAK,aAAe,MAExB,KAAK,QAAS,KAAK,UAAU,EAI9B,KAAK,OAAM,CAEb,CAEC,QAASC,EAAU,CAElB,MAAM,QAASA,CAAO,EAEtB,KAAK,WAAW,iBAAkB,cAAe,KAAK,cAAc,EACpE,KAAK,WAAW,iBAAkB,gBAAiB,KAAK,YAAY,EAEpE,KAAK,WAAW,iBAAkB,cAAe,KAAK,cAAc,EACpE,KAAK,WAAW,iBAAkB,QAAS,KAAK,cAAe,CAAE,QAAS,GAAO,EAEhE,KAAK,WAAW,YAAW,EACnC,iBAAkB,UAAW,KAAK,sBAAuB,CAAE,QAAS,GAAM,QAAS,GAAM,EAElG,KAAK,WAAW,MAAM,YAAc,MAEtC,CAEC,YAAa,CAEZ,KAAK,WAAW,oBAAqB,cAAe,KAAK,cAAc,EACvE,KAAK,WAAW,oBAAqB,cAAe,KAAK,cAAc,EACvE,KAAK,WAAW,oBAAqB,YAAa,KAAK,YAAY,EACnE,KAAK,WAAW,oBAAqB,gBAAiB,KAAK,YAAY,EAEvE,KAAK,WAAW,oBAAqB,QAAS,KAAK,aAAa,EAChE,KAAK,WAAW,oBAAqB,cAAe,KAAK,cAAc,EAEvE,KAAK,sBAAqB,EAET,KAAK,WAAW,YAAW,EACnC,oBAAqB,UAAW,KAAK,sBAAuB,CAAE,QAAS,GAAM,EAEtF,KAAK,WAAW,MAAM,YAAc,MAEtC,CAEC,SAAU,CAET,KAAK,WAAU,CAEjB,CAOC,eAAgB,CAEf,OAAO,KAAK,WAAW,GAEzB,CAOC,mBAAoB,CAEnB,OAAO,KAAK,WAAW,KAEzB,CAOC,aAAc,CAEb,OAAO,KAAK,OAAO,SAAS,WAAY,KAAK,MAAM,CAErD,CAQC,kBAAmBlB,EAAa,CAE/BA,EAAW,iBAAkB,UAAW,KAAK,UAAU,EACvD,KAAK,qBAAuBA,CAE9B,CAKC,uBAAwB,CAElB,KAAK,uBAAyB,OAElC,KAAK,qBAAqB,oBAAqB,UAAW,KAAK,UAAU,EACzE,KAAK,qBAAuB,KAI/B,CAKC,WAAY,CAEX,KAAK,QAAQ,KAAM,KAAK,MAAM,EAC9B,KAAK,UAAU,KAAM,KAAK,OAAO,QAAQ,EACzC,KAAK,MAAQ,KAAK,OAAO,IAE3B,CAMC,OAAQ,CAEP,KAAK,OAAO,KAAM,KAAK,OAAO,EAC9B,KAAK,OAAO,SAAS,KAAM,KAAK,SAAS,EACzC,KAAK,OAAO,KAAO,KAAK,MAExB,KAAK,OAAO,uBAAsB,EAClC,KAAK,cAAejB,CAAY,EAEhC,KAAK,OAAM,EAEX,KAAK,MAAQY,EAAO,IAEtB,CAEC,OAAQwB,EAAY,KAAO,CAE1B,MAAMC,EAAW,KAAK,OAAO,SAE7B5B,EAAG,KAAM4B,CAAQ,EAAG,IAAK,KAAK,MAAM,EAGpC5B,EAAG,gBAAiB,KAAK,KAAK,EAG9B,KAAK,WAAW,eAAgBA,CAAE,EAE7B,KAAK,YAAc,KAAK,QAAUG,EAAO,MAE7C,KAAK,YAAa,KAAK,sBAAuBwB,CAAS,CAAE,EAIrD,KAAK,eAET,KAAK,WAAW,OAAS,KAAK,gBAAgB,MAAQ,KAAK,cAC3D,KAAK,WAAW,KAAO,KAAK,gBAAgB,IAAM,KAAK,gBAIvD,KAAK,WAAW,OAAS,KAAK,gBAAgB,MAC9C,KAAK,WAAW,KAAO,KAAK,gBAAgB,KAM7C,IAAIE,EAAM,KAAK,gBACXC,EAAM,KAAK,gBAEV,SAAUD,CAAG,GAAM,SAAUC,CAAG,IAE/BD,EAAM,CAAE,KAAK,GAAKA,GAAO3B,EAAkB2B,EAAM,KAAK,KAAKA,GAAO3B,GAElE4B,EAAM,CAAE,KAAK,GAAKA,GAAO5B,EAAkB4B,EAAM,KAAK,KAAKA,GAAO5B,GAElE2B,GAAOC,EAEX,KAAK,WAAW,MAAQ,KAAK,IAAKD,EAAK,KAAK,IAAKC,EAAK,KAAK,WAAW,KAAK,CAAE,EAI7E,KAAK,WAAW,MAAU,KAAK,WAAW,OAAUD,EAAMC,GAAQ,EACjE,KAAK,IAAKD,EAAK,KAAK,WAAW,KAAK,EACpC,KAAK,IAAKC,EAAK,KAAK,WAAW,KAAK,GAOvC,KAAK,WAAW,IAAM,KAAK,IAAK,KAAK,cAAe,KAAK,IAAK,KAAK,cAAe,KAAK,WAAW,GAAG,CAAE,EAEvG,KAAK,WAAW,SAAQ,EAKnB,KAAK,gBAAkB,GAE3B,KAAK,OAAO,gBAAiB,KAAK,WAAY,KAAK,aAAa,EAIhE,KAAK,OAAO,IAAK,KAAK,UAAU,EAKjC,KAAK,OAAO,IAAK,KAAK,MAAM,EAC5B,KAAK,OAAO,YAAa,KAAK,gBAAiB,KAAK,eAAe,EACnE,KAAK,OAAO,IAAK,KAAK,MAAM,EAE5B,IAAIC,EAAc,GAGlB,GAAK,KAAK,cAAgB,KAAK,oBAAsB,KAAK,OAAO,qBAEhE,KAAK,WAAW,OAAS,KAAK,eAAgB,KAAK,WAAW,MAAM,MAE9D,CAEN,MAAMC,EAAa,KAAK,WAAW,OACnC,KAAK,WAAW,OAAS,KAAK,eAAgB,KAAK,WAAW,OAAS,KAAK,MAAM,EAClFD,EAAcC,GAAc,KAAK,WAAW,MAE/C,CA2BE,GAzBAhC,EAAG,iBAAkB,KAAK,UAAU,EAGpCA,EAAG,gBAAiB,KAAK,YAAY,EAErC4B,EAAS,KAAM,KAAK,MAAM,EAAG,IAAK5B,CAAE,EAEpC,KAAK,OAAO,OAAQ,KAAK,MAAM,EAE1B,KAAK,gBAAkB,IAE3B,KAAK,gBAAgB,OAAW,EAAI,KAAK,cACzC,KAAK,gBAAgB,KAAS,EAAI,KAAK,cAEvC,KAAK,WAAW,eAAgB,EAAI,KAAK,aAAa,IAItD,KAAK,gBAAgB,IAAK,EAAG,EAAG,CAAC,EAEjC,KAAK,WAAW,IAAK,EAAG,EAAG,CAAC,GAKxB,KAAK,cAAgB,KAAK,mBAAqB,CAEnD,IAAIiC,EAAY,KAChB,GAAK,KAAK,OAAO,oBAAsB,CAItC,MAAMD,EAAahC,EAAG,OAAM,EAC5BiC,EAAY,KAAK,eAAgBD,EAAa,KAAK,MAAM,EAEzD,MAAME,EAAcF,EAAaC,EACjC,KAAK,OAAO,SAAS,gBAAiB,KAAK,gBAAiBC,CAAW,EACvE,KAAK,OAAO,kBAAiB,EAE7BH,EAAc,CAAC,CAAEG,CAErB,SAAe,KAAK,OAAO,qBAAuB,CAG9C,MAAMC,EAAc,IAAIlC,EAAS,KAAK,OAAO,EAAG,KAAK,OAAO,EAAG,CAAC,EAChEkC,EAAY,UAAW,KAAK,MAAM,EAElC,MAAMC,EAAW,KAAK,OAAO,KAC7B,KAAK,OAAO,KAAO,KAAK,IAAK,KAAK,QAAS,KAAK,IAAK,KAAK,QAAS,KAAK,OAAO,KAAO,KAAK,OAAQ,EACnG,KAAK,OAAO,uBAAsB,EAElCL,EAAcK,IAAa,KAAK,OAAO,KAEvC,MAAMC,EAAa,IAAIpC,EAAS,KAAK,OAAO,EAAG,KAAK,OAAO,EAAG,CAAC,EAC/DoC,EAAW,UAAW,KAAK,MAAM,EAEjC,KAAK,OAAO,SAAS,IAAKA,CAAU,EAAG,IAAKF,CAAW,EACvD,KAAK,OAAO,kBAAiB,EAE7BF,EAAYjC,EAAG,OAAM,CAEzB,MAEI,QAAQ,KAAM,yFAAyF,EACvG,KAAK,aAAe,GAKhBiC,IAAc,OAEb,KAAK,mBAGT,KAAK,OAAO,IAAK,EAAG,EAAG,EAAG,EACxB,mBAAoB,KAAK,OAAO,MAAM,EACtC,eAAgBA,CAAS,EACzB,IAAK,KAAK,OAAO,QAAQ,GAK3BvC,EAAK,OAAO,KAAM,KAAK,OAAO,QAAQ,EACtCA,EAAK,UAAU,IAAK,EAAG,EAAG,EAAG,EAAG,mBAAoB,KAAK,OAAO,MAAM,EAIjE,KAAK,IAAK,KAAK,OAAO,GAAG,IAAKA,EAAK,UAAW,EAAKI,GAEvD,KAAK,OAAO,OAAQ,KAAK,MAAM,GAI/BF,EAAO,8BAA+B,KAAK,OAAO,GAAI,KAAK,MAAM,EACjEF,EAAK,eAAgBE,EAAQ,KAAK,MAAM,IAQ9C,SAAc,KAAK,OAAO,qBAAuB,CAE9C,MAAMwC,EAAW,KAAK,OAAO,KAC7B,KAAK,OAAO,KAAO,KAAK,IAAK,KAAK,QAAS,KAAK,IAAK,KAAK,QAAS,KAAK,OAAO,KAAO,KAAK,OAAQ,EAE9FA,IAAa,KAAK,OAAO,OAE7B,KAAK,OAAO,uBAAsB,EAClCL,EAAc,GAIlB,CASE,OAPA,KAAK,OAAS,EACd,KAAK,mBAAqB,GAMrBA,GACJ,KAAK,cAAc,kBAAmB,KAAK,OAAO,QAAQ,EAAK3B,GAC/D,GAAM,EAAI,KAAK,gBAAgB,IAAK,KAAK,OAAO,UAAU,GAAOA,GACjE,KAAK,oBAAoB,kBAAmB,KAAK,MAAM,EAAKA,GAE5D,KAAK,cAAeb,CAAY,EAEhC,KAAK,cAAc,KAAM,KAAK,OAAO,QAAQ,EAC7C,KAAK,gBAAgB,KAAM,KAAK,OAAO,UAAU,EACjD,KAAK,oBAAoB,KAAM,KAAK,MAAM,EAEnC,IAID,EAET,CAEC,sBAAuBoC,EAAY,CAElC,OAAKA,IAAc,KAETzB,EAAS,GAAK,KAAK,gBAAoByB,EAIzCzB,EAAS,GAAK,GAAK,KAAK,eAIlC,CAEC,cAAeoC,EAAQ,CAEtB,MAAMC,EAAkB,KAAK,IAAKD,EAAQ,GAAI,EAC9C,OAAO,KAAK,IAAK,IAAM,KAAK,UAAYC,CAAe,CAEzD,CAEC,YAAaC,EAAQ,CAEpB,KAAK,gBAAgB,OAASA,CAEhC,CAEC,UAAWA,EAAQ,CAElB,KAAK,gBAAgB,KAAOA,CAE9B,CAEC,SAAUC,EAAUC,EAAe,CAElC1C,EAAG,oBAAqB0C,EAAc,GACtC1C,EAAG,eAAgB,CAAEyC,CAAQ,EAE7B,KAAK,WAAW,IAAKzC,CAAE,CAEzB,CAEC,OAAQyC,EAAUC,EAAe,CAE3B,KAAK,qBAAuB,GAEhC1C,EAAG,oBAAqB0C,EAAc,CAAC,GAIvC1C,EAAG,oBAAqB0C,EAAc,CAAC,EACvC1C,EAAG,aAAc,KAAK,OAAO,GAAIA,CAAE,GAIpCA,EAAG,eAAgByC,CAAQ,EAE3B,KAAK,WAAW,IAAKzC,CAAE,CAEzB,CAGC,KAAM2C,EAAQC,EAAS,CAEtB,MAAMlB,EAAU,KAAK,WAErB,GAAK,KAAK,OAAO,oBAAsB,CAGtC,MAAME,EAAW,KAAK,OAAO,SAC7B5B,EAAG,KAAM4B,CAAQ,EAAG,IAAK,KAAK,MAAM,EACpC,IAAIiB,EAAiB7C,EAAG,OAAM,EAG9B6C,GAAkB,KAAK,IAAO,KAAK,OAAO,IAAM,EAAM,KAAK,GAAK,GAAK,EAGrE,KAAK,SAAU,EAAIF,EAASE,EAAiBnB,EAAQ,aAAc,KAAK,OAAO,MAAM,EACrF,KAAK,OAAQ,EAAIkB,EAASC,EAAiBnB,EAAQ,aAAc,KAAK,OAAO,MAAM,CAEtF,MAAc,KAAK,OAAO,sBAGvB,KAAK,SAAUiB,GAAW,KAAK,OAAO,MAAQ,KAAK,OAAO,MAAS,KAAK,OAAO,KAAOjB,EAAQ,YAAa,KAAK,OAAO,MAAM,EAC7H,KAAK,OAAQkB,GAAW,KAAK,OAAO,IAAM,KAAK,OAAO,QAAW,KAAK,OAAO,KAAOlB,EAAQ,aAAc,KAAK,OAAO,MAAM,IAK5H,QAAQ,KAAM,8EAA8E,EAC5F,KAAK,UAAY,GAIpB,CAEC,UAAWoB,EAAa,CAElB,KAAK,OAAO,qBAAuB,KAAK,OAAO,qBAEnD,KAAK,QAAUA,GAIf,QAAQ,KAAM,qFAAqF,EACnG,KAAK,WAAa,GAIrB,CAEC,SAAUA,EAAa,CAEjB,KAAK,OAAO,qBAAuB,KAAK,OAAO,qBAEnD,KAAK,QAAUA,GAIf,QAAQ,KAAM,qFAAqF,EACnG,KAAK,WAAa,GAIrB,CAEC,sBAAuBC,EAAGC,EAAI,CAE7B,GAAK,CAAE,KAAK,aAEX,OAID,KAAK,mBAAqB,GAE1B,MAAMC,EAAO,KAAK,WAAW,sBAAqB,EAC5CC,EAAKH,EAAIE,EAAK,KACdE,EAAKH,EAAIC,EAAK,IACdG,EAAIH,EAAK,MACTI,EAAIJ,EAAK,OAEf,KAAK,OAAO,EAAMC,EAAKE,EAAM,EAAI,EACjC,KAAK,OAAO,EAAI,EAAID,EAAKE,GAAM,EAAI,EAEnC,KAAK,gBAAgB,IAAK,KAAK,OAAO,EAAG,KAAK,OAAO,EAAG,CAAC,EAAG,UAAW,KAAK,QAAS,IAAK,KAAK,OAAO,QAAQ,EAAG,UAAS,CAE5H,CAEC,eAAgBC,EAAO,CAEtB,OAAO,KAAK,IAAK,KAAK,YAAa,KAAK,IAAK,KAAK,YAAaA,EAAM,CAEvE,CAMC,uBAAwBC,EAAQ,CAE/B,KAAK,aAAa,IAAKA,EAAM,QAASA,EAAM,OAAO,CAErD,CAEC,sBAAuBA,EAAQ,CAE9B,KAAK,sBAAuBA,EAAM,QAASA,EAAM,OAAO,EACxD,KAAK,YAAY,IAAKA,EAAM,QAASA,EAAM,OAAO,CAEpD,CAEC,oBAAqBA,EAAQ,CAE5B,KAAK,UAAU,IAAKA,EAAM,QAASA,EAAM,OAAO,CAElD,CAEC,uBAAwBA,EAAQ,CAE/B,KAAK,WAAW,IAAKA,EAAM,QAASA,EAAM,OAAO,EAEjD,KAAK,aAAa,WAAY,KAAK,WAAY,KAAK,cAAe,eAAgB,KAAK,WAAW,EAEnG,MAAM7B,EAAU,KAAK,WAErB,KAAK,YAAaxB,EAAS,KAAK,aAAa,EAAIwB,EAAQ,cAEzD,KAAK,UAAWxB,EAAS,KAAK,aAAa,EAAIwB,EAAQ,YAAY,EAEnE,KAAK,aAAa,KAAM,KAAK,UAAU,EAEvC,KAAK,OAAM,CAEb,CAEC,sBAAuB6B,EAAQ,CAE9B,KAAK,UAAU,IAAKA,EAAM,QAASA,EAAM,OAAO,EAEhD,KAAK,YAAY,WAAY,KAAK,UAAW,KAAK,WAAW,EAExD,KAAK,YAAY,EAAI,EAEzB,KAAK,UAAW,KAAK,cAAe,KAAK,YAAY,EAAG,EAE7C,KAAK,YAAY,EAAI,GAEhC,KAAK,SAAU,KAAK,cAAe,KAAK,YAAY,EAAG,EAIxD,KAAK,YAAY,KAAM,KAAK,SAAS,EAErC,KAAK,OAAM,CAEb,CAEC,oBAAqBA,EAAQ,CAE5B,KAAK,QAAQ,IAAKA,EAAM,QAASA,EAAM,OAAO,EAE9C,KAAK,UAAU,WAAY,KAAK,QAAS,KAAK,WAAY,eAAgB,KAAK,QAAQ,EAEvF,KAAK,KAAM,KAAK,UAAU,EAAG,KAAK,UAAU,CAAC,EAE7C,KAAK,UAAU,KAAM,KAAK,OAAO,EAEjC,KAAK,OAAM,CAEb,CAEC,kBAAmBA,EAAQ,CAE1B,KAAK,sBAAuBA,EAAM,QAASA,EAAM,OAAO,EAEnDA,EAAM,OAAS,EAEnB,KAAK,SAAU,KAAK,cAAeA,EAAM,MAAM,CAAE,EAEtCA,EAAM,OAAS,GAE1B,KAAK,UAAW,KAAK,cAAeA,EAAM,MAAM,CAAE,EAInD,KAAK,OAAM,CAEb,CAEC,eAAgBA,EAAQ,CAEvB,IAAIC,EAAc,GAElB,OAASD,EAAM,KAAI,CAElB,KAAK,KAAK,KAAK,GAETA,EAAM,SAAWA,EAAM,SAAWA,EAAM,SAEvC,KAAK,cAET,KAAK,UAAWrD,EAAS,KAAK,eAAiB,KAAK,WAAW,YAAY,EAMvE,KAAK,WAET,KAAK,KAAM,EAAG,KAAK,WAAW,EAMhCsD,EAAc,GACd,MAED,KAAK,KAAK,KAAK,OAETD,EAAM,SAAWA,EAAM,SAAWA,EAAM,SAEvC,KAAK,cAET,KAAK,UAAW,CAAErD,EAAS,KAAK,eAAiB,KAAK,WAAW,YAAY,EAMzE,KAAK,WAET,KAAK,KAAM,EAAG,CAAE,KAAK,WAAW,EAMlCsD,EAAc,GACd,MAED,KAAK,KAAK,KAAK,KAETD,EAAM,SAAWA,EAAM,SAAWA,EAAM,SAEvC,KAAK,cAET,KAAK,YAAarD,EAAS,KAAK,eAAiB,KAAK,WAAW,YAAY,EAMzE,KAAK,WAET,KAAK,KAAM,KAAK,YAAa,CAAC,EAMhCsD,EAAc,GACd,MAED,KAAK,KAAK,KAAK,MAETD,EAAM,SAAWA,EAAM,SAAWA,EAAM,SAEvC,KAAK,cAET,KAAK,YAAa,CAAErD,EAAS,KAAK,eAAiB,KAAK,WAAW,YAAY,EAM3E,KAAK,WAET,KAAK,KAAM,CAAE,KAAK,YAAa,CAAC,EAMlCsD,EAAc,GACd,KAEJ,CAEOA,IAGJD,EAAM,eAAc,EAEpB,KAAK,OAAM,EAKd,CAEC,wBAAyBA,EAAQ,CAEhC,GAAK,KAAK,UAAU,SAAW,EAE9B,KAAK,aAAa,IAAKA,EAAM,MAAOA,EAAM,KAAK,MAEzC,CAEN,MAAM3B,EAAW,KAAK,0BAA2B2B,CAAK,EAEhDR,EAAI,IAAQQ,EAAM,MAAQ3B,EAAS,GACnCoB,EAAI,IAAQO,EAAM,MAAQ3B,EAAS,GAEzC,KAAK,aAAa,IAAKmB,EAAGC,CAAC,CAE9B,CAEA,CAEC,qBAAsBO,EAAQ,CAE7B,GAAK,KAAK,UAAU,SAAW,EAE9B,KAAK,UAAU,IAAKA,EAAM,MAAOA,EAAM,KAAK,MAEtC,CAEN,MAAM3B,EAAW,KAAK,0BAA2B2B,CAAK,EAEhDR,EAAI,IAAQQ,EAAM,MAAQ3B,EAAS,GACnCoB,EAAI,IAAQO,EAAM,MAAQ3B,EAAS,GAEzC,KAAK,UAAU,IAAKmB,EAAGC,CAAC,CAE3B,CAEA,CAEC,uBAAwBO,EAAQ,CAE/B,MAAM3B,EAAW,KAAK,0BAA2B2B,CAAK,EAEhDL,EAAKK,EAAM,MAAQ3B,EAAS,EAC5BuB,EAAKI,EAAM,MAAQ3B,EAAS,EAE5Ba,EAAW,KAAK,KAAMS,EAAKA,EAAKC,EAAKA,CAAE,EAE7C,KAAK,YAAY,IAAK,EAAGV,CAAQ,CAEnC,CAEC,0BAA2Bc,EAAQ,CAE7B,KAAK,YAAa,KAAK,uBAAwBA,CAAK,EAEpD,KAAK,WAAY,KAAK,qBAAsBA,CAAK,CAExD,CAEC,6BAA8BA,EAAQ,CAEhC,KAAK,YAAa,KAAK,uBAAwBA,CAAK,EAEpD,KAAK,cAAe,KAAK,wBAAyBA,CAAK,CAE9D,CAEC,uBAAwBA,EAAQ,CAE/B,GAAK,KAAK,UAAU,QAAU,EAE7B,KAAK,WAAW,IAAKA,EAAM,MAAOA,EAAM,KAAK,MAEvC,CAEN,MAAM3B,EAAW,KAAK,0BAA2B2B,CAAK,EAEhDR,EAAI,IAAQQ,EAAM,MAAQ3B,EAAS,GACnCoB,EAAI,IAAQO,EAAM,MAAQ3B,EAAS,GAEzC,KAAK,WAAW,IAAKmB,EAAGC,CAAC,CAE5B,CAEE,KAAK,aAAa,WAAY,KAAK,WAAY,KAAK,cAAe,eAAgB,KAAK,WAAW,EAEnG,MAAMtB,EAAU,KAAK,WAErB,KAAK,YAAaxB,EAAS,KAAK,aAAa,EAAIwB,EAAQ,cAEzD,KAAK,UAAWxB,EAAS,KAAK,aAAa,EAAIwB,EAAQ,YAAY,EAEnE,KAAK,aAAa,KAAM,KAAK,UAAU,CAEzC,CAEC,oBAAqB6B,EAAQ,CAE5B,GAAK,KAAK,UAAU,SAAW,EAE9B,KAAK,QAAQ,IAAKA,EAAM,MAAOA,EAAM,KAAK,MAEpC,CAEN,MAAM3B,EAAW,KAAK,0BAA2B2B,CAAK,EAEhDR,EAAI,IAAQQ,EAAM,MAAQ3B,EAAS,GACnCoB,EAAI,IAAQO,EAAM,MAAQ3B,EAAS,GAEzC,KAAK,QAAQ,IAAKmB,EAAGC,CAAC,CAEzB,CAEE,KAAK,UAAU,WAAY,KAAK,QAAS,KAAK,WAAY,eAAgB,KAAK,QAAQ,EAEvF,KAAK,KAAM,KAAK,UAAU,EAAG,KAAK,UAAU,CAAC,EAE7C,KAAK,UAAU,KAAM,KAAK,OAAO,CAEnC,CAEC,sBAAuBO,EAAQ,CAE9B,MAAM3B,EAAW,KAAK,0BAA2B2B,CAAK,EAEhDL,EAAKK,EAAM,MAAQ3B,EAAS,EAC5BuB,EAAKI,EAAM,MAAQ3B,EAAS,EAE5Ba,EAAW,KAAK,KAAMS,EAAKA,EAAKC,EAAKA,CAAE,EAE7C,KAAK,UAAU,IAAK,EAAGV,CAAQ,EAE/B,KAAK,YAAY,IAAK,EAAG,KAAK,IAAK,KAAK,UAAU,EAAI,KAAK,YAAY,EAAG,KAAK,SAAS,CAAE,EAE1F,KAAK,UAAW,KAAK,YAAY,CAAC,EAElC,KAAK,YAAY,KAAM,KAAK,SAAS,EAErC,MAAMgB,GAAYF,EAAM,MAAQ3B,EAAS,GAAM,GACzC8B,GAAYH,EAAM,MAAQ3B,EAAS,GAAM,GAE/C,KAAK,sBAAuB6B,EAASC,CAAO,CAE9C,CAEC,yBAA0BH,EAAQ,CAE5B,KAAK,YAAa,KAAK,sBAAuBA,CAAK,EAEnD,KAAK,WAAY,KAAK,oBAAqBA,CAAK,CAEvD,CAEC,4BAA6BA,EAAQ,CAE/B,KAAK,YAAa,KAAK,sBAAuBA,CAAK,EAEnD,KAAK,cAAe,KAAK,uBAAwBA,CAAK,CAE7D,CAIC,YAAaA,EAAQ,CAEpB,KAAK,UAAU,KAAMA,EAAM,SAAS,CAEtC,CAEC,eAAgBA,EAAQ,CAEvB,OAAO,KAAK,kBAAmBA,EAAM,SAAS,EAE9C,QAAUI,EAAI,EAAGA,EAAI,KAAK,UAAU,OAAQA,IAE3C,GAAK,KAAK,UAAWA,CAAC,GAAMJ,EAAM,UAAY,CAE7C,KAAK,UAAU,OAAQI,EAAG,CAAC,EAC3B,MAEJ,CAIA,CAEC,mBAAoBJ,EAAQ,CAE3B,QAAUI,EAAI,EAAGA,EAAI,KAAK,UAAU,OAAQA,IAE3C,GAAK,KAAK,UAAWA,CAAC,GAAMJ,EAAM,UAAY,MAAO,GAItD,MAAO,EAET,CAEC,cAAeA,EAAQ,CAEtB,IAAI3B,EAAW,KAAK,kBAAmB2B,EAAM,SAAS,EAEjD3B,IAAa,SAEjBA,EAAW,IAAIf,EACf,KAAK,kBAAmB0C,EAAM,SAAS,EAAK3B,GAI7CA,EAAS,IAAK2B,EAAM,MAAOA,EAAM,KAAK,CAExC,CAEC,0BAA2BA,EAAQ,CAElC,MAAMK,EAAcL,EAAM,YAAc,KAAK,UAAW,CAAC,EAAO,KAAK,UAAW,CAAC,EAAK,KAAK,UAAW,CAAC,EAEvG,OAAO,KAAK,kBAAmBK,CAAS,CAE1C,CAIC,kBAAmBL,EAAQ,CAE1B,MAAMM,EAAON,EAAM,UAGbO,EAAW,CAChB,QAASP,EAAM,QACf,QAASA,EAAM,QACf,OAAQA,EAAM,MACjB,EAEE,OAASM,EAAI,CAEZ,IAAK,GACJC,EAAS,QAAU,GACnB,MAED,IAAK,GACJA,EAAS,QAAU,IACnB,KAEJ,CAGE,OAAKP,EAAM,SAAW,CAAE,KAAK,iBAE5BO,EAAS,QAAU,IAIbA,CAET,CAEA,CAEA,SAAS/C,GAAewC,EAAQ,CAE1B,KAAK,UAAY,KAEjB,KAAK,UAAU,SAAW,IAE9B,KAAK,WAAW,kBAAmBA,EAAM,SAAS,EAElD,KAAK,WAAW,iBAAkB,cAAe,KAAK,cAAc,EACpE,KAAK,WAAW,iBAAkB,YAAa,KAAK,YAAY,GAM5D,MAAK,mBAAoBA,KAI9B,KAAK,YAAaA,CAAK,EAElBA,EAAM,cAAgB,QAE1B,KAAK,cAAeA,CAAK,EAIzB,KAAK,aAAcA,CAAK,GAI1B,CAEA,SAASzC,GAAeyC,EAAQ,CAE1B,KAAK,UAAY,KAEjBA,EAAM,cAAgB,QAE1B,KAAK,aAAcA,CAAK,EAIxB,KAAK,aAAcA,CAAK,EAI1B,CAEA,SAASvC,GAAauC,EAAQ,CAI7B,OAFA,KAAK,eAAgBA,CAAK,EAEjB,KAAK,UAAU,OAAM,CAE7B,IAAK,GAEJ,KAAK,WAAW,sBAAuBA,EAAM,SAAS,EAEtD,KAAK,WAAW,oBAAqB,cAAe,KAAK,cAAc,EACvE,KAAK,WAAW,oBAAqB,YAAa,KAAK,YAAY,EAEnE,KAAK,cAAe9D,EAAS,EAE7B,KAAK,MAAQU,EAAO,KAEpB,MAED,IAAK,GAEJ,MAAMyD,EAAY,KAAK,UAAW,CAAC,EAC7BhC,EAAW,KAAK,kBAAmBgC,CAAS,EAGlD,KAAK,cAAe,CAAE,UAAWA,EAAW,MAAOhC,EAAS,EAAG,MAAOA,EAAS,CAAC,CAAE,EAElF,KAEH,CAEA,CAEA,SAASN,GAAaiC,EAAQ,CAE7B,IAAIQ,EAEJ,OAASR,EAAM,OAAM,CAEpB,IAAK,GAEJQ,EAAc,KAAK,aAAa,KAChC,MAED,IAAK,GAEJA,EAAc,KAAK,aAAa,OAChC,MAED,IAAK,GAEJA,EAAc,KAAK,aAAa,MAChC,MAED,QAECA,EAAc,EAEjB,CAEC,OAASA,EAAW,CAEnB,KAAKtD,EAAM,MAEV,GAAK,KAAK,aAAe,GAAQ,OAEjC,KAAK,sBAAuB8C,CAAK,EAEjC,KAAK,MAAQpD,EAAO,MAEpB,MAED,KAAKM,EAAM,OAEV,GAAK8C,EAAM,SAAWA,EAAM,SAAWA,EAAM,SAAW,CAEvD,GAAK,KAAK,YAAc,GAAQ,OAEhC,KAAK,oBAAqBA,CAAK,EAE/B,KAAK,MAAQpD,EAAO,GAExB,KAAU,CAEN,GAAK,KAAK,eAAiB,GAAQ,OAEnC,KAAK,uBAAwBoD,CAAK,EAElC,KAAK,MAAQpD,EAAO,MAExB,CAEG,MAED,KAAKM,EAAM,IAEV,GAAK8C,EAAM,SAAWA,EAAM,SAAWA,EAAM,SAAW,CAEvD,GAAK,KAAK,eAAiB,GAAQ,OAEnC,KAAK,uBAAwBA,CAAK,EAElC,KAAK,MAAQpD,EAAO,MAExB,KAAU,CAEN,GAAK,KAAK,YAAc,GAAQ,OAEhC,KAAK,oBAAqBoD,CAAK,EAE/B,KAAK,MAAQpD,EAAO,GAExB,CAEG,MAED,QAEC,KAAK,MAAQA,EAAO,IAEvB,CAEM,KAAK,QAAUA,EAAO,MAE1B,KAAK,cAAeX,CAAW,CAIjC,CAEA,SAAS+B,GAAagC,EAAQ,CAE7B,OAAS,KAAK,MAAK,CAElB,KAAKpD,EAAO,OAEX,GAAK,KAAK,eAAiB,GAAQ,OAEnC,KAAK,uBAAwBoD,CAAK,EAElC,MAED,KAAKpD,EAAO,MAEX,GAAK,KAAK,aAAe,GAAQ,OAEjC,KAAK,sBAAuBoD,CAAK,EAEjC,MAED,KAAKpD,EAAO,IAEX,GAAK,KAAK,YAAc,GAAQ,OAEhC,KAAK,oBAAqBoD,CAAK,EAE/B,KAEH,CAEA,CAEA,SAASrC,GAAcqC,EAAQ,CAEzB,KAAK,UAAY,IAAS,KAAK,aAAe,IAAS,KAAK,QAAUpD,EAAO,OAElFoD,EAAM,eAAc,EAEpB,KAAK,cAAe/D,CAAW,EAE/B,KAAK,kBAAmB,KAAK,kBAAmB+D,CAAK,CAAE,EAEvD,KAAK,cAAe9D,EAAS,EAE9B,CAEA,SAAS0B,GAAWoC,EAAQ,CAEtB,KAAK,UAAY,IAEtB,KAAK,eAAgBA,CAAK,CAE3B,CAEA,SAASnC,GAAcmC,EAAQ,CAI9B,OAFA,KAAK,cAAeA,CAAK,EAEhB,KAAK,UAAU,OAAM,CAE7B,IAAK,GAEJ,OAAS,KAAK,QAAQ,IAAG,CAExB,KAAK7C,EAAM,OAEV,GAAK,KAAK,eAAiB,GAAQ,OAEnC,KAAK,wBAAyB6C,CAAK,EAEnC,KAAK,MAAQpD,EAAO,aAEpB,MAED,KAAKO,EAAM,IAEV,GAAK,KAAK,YAAc,GAAQ,OAEhC,KAAK,qBAAsB6C,CAAK,EAEhC,KAAK,MAAQpD,EAAO,UAEpB,MAED,QAEC,KAAK,MAAQA,EAAO,IAEzB,CAEG,MAED,IAAK,GAEJ,OAAS,KAAK,QAAQ,IAAG,CAExB,KAAKO,EAAM,UAEV,GAAK,KAAK,aAAe,IAAS,KAAK,YAAc,GAAQ,OAE7D,KAAK,0BAA2B6C,CAAK,EAErC,KAAK,MAAQpD,EAAO,gBAEpB,MAED,KAAKO,EAAM,aAEV,GAAK,KAAK,aAAe,IAAS,KAAK,eAAiB,GAAQ,OAEhE,KAAK,6BAA8B6C,CAAK,EAExC,KAAK,MAAQpD,EAAO,mBAEpB,MAED,QAEC,KAAK,MAAQA,EAAO,IAEzB,CAEG,MAED,QAEC,KAAK,MAAQA,EAAO,IAEvB,CAEM,KAAK,QAAUA,EAAO,MAE1B,KAAK,cAAeX,CAAW,CAIjC,CAEA,SAAS6B,GAAakC,EAAQ,CAI7B,OAFA,KAAK,cAAeA,CAAK,EAEhB,KAAK,MAAK,CAElB,KAAKpD,EAAO,aAEX,GAAK,KAAK,eAAiB,GAAQ,OAEnC,KAAK,uBAAwBoD,CAAK,EAElC,KAAK,OAAM,EAEX,MAED,KAAKpD,EAAO,UAEX,GAAK,KAAK,YAAc,GAAQ,OAEhC,KAAK,oBAAqBoD,CAAK,EAE/B,KAAK,OAAM,EAEX,MAED,KAAKpD,EAAO,gBAEX,GAAK,KAAK,aAAe,IAAS,KAAK,YAAc,GAAQ,OAE7D,KAAK,yBAA0BoD,CAAK,EAEpC,KAAK,OAAM,EAEX,MAED,KAAKpD,EAAO,mBAEX,GAAK,KAAK,aAAe,IAAS,KAAK,eAAiB,GAAQ,OAEhE,KAAK,4BAA6BoD,CAAK,EAEvC,KAAK,OAAM,EAEX,MAED,QAEC,KAAK,MAAQpD,EAAO,IAEvB,CAEA,CAEA,SAASc,GAAesC,EAAQ,CAE1B,KAAK,UAAY,IAEtBA,EAAM,eAAc,CAErB,CAEA,SAAS/B,GAAsB+B,EAAQ,CAEjCA,EAAM,MAAQ,YAElB,KAAK,eAAiB,GAEL,KAAK,WAAW,YAAW,EAEnC,iBAAkB,QAAS,KAAK,oBAAqB,CAAE,QAAS,GAAM,QAAS,GAAM,EAIhG,CAEA,SAAS9B,GAAoB8B,EAAQ,CAE/BA,EAAM,MAAQ,YAElB,KAAK,eAAiB,GAEL,KAAK,WAAW,YAAW,EAEnC,oBAAqB,QAAS,KAAK,oBAAqB,CAAE,QAAS,GAAM,QAAS,GAAM,EAInG,CCtzDA,MAAMS,EAAa,CAElB,KAAM,aAEN,SAAU,CAET,SAAY,CAAE,MAAO,IAAI,EACzB,QAAW,CAAE,MAAO,CAAG,CAEzB,EAEC,aAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWxB,eAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAgB3B,EClCA,MAAMC,CAAK,CAKV,aAAc,CASb,KAAK,OAAS,GAQd,KAAK,QAAU,GAQf,KAAK,UAAY,GAQjB,KAAK,MAAQ,GASb,KAAK,eAAiB,EAExB,CASC,SAA+B,CAAA,CAc/B,QAAyE,CAExE,QAAQ,MAAO,4DAA4D,CAE7E,CAQC,SAAU,CAAA,CAEX,CAIA,MAAMC,GAAU,IAAIC,GAAoB,GAAK,EAAG,EAAG,GAAK,EAAG,CAAC,EAI5D,MAAMC,WAAmCC,CAAe,CAEvD,aAAc,CAEb,MAAK,EAEL,KAAK,aAAc,WAAY,IAAIC,EAAwB,CAAE,GAAK,EAAG,EAAG,GAAK,GAAK,EAAG,EAAG,GAAK,CAAC,EAAI,EAAG,EACrG,KAAK,aAAc,KAAM,IAAIA,EAAwB,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,CAAC,EAAI,CAAC,CAAE,CAEhF,CAEA,CAEA,MAAMC,GAAY,IAAIH,GAetB,MAAMI,CAAe,CAOpB,YAAaC,EAAW,CAEvB,KAAK,MAAQ,IAAIC,EAAMH,GAAWE,CAAQ,CAE5C,CAMC,SAAU,CAET,KAAK,MAAM,SAAS,QAAO,CAE7B,CAOC,OAAQE,EAAW,CAElBA,EAAS,OAAQ,KAAK,MAAOT,EAAO,CAEtC,CAOC,IAAI,UAAW,CAEd,OAAO,KAAK,MAAM,QAEpB,CAEC,IAAI,SAAUU,EAAQ,CAErB,KAAK,MAAM,SAAWA,CAExB,CAEA,CCzKA,MAAMC,WAAmBZ,CAAK,CAU7B,YAAaa,EAAQC,EAAY,WAAa,CAE7C,MAAK,EAQL,KAAK,UAAYA,EAOjB,KAAK,SAAW,KAOhB,KAAK,SAAW,KAEXD,aAAkBE,GAEtB,KAAK,SAAWF,EAAO,SAEvB,KAAK,SAAWA,GAELA,IAEX,KAAK,SAAWG,EAAc,MAAOH,EAAO,QAAQ,EAEpD,KAAK,SAAW,IAAIE,EAAgB,CAEnC,KAAQF,EAAO,OAAS,OAAcA,EAAO,KAAO,cACpD,QAAS,OAAO,OAAQ,CAAA,EAAIA,EAAO,OAAO,EAC1C,SAAU,KAAK,SACf,aAAcA,EAAO,aACrB,eAAgBA,EAAO,cAE3B,CAAI,GAMF,KAAK,QAAU,IAAIN,EAAgB,KAAK,QAAQ,CAElD,CAaC,OAAQG,EAAUO,EAAaC,EAA0C,CAEnE,KAAK,SAAU,KAAK,SAAS,IAEjC,KAAK,SAAU,KAAK,SAAS,EAAG,MAAQA,EAAW,SAIpD,KAAK,QAAQ,SAAW,KAAK,SAExB,KAAK,gBAETR,EAAS,gBAAiB,IAAI,EAC9B,KAAK,QAAQ,OAAQA,CAAQ,IAI7BA,EAAS,gBAAiBO,CAAW,EAEhC,KAAK,OAAQP,EAAS,MAAOA,EAAS,eAAgBA,EAAS,eAAgBA,EAAS,gBAAgB,EAC7G,KAAK,QAAQ,OAAQA,CAAQ,EAIhC,CAMC,SAAU,CAET,KAAK,SAAS,QAAO,EAErB,KAAK,QAAQ,QAAO,CAEtB,CAEA,CCpHA,MAAMS,UAAiBnB,CAAK,CAQ3B,YAAaoB,EAAOC,EAAS,CAE5B,MAAK,EAOL,KAAK,MAAQD,EAOb,KAAK,OAASC,EAQd,KAAK,MAAQ,GAQb,KAAK,UAAY,GAQjB,KAAK,QAAU,EAEjB,CAaC,OAAQX,EAAUO,EAAaC,EAA0C,CAExE,MAAMI,EAAUZ,EAAS,WAAU,EAC7Ba,EAAQb,EAAS,MAIvBa,EAAM,QAAQ,MAAM,QAAS,EAAK,EAClCA,EAAM,QAAQ,MAAM,QAAS,EAAK,EAIlCA,EAAM,QAAQ,MAAM,UAAW,EAAI,EACnCA,EAAM,QAAQ,MAAM,UAAW,EAAI,EAInC,IAAIC,EAAYC,EAEX,KAAK,SAETD,EAAa,EACbC,EAAa,IAIbD,EAAa,EACbC,EAAa,GAIdF,EAAM,QAAQ,QAAQ,QAAS,EAAI,EACnCA,EAAM,QAAQ,QAAQ,MAAOD,EAAQ,QAASA,EAAQ,QAASA,EAAQ,OAAO,EAC9EC,EAAM,QAAQ,QAAQ,QAASD,EAAQ,OAAQE,EAAY,UAAU,EACrED,EAAM,QAAQ,QAAQ,SAAUE,CAAU,EAC1CF,EAAM,QAAQ,QAAQ,UAAW,EAAI,EAIrCb,EAAS,gBAAiBQ,CAAU,EAC/B,KAAK,OAAQR,EAAS,MAAK,EAChCA,EAAS,OAAQ,KAAK,MAAO,KAAK,MAAM,EAExCA,EAAS,gBAAiBO,CAAW,EAChC,KAAK,OAAQP,EAAS,MAAK,EAChCA,EAAS,OAAQ,KAAK,MAAO,KAAK,MAAM,EAIxCa,EAAM,QAAQ,MAAM,UAAW,EAAK,EACpCA,EAAM,QAAQ,MAAM,UAAW,EAAK,EAEpCA,EAAM,QAAQ,MAAM,QAAS,EAAI,EACjCA,EAAM,QAAQ,MAAM,QAAS,EAAI,EAIjCA,EAAM,QAAQ,QAAQ,UAAW,EAAK,EACtCA,EAAM,QAAQ,QAAQ,QAASD,EAAQ,MAAO,EAAG,YACjDC,EAAM,QAAQ,QAAQ,MAAOD,EAAQ,KAAMA,EAAQ,KAAMA,EAAQ,IAAI,EACrEC,EAAM,QAAQ,QAAQ,UAAW,EAAI,CAEvC,CAEA,CAYA,MAAMG,WAAsB1B,CAAK,CAKhC,aAAc,CAEb,MAAK,EAQL,KAAK,UAAY,EAEnB,CAaC,OAAQU,EAAiE,CAExEA,EAAS,MAAM,QAAQ,QAAQ,UAAW,EAAK,EAC/CA,EAAS,MAAM,QAAQ,QAAQ,QAAS,EAAK,CAE/C,CAEA,CCvJA,MAAMiB,EAAe,CAUpB,YAAajB,EAAUkB,EAAe,CAWrC,GAJA,KAAK,SAAWlB,EAEhB,KAAK,YAAcA,EAAS,cAAa,EAEpCkB,IAAiB,OAAY,CAEjC,MAAMC,EAAOnB,EAAS,QAAS,IAAI9D,CAAS,EAC5C,KAAK,OAASiF,EAAK,MACnB,KAAK,QAAUA,EAAK,OAEpBD,EAAe,IAAIE,EAAmB,KAAK,OAAS,KAAK,YAAa,KAAK,QAAU,KAAK,YAAa,CAAE,KAAMC,CAAa,CAAE,EAC9HH,EAAa,QAAQ,KAAO,oBAE/B,MAEG,KAAK,OAASA,EAAa,MAC3B,KAAK,QAAUA,EAAa,OAI7B,KAAK,cAAgBA,EACrB,KAAK,cAAgBA,EAAa,MAAK,EACvC,KAAK,cAAc,QAAQ,KAAO,qBAQlC,KAAK,YAAc,KAAK,cAQxB,KAAK,WAAa,KAAK,cAQvB,KAAK,eAAiB,GAOtB,KAAK,OAAS,CAAA,EAQd,KAAK,SAAW,IAAIhB,GAAYb,CAAU,EAC1C,KAAK,SAAS,SAAS,SAAWiC,EAQlC,KAAK,MAAQ,IAAIC,EAEnB,CAKC,aAAc,CAEb,MAAMC,EAAM,KAAK,WACjB,KAAK,WAAa,KAAK,YACvB,KAAK,YAAcA,CAErB,CAOC,QAASC,EAAO,CAEf,KAAK,OAAO,KAAMA,CAAI,EACtBA,EAAK,QAAS,KAAK,OAAS,KAAK,YAAa,KAAK,QAAU,KAAK,WAAW,CAE/E,CAQC,WAAYA,EAAMC,EAAQ,CAEzB,KAAK,OAAO,OAAQA,EAAO,EAAGD,CAAI,EAClCA,EAAK,QAAS,KAAK,OAAS,KAAK,YAAa,KAAK,QAAU,KAAK,WAAW,CAE/E,CAOC,WAAYA,EAAO,CAElB,MAAMC,EAAQ,KAAK,OAAO,QAASD,CAAI,EAElCC,IAAU,IAEd,KAAK,OAAO,OAAQA,EAAO,CAAC,CAI/B,CAQC,kBAAmBC,EAAY,CAE9B,QAAU3C,EAAI2C,EAAY,EAAG3C,EAAI,KAAK,OAAO,OAAQA,IAEpD,GAAK,KAAK,OAAQA,CAAC,EAAG,QAErB,MAAO,GAMT,MAAO,EAET,CAQC,OAAQhC,EAAY,CAIdA,IAAc,SAElBA,EAAY,KAAK,MAAM,SAAQ,GAIhC,MAAM4E,EAAsB,KAAK,SAAS,gBAAe,EAEzD,IAAIC,EAAa,GAEjB,QAAU7C,EAAI,EAAG8C,EAAK,KAAK,OAAO,OAAQ9C,EAAI8C,EAAI9C,IAAO,CAExD,MAAMyC,EAAO,KAAK,OAAQzC,CAAC,EAE3B,GAAKyC,EAAK,UAAY,GAKtB,IAHAA,EAAK,eAAmB,KAAK,gBAAkB,KAAK,kBAAmBzC,GACvEyC,EAAK,OAAQ,KAAK,SAAU,KAAK,YAAa,KAAK,WAAYzE,EAAW6E,CAAU,EAE/EJ,EAAK,UAAY,CAErB,GAAKI,EAAa,CAEjB,MAAMjB,EAAU,KAAK,SAAS,WAAU,EAClCmB,EAAU,KAAK,SAAS,MAAM,QAAQ,QAG5CA,EAAQ,QAASnB,EAAQ,SAAU,EAAG,UAAU,EAEhD,KAAK,SAAS,OAAQ,KAAK,SAAU,KAAK,YAAa,KAAK,WAAY5D,CAAS,EAGjF+E,EAAQ,QAASnB,EAAQ,MAAO,EAAG,UAAU,CAElD,CAEI,KAAK,YAAW,CAEpB,CAEQH,IAAa,SAEZgB,aAAgBhB,EAEpBoB,EAAa,GAEFJ,aAAgBT,KAE3Ba,EAAa,KAMlB,CAEE,KAAK,SAAS,gBAAiBD,CAAmB,CAEpD,CAQC,MAAOV,EAAe,CAErB,GAAKA,IAAiB,OAAY,CAEjC,MAAMC,EAAO,KAAK,SAAS,QAAS,IAAIjF,CAAS,EACjD,KAAK,YAAc,KAAK,SAAS,cAAa,EAC9C,KAAK,OAASiF,EAAK,MACnB,KAAK,QAAUA,EAAK,OAEpBD,EAAe,KAAK,cAAc,MAAK,EACvCA,EAAa,QAAS,KAAK,OAAS,KAAK,YAAa,KAAK,QAAU,KAAK,WAAW,CAExF,CAEE,KAAK,cAAc,QAAO,EAC1B,KAAK,cAAc,QAAO,EAC1B,KAAK,cAAgBA,EACrB,KAAK,cAAgBA,EAAa,MAAK,EAEvC,KAAK,YAAc,KAAK,cACxB,KAAK,WAAa,KAAK,aAEzB,CASC,QAASc,EAAOC,EAAS,CAExB,KAAK,OAASD,EACd,KAAK,QAAUC,EAEf,MAAMC,EAAiB,KAAK,OAAS,KAAK,YACpCC,EAAkB,KAAK,QAAU,KAAK,YAE5C,KAAK,cAAc,QAASD,EAAgBC,CAAe,EAC3D,KAAK,cAAc,QAASD,EAAgBC,CAAe,EAE3D,QAAUnD,EAAI,EAAGA,EAAI,KAAK,OAAO,OAAQA,IAExC,KAAK,OAAQA,CAAC,EAAG,QAASkD,EAAgBC,CAAe,CAI5D,CAQC,cAAeC,EAAa,CAE3B,KAAK,YAAcA,EAEnB,KAAK,QAAS,KAAK,OAAQ,KAAK,OAAO,CAEzC,CAMC,SAAU,CAET,KAAK,cAAc,QAAO,EAC1B,KAAK,cAAc,QAAO,EAE1B,KAAK,SAAS,QAAO,CAEvB,CAEA,CCzVA,MAAMC,GAA2B,CAIhC,SAAU,CAET,SAAY,CAAE,MAAO,IAAI,EACzB,oBAAuB,CAAE,MAAO,CAAG,EACnC,YAAe,CAAE,MAAO,CAAG,EAC3B,aAAgB,CAAE,MAAO,IAAIC,EAAO,CAAQ,CAAE,EAC9C,eAAkB,CAAE,MAAO,CAAG,CAEhC,EAEC,aAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYxB,eAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAwB3B,EC9BA,MAAMC,UAAwBjD,CAAK,CAUlC,YAAakD,EAAYC,EAAW,EAAGC,EAAQC,EAAY,CAE1D,MAAK,EAQL,KAAK,SAAWF,EAOhB,KAAK,OAASC,EAOd,KAAK,UAAYC,EAQjB,KAAK,WAAeH,IAAe,OAAc,IAAItG,EAASsG,EAAW,EAAGA,EAAW,CAAC,EAAK,IAAItG,EAAS,IAAK,GAAG,EAQlH,KAAK,WAAa,IAAIoG,EAAO,EAAG,EAAG,CAAC,EAQpC,KAAK,UAAY,GAKjB,KAAK,wBAA0B,CAAA,EAC/B,KAAK,sBAAwB,CAAA,EAC7B,KAAK,MAAQ,EACb,IAAIM,EAAO,KAAK,MAAO,KAAK,WAAW,EAAI,CAAC,EACxCC,EAAO,KAAK,MAAO,KAAK,WAAW,EAAI,CAAC,EAE5C,KAAK,mBAAqB,IAAIzB,EAAmBwB,EAAMC,EAAM,CAAE,KAAMxB,EAAe,EACpF,KAAK,mBAAmB,QAAQ,KAAO,yBACvC,KAAK,mBAAmB,QAAQ,gBAAkB,GAElD,QAAUrC,EAAI,EAAGA,EAAI,KAAK,MAAOA,IAAO,CAEvC,MAAM8D,EAAyB,IAAI1B,EAAmBwB,EAAMC,EAAM,CAAE,KAAMxB,EAAe,EAEzFyB,EAAuB,QAAQ,KAAO,oBAAsB9D,EAC5D8D,EAAuB,QAAQ,gBAAkB,GAEjD,KAAK,wBAAwB,KAAMA,CAAsB,EAEzD,MAAMC,EAAuB,IAAI3B,EAAmBwB,EAAMC,EAAM,CAAE,KAAMxB,EAAe,EAEvF0B,EAAqB,QAAQ,KAAO,oBAAsB/D,EAC1D+D,EAAqB,QAAQ,gBAAkB,GAE/C,KAAK,sBAAsB,KAAMA,CAAoB,EAErDH,EAAO,KAAK,MAAOA,EAAO,CAAC,EAE3BC,EAAO,KAAK,MAAOA,EAAO,CAAC,CAE9B,CAIE,MAAMG,EAAiBX,GACvB,KAAK,iBAAmB/B,EAAc,MAAO0C,EAAe,QAAQ,EAEpE,KAAK,iBAAkB,oBAAwB,MAAQL,EACvD,KAAK,iBAAkB,YAAgB,MAAQ,IAE/C,KAAK,uBAAyB,IAAItC,EAAgB,CACjD,SAAU,KAAK,iBACf,aAAc2C,EAAe,aAC7B,eAAgBA,EAAe,cAClC,CAAG,EAID,KAAK,uBAAyB,CAAA,EAC9B,MAAMC,EAAkB,CAAE,EAAG,EAAG,EAAG,EAAG,EAAE,EACxCL,EAAO,KAAK,MAAO,KAAK,WAAW,EAAI,CAAC,EACxCC,EAAO,KAAK,MAAO,KAAK,WAAW,EAAI,CAAC,EAExC,QAAU7D,EAAI,EAAGA,EAAI,KAAK,MAAOA,IAEhC,KAAK,uBAAuB,KAAM,KAAK,0BAA2BiE,EAAiBjE,CAAC,EAAI,EAExF,KAAK,uBAAwBA,GAAI,SAAU,QAAY,MAAQ,IAAI9C,EAAS,EAAI0G,EAAM,EAAIC,CAAI,EAE9FD,EAAO,KAAK,MAAOA,EAAO,CAAC,EAE3BC,EAAO,KAAK,MAAOA,EAAO,CAAC,EAM5B,KAAK,kBAAoB,KAAK,sBAAuB,KAAK,KAAK,EAC/D,KAAK,kBAAkB,SAAU,aAAiB,MAAQ,KAAK,sBAAuB,CAAC,EAAG,QAC1F,KAAK,kBAAkB,SAAU,aAAiB,MAAQ,KAAK,sBAAuB,CAAC,EAAG,QAC1F,KAAK,kBAAkB,SAAU,aAAiB,MAAQ,KAAK,sBAAuB,CAAC,EAAG,QAC1F,KAAK,kBAAkB,SAAU,aAAiB,MAAQ,KAAK,sBAAuB,CAAC,EAAG,QAC1F,KAAK,kBAAkB,SAAU,aAAiB,MAAQ,KAAK,sBAAuB,CAAC,EAAG,QAC1F,KAAK,kBAAkB,SAAU,cAAkB,MAAQJ,EAC3D,KAAK,kBAAkB,SAAU,YAAgB,MAAQ,GAEzD,MAAMS,EAAe,CAAE,EAAK,GAAK,GAAK,GAAK,EAAG,EAC9C,KAAK,kBAAkB,SAAU,aAAiB,MAAQA,EAC1D,KAAK,gBAAkB,CAAE,IAAI5H,EAAS,EAAG,EAAG,CAAC,EAAI,IAAIA,EAAS,EAAG,EAAG,CAAC,EAAI,IAAIA,EAAS,EAAG,EAAG,CAAC,EAAI,IAAIA,EAAS,EAAG,EAAG,CAAC,EAAI,IAAIA,EAAS,EAAG,EAAG,CAAC,CAAE,EAC/I,KAAK,kBAAkB,SAAU,gBAAoB,MAAQ,KAAK,gBAIlE,KAAK,aAAegF,EAAc,MAAOjB,EAAW,QAAQ,EAE5D,KAAK,cAAgB,IAAIgB,EAAgB,CACxC,SAAU,KAAK,aACf,aAAchB,EAAW,aACzB,eAAgBA,EAAW,eAC3B,SAAU8D,EACV,UAAW,GACX,WAAY,GACZ,YAAa,EAChB,CAAG,EAED,KAAK,eAAiB,IAAIb,EAC1B,KAAK,eAAiB,EAEtB,KAAK,OAAS,IAAIc,GAElB,KAAK,QAAU,IAAIvD,EAAgB,IAAI,CAEzC,CAMC,SAAU,CAET,QAAUb,EAAI,EAAGA,EAAI,KAAK,wBAAwB,OAAQA,IAEzD,KAAK,wBAAyBA,CAAC,EAAG,QAAO,EAI1C,QAAUA,EAAI,EAAGA,EAAI,KAAK,sBAAsB,OAAQA,IAEvD,KAAK,sBAAuBA,CAAC,EAAG,QAAO,EAIxC,KAAK,mBAAmB,QAAO,EAI/B,QAAUA,EAAI,EAAGA,EAAI,KAAK,uBAAuB,OAAQA,IAExD,KAAK,uBAAwBA,CAAC,EAAG,QAAO,EAIzC,KAAK,kBAAkB,QAAO,EAC9B,KAAK,cAAc,QAAO,EAC1B,KAAK,OAAO,QAAO,EAInB,KAAK,QAAQ,QAAO,CAEtB,CAQC,QAASgD,EAAOC,EAAS,CAExB,IAAIW,EAAO,KAAK,MAAOZ,EAAQ,CAAC,EAC5Ba,EAAO,KAAK,MAAOZ,EAAS,CAAC,EAEjC,KAAK,mBAAmB,QAASW,EAAMC,CAAI,EAE3C,QAAU7D,EAAI,EAAGA,EAAI,KAAK,MAAOA,IAEhC,KAAK,wBAAyBA,CAAC,EAAG,QAAS4D,EAAMC,CAAI,EACrD,KAAK,sBAAuB7D,CAAC,EAAG,QAAS4D,EAAMC,CAAI,EAEnD,KAAK,uBAAwB7D,GAAI,SAAU,QAAY,MAAQ,IAAI9C,EAAS,EAAI0G,EAAM,EAAIC,CAAI,EAE9FD,EAAO,KAAK,MAAOA,EAAO,CAAC,EAC3BC,EAAO,KAAK,MAAOA,EAAO,CAAC,CAI9B,CAaC,OAAQ7C,EAAUO,EAAaC,EAAYxD,EAAW6E,EAAa,CAElE7B,EAAS,cAAe,KAAK,cAAc,EAC3C,KAAK,eAAiBA,EAAS,cAAa,EAC5C,MAAMqD,EAAerD,EAAS,UAC9BA,EAAS,UAAY,GAErBA,EAAS,cAAe,KAAK,WAAY,CAAC,EAErC6B,GAAa7B,EAAS,MAAM,QAAQ,QAAQ,QAAS,EAAK,EAI1D,KAAK,iBAET,KAAK,QAAQ,SAAW,KAAK,OAC7B,KAAK,OAAO,IAAMQ,EAAW,QAE7BR,EAAS,gBAAiB,IAAI,EAC9BA,EAAS,MAAK,EACd,KAAK,QAAQ,OAAQA,CAAQ,GAM9B,KAAK,iBAAkB,SAAa,MAAQQ,EAAW,QACvD,KAAK,iBAAkB,oBAAwB,MAAQ,KAAK,UAC5D,KAAK,QAAQ,SAAW,KAAK,uBAE7BR,EAAS,gBAAiB,KAAK,kBAAkB,EACjDA,EAAS,MAAK,EACd,KAAK,QAAQ,OAAQA,CAAQ,EAI7B,IAAIsD,EAAoB,KAAK,mBAE7B,QAAUtE,EAAI,EAAGA,EAAI,KAAK,MAAOA,IAEhC,KAAK,QAAQ,SAAW,KAAK,uBAAwBA,CAAC,EAEtD,KAAK,uBAAwBA,GAAI,SAAU,aAAiB,MAAQsE,EAAkB,QACtF,KAAK,uBAAwBtE,GAAI,SAAU,UAAc,MAAQuD,EAAgB,eACjFvC,EAAS,gBAAiB,KAAK,wBAAyBhB,CAAC,CAAE,EAC3DgB,EAAS,MAAK,EACd,KAAK,QAAQ,OAAQA,CAAQ,EAE7B,KAAK,uBAAwBhB,CAAC,EAAG,SAAU,aAAiB,MAAQ,KAAK,wBAAyBA,CAAC,EAAG,QACtG,KAAK,uBAAwBA,GAAI,SAAU,UAAc,MAAQuD,EAAgB,eACjFvC,EAAS,gBAAiB,KAAK,sBAAuBhB,CAAC,CAAE,EACzDgB,EAAS,MAAK,EACd,KAAK,QAAQ,OAAQA,CAAQ,EAE7BsD,EAAoB,KAAK,sBAAuBtE,CAAC,EAMlD,KAAK,QAAQ,SAAW,KAAK,kBAC7B,KAAK,kBAAkB,SAAU,cAAkB,MAAQ,KAAK,SAChE,KAAK,kBAAkB,SAAU,YAAgB,MAAQ,KAAK,OAC9D,KAAK,kBAAkB,SAAU,gBAAoB,MAAQ,KAAK,gBAElEgB,EAAS,gBAAiB,KAAK,wBAAyB,CAAC,CAAE,EAC3DA,EAAS,MAAK,EACd,KAAK,QAAQ,OAAQA,CAAQ,EAI7B,KAAK,QAAQ,SAAW,KAAK,cAC7B,KAAK,aAAc,SAAa,MAAQ,KAAK,wBAAyB,CAAC,EAAG,QAErE6B,GAAa7B,EAAS,MAAM,QAAQ,QAAQ,QAAS,EAAI,EAEzD,KAAK,gBAETA,EAAS,gBAAiB,IAAI,EAC9B,KAAK,QAAQ,OAAQA,CAAQ,IAI7BA,EAAS,gBAAiBQ,CAAU,EACpC,KAAK,QAAQ,OAAQR,CAAQ,GAM9BA,EAAS,cAAe,KAAK,eAAgB,KAAK,cAAc,EAChEA,EAAS,UAAYqD,CAEvB,CAIC,0BAA2BE,EAAe,CAEzC,MAAMC,EAAe,CAAA,EAErB,QAAU,EAAI,EAAG,EAAID,EAAc,IAElCC,EAAa,KAAM,OAAU,KAAK,IAAK,IAAQ,EAAI,GAAMD,EAAeA,EAAc,EAAKA,CAAY,EAIxG,OAAO,IAAIlD,EAAgB,CAE1B,QAAS,CACR,cAAiBkD,CACrB,EAEG,SAAU,CACT,aAAgB,CAAE,MAAO,IAAI,EAC7B,QAAW,CAAE,MAAO,IAAIrH,EAAS,GAAK,EAAG,CAAE,EAC3C,UAAa,CAAE,MAAO,IAAIA,EAAS,GAAK,EAAG,CAAE,EAC7C,qBAAwB,CAAE,MAAOsH,CAAY,CACjD,EAEG,aACC;AAAA;AAAA;AAAA;AAAA,OAMD,eACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAqBJ,CAAG,CAEH,CAEC,sBAAuBC,EAAQ,CAE9B,OAAO,IAAIpD,EAAgB,CAE1B,QAAS,CACR,SAAYoD,CAChB,EAEG,SAAU,CACT,aAAgB,CAAE,MAAO,IAAI,EAC7B,aAAgB,CAAE,MAAO,IAAI,EAC7B,aAAgB,CAAE,MAAO,IAAI,EAC7B,aAAgB,CAAE,MAAO,IAAI,EAC7B,aAAgB,CAAE,MAAO,IAAI,EAC7B,cAAiB,CAAE,MAAO,CAAG,EAC7B,aAAgB,CAAE,MAAO,IAAI,EAC7B,gBAAmB,CAAE,MAAO,IAAI,EAChC,YAAe,CAAE,MAAO,CAAG,CAC/B,EAEG,aACC;AAAA;AAAA;AAAA;AAAA,OAMD,eACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAuBJ,CAAG,CAEH,CAEA,CAEAlB,EAAgB,eAAiB,IAAIrG,EAAS,EAAK,CAAG,EACtDqG,EAAgB,eAAiB,IAAIrG,EAAS,EAAK,CAAG,ECxdtD,MAAMwH,WAAmBpE,CAAK,CAY7B,YAAaoB,EAAOC,EAAQgD,EAAmB,KAAMC,EAAa,KAAMC,EAAa,KAAO,CAE3F,MAAK,EAOL,KAAK,MAAQnD,EAOb,KAAK,OAASC,EASd,KAAK,iBAAmBgD,EAQxB,KAAK,WAAaC,EAQlB,KAAK,WAAaC,EAQlB,KAAK,MAAQ,GAQb,KAAK,WAAa,GAQlB,KAAK,UAAY,GACjB,KAAK,eAAiB,IAAIvB,CAE5B,CAaC,OAAQtC,EAAUO,EAAaC,EAA0C,CAExE,MAAM6C,EAAerD,EAAS,UAC9BA,EAAS,UAAY,GAErB,IAAI8D,EAAeC,EAEd,KAAK,mBAAqB,OAE9BA,EAAsB,KAAK,MAAM,iBAEjC,KAAK,MAAM,iBAAmB,KAAK,kBAI/B,KAAK,aAAe,OAExB/D,EAAS,cAAe,KAAK,cAAc,EAC3CA,EAAS,cAAe,KAAK,WAAYA,EAAS,cAAa,CAAE,GAI7D,KAAK,aAAe,OAExB8D,EAAgB9D,EAAS,cAAa,EACtCA,EAAS,cAAe,KAAK,UAAU,GAInC,KAAK,YAAc,IAEvBA,EAAS,WAAU,EAIpBA,EAAS,gBAAiB,KAAK,eAAiB,KAAOQ,CAAU,EAE5D,KAAK,QAAU,IAGnBR,EAAS,MAAOA,EAAS,eAAgBA,EAAS,eAAgBA,EAAS,gBAAgB,EAI5FA,EAAS,OAAQ,KAAK,MAAO,KAAK,MAAM,EAInC,KAAK,aAAe,MAExBA,EAAS,cAAe,KAAK,cAAc,EAIvC,KAAK,aAAe,MAExBA,EAAS,cAAe8D,CAAa,EAIjC,KAAK,mBAAqB,OAE9B,KAAK,MAAM,iBAAmBC,GAI/B/D,EAAS,UAAYqD,CAEvB,CAEA,CCtJA,MAAMW,UAAoB1E,CAAK,CAW9B,YAAakD,EAAY9B,EAAOC,EAAQsD,EAAkB,CAEzD,MAAK,EAOL,KAAK,YAAcvD,EAOnB,KAAK,aAAeC,EAOpB,KAAK,gBAAkBsD,IAAoB,OAAYA,EAAkB,CAAA,EAQzE,KAAK,iBAAmB,IAAI3B,EAAO,EAAG,EAAG,CAAC,EAQ1C,KAAK,gBAAkB,IAAIA,EAAO,GAAK,IAAM,GAAI,EAQjD,KAAK,SAAW,EAShB,KAAK,kBAAoB,GASzB,KAAK,eAAiB,KAQtB,KAAK,cAAgB,EAQrB,KAAK,aAAe,EASpB,KAAK,gBAAkB,EAQvB,KAAK,YAAc,EAEnB,KAAK,iBAAmB,IAAI,IAC5B,KAAK,gBAAkB,IAAI,IAQ3B,KAAK,WAAeE,IAAe,OAAc,IAAItG,EAASsG,EAAW,EAAGA,EAAW,CAAC,EAAK,IAAItG,EAAS,IAAK,GAAG,EAElH,MAAM0G,EAAO,KAAK,MAAO,KAAK,WAAW,EAAI,KAAK,eAAe,EAC3DC,EAAO,KAAK,MAAO,KAAK,WAAW,EAAI,KAAK,eAAe,EAEjE,KAAK,uBAAyB,IAAIzB,EAAmB,KAAK,WAAW,EAAG,KAAK,WAAW,CAAC,EACzF,KAAK,uBAAuB,QAAQ,KAAO,mBAC3C,KAAK,uBAAuB,QAAQ,gBAAkB,GAEtD,KAAK,cAAgB,IAAI8C,GACzB,KAAK,cAAc,KAAOC,EAC1B,KAAK,cAAc,aAAeC,GAClC,KAAK,cAAc,SAAW9C,EAE9B,KAAK,oBAAsB,KAAK,wBAAuB,EACvD,KAAK,oBAAoB,KAAO6C,EAChC,KAAK,oBAAoB,eAAiBE,EAAqB,KAAK,oBAAoB,eAAgB,KAAK,YAAY,EAEzH,KAAK,wBAA0B,IAAIjD,EAAmB,KAAK,WAAW,EAAG,KAAK,WAAW,EAAG,CAAE,KAAMC,CAAa,CAAE,EACnH,KAAK,wBAAwB,QAAQ,KAAO,oBAC5C,KAAK,wBAAwB,QAAQ,gBAAkB,GAEvD,KAAK,iCAAmC,IAAID,EAAmBwB,EAAMC,EAAM,CAAE,KAAMxB,EAAe,EAClG,KAAK,iCAAiC,QAAQ,KAAO,8BACrD,KAAK,iCAAiC,QAAQ,gBAAkB,GAEhE,KAAK,wBAA0B,IAAID,EAAmBwB,EAAMC,EAAM,CAAE,KAAMxB,EAAe,EACzF,KAAK,wBAAwB,QAAQ,KAAO,oBAC5C,KAAK,wBAAwB,QAAQ,gBAAkB,GACvD,KAAK,wBAA0B,IAAID,EAAmB,KAAK,MAAOwB,EAAO,CAAC,EAAI,KAAK,MAAOC,EAAO,CAAC,EAAI,CAAE,KAAMxB,EAAe,EAC7H,KAAK,wBAAwB,QAAQ,KAAO,oBAC5C,KAAK,wBAAwB,QAAQ,gBAAkB,GAEvD,KAAK,sBAAwB,KAAK,0BAAyB,EAC3D,KAAK,wBAA0B,IAAID,EAAmBwB,EAAMC,EAAM,CAAE,KAAMxB,EAAe,EACzF,KAAK,wBAAwB,QAAQ,KAAO,oBAC5C,KAAK,wBAAwB,QAAQ,gBAAkB,GACvD,KAAK,wBAA0B,IAAID,EAAmB,KAAK,MAAOwB,EAAO,CAAC,EAAI,KAAK,MAAOC,EAAO,CAAC,EAAI,CAAE,KAAMxB,EAAe,EAC7H,KAAK,wBAAwB,QAAQ,KAAO,oBAC5C,KAAK,wBAAwB,QAAQ,gBAAkB,GAEvD,MAAMiD,EAAqB,EACrBC,EAAgB,EAEtB,KAAK,uBAAyB,KAAK,0BAA2BD,CAAkB,EAChF,KAAK,uBAAuB,SAAU,QAAY,MAAM,IAAK1B,EAAMC,CAAI,EACvE,KAAK,uBAAuB,SAAU,aAAiB,MAAQ,EAC/D,KAAK,uBAAyB,KAAK,0BAA2B0B,CAAa,EAC3E,KAAK,uBAAuB,SAAU,QAAY,MAAM,IAAK,KAAK,MAAO3B,EAAO,CAAC,EAAI,KAAK,MAAOC,EAAO,EAAG,EAC3G,KAAK,uBAAuB,SAAU,aAAiB,MAAQ0B,EAG/D,KAAK,gBAAkB,KAAK,oBAAmB,EAI/C,MAAMC,EAAanF,EAEnB,KAAK,aAAeiB,EAAc,MAAOkE,EAAW,QAAQ,EAE5D,KAAK,aAAe,IAAInE,EAAgB,CACvC,SAAU,KAAK,aACf,aAAcmE,EAAW,aACzB,eAAgBA,EAAW,eAC3B,SAAUlD,EACV,UAAW,GACX,WAAY,EACf,CAAG,EAED,KAAK,QAAU,GACf,KAAK,UAAY,GAEjB,KAAK,eAAiB,IAAIgB,EAC1B,KAAK,cAAgB,EAErB,KAAK,QAAU,IAAIzC,EAAgB,IAAI,EAEvC,KAAK,gBAAkB,IAAIyC,EAC3B,KAAK,gBAAkB,IAAIA,EAC3B,KAAK,cAAgB,IAAImC,GAEzB,SAASJ,EAAqBK,EAAQ/D,EAAS,CAE9C,MAAMgE,EAAOhE,EAAO,oBAAsB,cAAgB,eAE1D,OAAO+D,EAAO,QAAS,mBAAoBC,EAAO,cAAc,CAEnE,CAEA,CAMC,SAAU,CAET,KAAK,uBAAuB,QAAO,EACnC,KAAK,wBAAwB,QAAO,EACpC,KAAK,iCAAiC,QAAO,EAC7C,KAAK,wBAAwB,QAAO,EACpC,KAAK,wBAAwB,QAAO,EACpC,KAAK,wBAAwB,QAAO,EACpC,KAAK,wBAAwB,QAAO,EAEpC,KAAK,cAAc,QAAO,EAC1B,KAAK,oBAAoB,QAAO,EAChC,KAAK,sBAAsB,QAAO,EAClC,KAAK,uBAAuB,QAAO,EACnC,KAAK,uBAAuB,QAAO,EACnC,KAAK,gBAAgB,QAAO,EAC5B,KAAK,aAAa,QAAO,EAEzB,KAAK,QAAQ,QAAO,CAEtB,CAQC,QAAS3C,EAAOC,EAAS,CAExB,KAAK,uBAAuB,QAASD,EAAOC,CAAM,EAClD,KAAK,wBAAwB,QAASD,EAAOC,CAAM,EAEnD,IAAIW,EAAO,KAAK,MAAOZ,EAAQ,KAAK,eAAe,EAC/Ca,EAAO,KAAK,MAAOZ,EAAS,KAAK,eAAe,EACpD,KAAK,iCAAiC,QAASW,EAAMC,CAAI,EACzD,KAAK,wBAAwB,QAASD,EAAMC,CAAI,EAChD,KAAK,wBAAwB,QAASD,EAAMC,CAAI,EAChD,KAAK,uBAAuB,SAAU,QAAY,MAAM,IAAKD,EAAMC,CAAI,EAEvED,EAAO,KAAK,MAAOA,EAAO,CAAC,EAC3BC,EAAO,KAAK,MAAOA,EAAO,CAAC,EAE3B,KAAK,wBAAwB,QAASD,EAAMC,CAAI,EAChD,KAAK,wBAAwB,QAASD,EAAMC,CAAI,EAEhD,KAAK,uBAAuB,SAAU,QAAY,MAAM,IAAKD,EAAMC,CAAI,CAEzE,CAaC,OAAQ7C,EAAUO,EAAaC,EAAYxD,EAAW6E,EAAa,CAElE,GAAK,KAAK,gBAAgB,OAAS,EAAI,CAEtC7B,EAAS,cAAe,KAAK,cAAc,EAC3C,KAAK,cAAgBA,EAAS,cAAa,EAC3C,MAAMqD,EAAerD,EAAS,UAE9BA,EAAS,UAAY,GAEhB6B,GAAa7B,EAAS,MAAM,QAAQ,QAAQ,QAAS,EAAK,EAE/DA,EAAS,cAAe,SAAU,CAAC,EAEnC,KAAK,sBAAqB,EAG1B,KAAK,mCAAoC,EAAK,EAE9C,MAAM4E,EAAoB,KAAK,YAAY,WACrCC,EAA0B,KAAK,YAAY,iBA0CjD,GAzCA,KAAK,YAAY,WAAa,KAG9B,KAAK,YAAY,iBAAmB,KAAK,cACzC7E,EAAS,gBAAiB,KAAK,uBAAuB,EACtDA,EAAS,MAAK,EACdA,EAAS,OAAQ,KAAK,YAAa,KAAK,YAAY,EAGpD,KAAK,mCAAoC,EAAI,EAC7C,KAAK,iBAAiB,MAAK,EAG3B,KAAK,qBAAoB,EAGzB,KAAK,sCAAuC,EAAK,EACjD,KAAK,YAAY,iBAAmB,KAAK,oBACzC,KAAK,oBAAoB,SAAU,cAAkB,MAAM,IAAK,KAAK,aAAa,KAAM,KAAK,aAAa,GAAG,EAC7G,KAAK,oBAAoB,SAAU,aAAiB,MAAQ,KAAK,wBAAwB,QACzF,KAAK,oBAAoB,SAAU,cAAkB,MAAQ,KAAK,cAClEA,EAAS,gBAAiB,KAAK,sBAAsB,EACrDA,EAAS,MAAK,EACdA,EAAS,OAAQ,KAAK,YAAa,KAAK,YAAY,EACpD,KAAK,sCAAuC,EAAI,EAChD,KAAK,iBAAiB,MAAK,EAC3B,KAAK,gBAAgB,MAAK,EAE1B,KAAK,YAAY,WAAa4E,EAC9B,KAAK,YAAY,iBAAmBC,EAGpC,KAAK,QAAQ,SAAW,KAAK,aAC7B,KAAK,aAAc,SAAa,MAAQ,KAAK,uBAAuB,QACpE7E,EAAS,gBAAiB,KAAK,gCAAgC,EAC/DA,EAAS,MAAK,EACd,KAAK,QAAQ,OAAQA,CAAQ,EAE7B,KAAK,gBAAgB,KAAM,KAAK,gBAAgB,EAChD,KAAK,gBAAgB,KAAM,KAAK,eAAe,EAE1C,KAAK,YAAc,EAAI,CAE3B,MAAM8E,EAAW,KAAiB,KAAK,IAAK,YAAY,IAAG,EAAK,IAAO,KAAK,WAAW,EAAO,IAAe,EAC7G,KAAK,gBAAgB,eAAgBA,CAAM,EAC3C,KAAK,gBAAgB,eAAgBA,CAAM,CAE/C,CAGG,KAAK,QAAQ,SAAW,KAAK,sBAC7B,KAAK,sBAAsB,SAAU,YAAgB,MAAQ,KAAK,iCAAiC,QACnG,KAAK,sBAAsB,SAAU,QAAY,MAAM,IAAK,KAAK,iCAAiC,MAAO,KAAK,iCAAiC,MAAM,EACrJ,KAAK,sBAAsB,SAAU,iBAAqB,MAAQ,KAAK,gBACvE,KAAK,sBAAsB,SAAU,gBAAoB,MAAQ,KAAK,gBACtE9E,EAAS,gBAAiB,KAAK,uBAAuB,EACtDA,EAAS,MAAK,EACd,KAAK,QAAQ,OAAQA,CAAQ,EAG7B,KAAK,QAAQ,SAAW,KAAK,uBAC7B,KAAK,uBAAuB,SAAU,aAAiB,MAAQ,KAAK,wBAAwB,QAC5F,KAAK,uBAAuB,SAAU,UAAc,MAAQgE,EAAY,eACxE,KAAK,uBAAuB,SAAU,aAAiB,MAAQ,KAAK,cACpEhE,EAAS,gBAAiB,KAAK,uBAAuB,EACtDA,EAAS,MAAK,EACd,KAAK,QAAQ,OAAQA,CAAQ,EAC7B,KAAK,uBAAuB,SAAU,aAAiB,MAAQ,KAAK,wBAAwB,QAC5F,KAAK,uBAAuB,SAAU,UAAc,MAAQgE,EAAY,eACxEhE,EAAS,gBAAiB,KAAK,uBAAuB,EACtDA,EAAS,MAAK,EACd,KAAK,QAAQ,OAAQA,CAAQ,EAG7B,KAAK,QAAQ,SAAW,KAAK,uBAC7B,KAAK,uBAAuB,SAAU,aAAiB,MAAQ,KAAK,wBAAwB,QAC5F,KAAK,uBAAuB,SAAU,UAAc,MAAQgE,EAAY,eACxEhE,EAAS,gBAAiB,KAAK,uBAAuB,EACtDA,EAAS,MAAK,EACd,KAAK,QAAQ,OAAQA,CAAQ,EAC7B,KAAK,uBAAuB,SAAU,aAAiB,MAAQ,KAAK,wBAAwB,QAC5F,KAAK,uBAAuB,SAAU,UAAc,MAAQgE,EAAY,eACxEhE,EAAS,gBAAiB,KAAK,uBAAuB,EACtDA,EAAS,MAAK,EACd,KAAK,QAAQ,OAAQA,CAAQ,EAG7B,KAAK,QAAQ,SAAW,KAAK,gBAC7B,KAAK,gBAAgB,SAAU,YAAgB,MAAQ,KAAK,uBAAuB,QACnF,KAAK,gBAAgB,SAAU,aAAiB,MAAQ,KAAK,wBAAwB,QACrF,KAAK,gBAAgB,SAAU,aAAiB,MAAQ,KAAK,wBAAwB,QACrF,KAAK,gBAAgB,SAAU,eAAmB,MAAQ,KAAK,eAC/D,KAAK,gBAAgB,SAAU,aAAiB,MAAQ,KAAK,aAC7D,KAAK,gBAAgB,SAAU,SAAa,MAAQ,KAAK,SACzD,KAAK,gBAAgB,SAAU,kBAAsB,MAAQ,KAAK,kBAG7D6B,GAAa7B,EAAS,MAAM,QAAQ,QAAQ,QAAS,EAAI,EAE9DA,EAAS,gBAAiBQ,CAAU,EACpC,KAAK,QAAQ,OAAQR,CAAQ,EAE7BA,EAAS,cAAe,KAAK,eAAgB,KAAK,aAAa,EAC/DA,EAAS,UAAYqD,CAExB,CAEO,KAAK,iBAET,KAAK,QAAQ,SAAW,KAAK,aAC7B,KAAK,aAAc,SAAa,MAAQ7C,EAAW,QACnDR,EAAS,gBAAiB,IAAI,EAC9B,KAAK,QAAQ,OAAQA,CAAQ,EAIhC,CAIC,uBAAwB,CAEvB,MAAM+E,EAAQ,KAAK,gBAEnB,SAASC,EAA8BpJ,EAAS,CAE1CA,EAAO,QAASmJ,EAAM,IAAKnJ,CAAM,CAEzC,CAEEmJ,EAAM,MAAK,EAEX,QAAU,EAAI,EAAG,EAAI,KAAK,gBAAgB,OAAQ,IAE1B,KAAK,gBAAiB,CAAC,EAC/B,SAAUC,CAA4B,CAIxD,CAEC,mCAAoCC,EAAW,CAE9C,MAAMF,EAAQ,KAAK,iBAEnB,UAAYG,KAAQ,KAAK,gBAEnBD,IAAa,GAEjBC,EAAK,QAAUH,EAAM,IAAKG,CAAI,GAI9BH,EAAM,IAAKG,EAAMA,EAAK,OAAO,EAC7BA,EAAK,QAAUD,EAMnB,CAEC,sCAAuCA,EAAW,CAEjD,MAAME,EAAkB,KAAK,iBACvBC,EAAiB,KAAK,gBAE5B,SAASC,EAA0BzJ,EAAS,CAE3C,GAAKA,EAAO,QAAUA,EAAO,UAI5B,GAAK,CAAEwJ,EAAe,IAAKxJ,GAAW,CAErC,MAAM0J,EAAa1J,EAAO,SAErBqJ,IAAa,IAASE,EAAgB,IAAKvJ,CAAM,IAAO,MAE5DA,EAAO,QAAUqJ,GAIlBE,EAAgB,IAAKvJ,EAAQ0J,CAAU,CAE5C,OAEe1J,EAAO,UAAYA,EAAO,UAKhCqJ,IAAa,GAEjBrJ,EAAO,QAAUuJ,EAAgB,IAAKvJ,CAAM,GAI5CuJ,EAAgB,IAAKvJ,EAAQA,EAAO,OAAO,EAC3CA,EAAO,QAAUqJ,GAMtB,CAEE,KAAK,YAAY,SAAUI,CAAwB,CAErD,CAEC,sBAAuB,CAEtB,KAAK,cAAc,IAAK,GAAK,EAAK,EAAK,GACtC,EAAK,GAAK,EAAK,GACf,EAAK,EAAK,GAAK,GACf,EAAK,EAAK,EAAK,CAAG,EACnB,KAAK,cAAc,SAAU,KAAK,aAAa,gBAAgB,EAC/D,KAAK,cAAc,SAAU,KAAK,aAAa,kBAAkB,CAEnE,CAEC,yBAA0B,CAEzB,OAAO,IAAIhF,EAAgB,CAE1B,SAAU,CACT,aAAgB,CAAE,MAAO,IAAI,EAC7B,cAAiB,CAAE,MAAO,IAAInE,EAAS,GAAK,EAAG,CAAE,EACjD,cAAiB,CAAE,MAAO,IAAI,CAClC,EAEG,aACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAiCD,eACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAeJ,CAAG,CAEH,CAEC,2BAA4B,CAE3B,OAAO,IAAImE,EAAgB,CAE1B,SAAU,CACT,YAAe,CAAE,MAAO,IAAI,EAC5B,QAAW,CAAE,MAAO,IAAInE,EAAS,GAAK,EAAG,CAAE,EAC3C,iBAAoB,CAAE,MAAO,IAAIZ,EAAS,EAAK,EAAK,EAAK,EACzD,gBAAmB,CAAE,MAAO,IAAIA,EAAS,EAAK,EAAK,EAAK,CAC5D,EAEG,aACC;AAAA;AAAA;AAAA;AAAA;AAAA,OAOD,eACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAuBJ,CAAG,CAEH,CAEC,0BAA2BiK,EAAY,CAEtC,OAAO,IAAIlF,EAAgB,CAE1B,QAAS,CACR,WAAckF,CAClB,EAEG,SAAU,CACT,aAAgB,CAAE,MAAO,IAAI,EAC7B,QAAW,CAAE,MAAO,IAAIrJ,EAAS,GAAK,EAAG,CAAE,EAC3C,UAAa,CAAE,MAAO,IAAIA,EAAS,GAAK,EAAG,CAAE,EAC7C,aAAgB,CAAE,MAAO,CAAG,CAChC,EAEG,aACC;AAAA;AAAA;AAAA;AAAA;AAAA,OAOD,eACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA6BJ,CAAG,CAEH,CAEC,qBAAsB,CAErB,OAAO,IAAImE,EAAgB,CAE1B,SAAU,CACT,YAAe,CAAE,MAAO,IAAI,EAC5B,aAAgB,CAAE,MAAO,IAAI,EAC7B,aAAgB,CAAE,MAAO,IAAI,EAC7B,eAAkB,CAAE,MAAO,IAAI,EAC/B,aAAgB,CAAE,MAAO,CAAG,EAC5B,SAAY,CAAE,MAAO,CAAG,EACxB,kBAAqB,CAAE,MAAO,CAAG,CACrC,EAEG,aACC;AAAA;AAAA;AAAA;AAAA;AAAA,OAOD,eACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAsBD,SAAU8C,EACV,UAAW,GACX,WAAY,GACZ,YAAa,EAChB,CAAG,CAEH,CAEA,CAEAa,EAAY,eAAiB,IAAI9H,EAAS,EAAK,CAAG,EAClD8H,EAAY,eAAiB,IAAI9H,EAAS,EAAK,CAAG,EClvBlD,MAAMsJ,GAAa,CAElB,KAAM,aAEN,SAAU,CAET,SAAY,CAAE,MAAO,IAAI,EACzB,WAAc,CAAE,MAAO,IAAItJ,EAAS,EAAI,KAAM,EAAI,GAAG,CAAE,CAEzD,EAEC,aAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWxB,erSa2E,EAAQ,CACnB,aAAc,GACd,sBAAuB,GACvB,qBAAsB,IAAIvF,EAC1B,aAAc,GACd,aAAc,GACd,OAAQ,EACR,SAAU,IAAIY,CAEhB,EAEauJ,EAAW,CACpB,kBAAmB,EACnB,aAAc,CAClB,ECNO,SAASC,IAAW,CACvB,QAAQ,IAAI,kBAAkB,EAC9B,MAAMhF,EAAQ,IAAIiF,GAGZC,EAAS,IAAIC,EAAY,OAAQ,EACvCnF,EAAM,WAAakF,EAEnB,QAAQ,IAAI,wCAAwC,EACpD,IAAIjF,EAAS,IAAImF,GAAyB,GAAI,OAAO,WAAW,OAAO,YAAa,GAAK,GAAI,EAC7FnF,EAAO,SAAS,IAAI,KAAM,IAAK,CAAC,EAEhC,MAAMoF,EAAS,SAAS,eAAe,aAAa,EAC9C/F,EAAW,IAAIgG,GAAoB,CAAE,OAAAD,EAAQ,UAAW,GAAM,MAAO,GAAM,sBAAuB,EAAI,CAAE,EAE9G,QAAQ,IAAI,qBAAqB,EAEjC/F,EAAS,cAAc,EAAU,CAAC,EAClCA,EAAS,QAAQ,OAAO,WAAY,OAAO,WAAW,EACtDA,EAAS,cAAc,OAAO,gBAAgB,EAG9CA,EAAS,UAAU,QAAU,GAC7BA,EAAS,UAAU,KAAOiG,GAE1B,QAAQ,IAAI,yBAAyB,EACrC,MAAMC,EAAW,IAAIxK,GAAciF,EAAQX,EAAS,UAAU,EAC9D,OAAAkG,EAAS,cAAgB,GACzBA,EAAS,cAAgB,IACzBA,EAAS,mBAAqB,GAC9BA,EAAS,YAAc,IAEhB,CACH,MAAAxF,EACA,OAAAC,EACA,SAAAX,EACA,SAAAkG,EACA,OAAAH,CACR,CACA,CAEO,SAASI,GAAiBnG,EAASU,EAAMC,EAAO,CACnD,MAAMO,EAAe,IAAIkF,EAAwB,OAAO,WAAY,OAAO,YAAa,CACpF,OAAQC,GACR,KAAMC,GACN,YAAa,GACb,cAAe,EACvB,CAAK,EAEKC,EAAW,IAAItF,GAAejB,EAAUkB,CAAY,EAC1DqF,EAAS,QAAQ,IAAI7C,GAAWhD,EAAOC,CAAM,CAAC,EAC9C,MAAM6F,EAAW,IAAItG,GAAWsF,EAAU,EACpCpD,EAAapC,EAAS,cAAa,EAEzCwG,EAAS,SAAS,SAAS,WAAc,MAAM,IAC3C,GAAK,OAAO,WAAapE,GACzB,GAAK,OAAO,YAAcA,EAClC,EAEImE,EAAS,QAAQC,CAAQ,EAGzB,MAAMC,EAAc,IAAIzC,EAAY,IAAI0C,EAAc,OAAO,WAAY,OAAO,WAAW,EAAGhG,EAAOC,CAAM,EAC3G8F,EAAY,aAAe,EAC3BA,EAAY,SAAW,EACvBA,EAAY,iBAAiB,IAAI,QAAQ,EACzCA,EAAY,gBAAgB,IAAI,OAAQ,EACxCF,EAAS,QAAQE,CAAW,EAG5B,MAAME,EAAY,IAAIpE,EAAgB,IAAImE,EAAc,OAAO,WAAY,OAAO,WAAW,EAAG,KAAQ,GAAK,IAAK,EAClH,OAAAC,EAAU,eAAiB,GAC3BA,EAAU,MAAQ,GAClBA,EAAU,UAAY,EACtBA,EAAU,OAAS,GACnBJ,EAAS,QAAQI,CAAS,EAEnB,CACH,SAAAJ,EACA,YAAAE,EACA,SAAAD,CACR,CACA,CAEO,SAASI,GAAclG,EAAM,CAChC,QAAQ,IAAI,uBAAuB,EACnC,IAAImG,EAAe,IAAIC,GAAmB,QAAU,CAAC,EAGrD,MAAMC,EAAY,IAAIC,GAAsB,SAAU,QAAU,EAAG,EAEnEtG,EAAM,IAAImG,CAAY,EACtBnG,EAAM,IAAIqG,CAAS,CACvB,CAGO,SAASE,GAAmBvG,EAAMwG,EAAIC,EAAQ,CACjDzG,EAAM,IAAIwG,CAAG,EACbC,EAAQ,QAASC,GAAW,CACxB1G,EAAM,IAAI0G,EAAO,QAAQ,CACjC,CAAK,EACD,OAAO,cAAc,IAAI,YAAY,eAAe,CAAC,CACzD,CAEO,SAASC,IAAe,CAC3BxG,EAAM,aAAe,GACrB4E,EAAS,kBAAoB,CACjC,CCrHA,MAAA6B,GAAe,yCCAfC,GAAe,2CCMTC,GAAc,IAAIC,GAEjB,SAASC,GAAuBP,EAAQ,CAC3CA,EAAQ,QAASC,GAAW,CACxBA,EAAO,SAAS,QAAU,EAClC,CAAK,CACL,CAEO,SAASO,GAAcT,EAAI,CAC9BA,EAAI,MAAM,IAAI,IAAK,IAAK,GAAG,EAG3BA,EAAI,SAAS,EAAE,IACfA,EAAI,SAAS,EAAE,EACfA,EAAI,SAAS,EAAE,CACnB,CAEO,SAASU,IAAS,CAErB,IAAIC,EACJ,MAAMC,EAAU,IAAIC,EAAqB,OAAS,GAAI,EAAE,EAExDF,EAAS,IAAIG,EAA2B,CACxC,SAAU,SACV,YAAaR,GAAY,KAAKF,EAAU,EACxC,kBAAmB,EACnB,MAAO,IAAIzB,EAAY,QAAQ,CACnC,CAAK,EAEDgC,EAAO,YAAc,GAErB,MAAMX,EAAM,IAAIe,EAAWH,EAASD,CAAM,EAE1C,OAAO,cAAc,IAAI,YAAY,WAAW,CAAC,EAGjD,MAAMK,EAAa,IAAIC,GAAiB,SAAW,KAAM,IAAK,GAAG,EACjE,OAAAD,EAAW,OAAO,QAAQ,MAAQ,KAClCA,EAAW,OAAO,QAAQ,OAAS,KACnCA,EAAW,OAAO,OAAO,KAAO,GAChCA,EAAW,OAAO,OAAO,IAAM,GAC/BhB,EAAI,IAAIgB,CAAU,EAElBhB,EAAI,OAASA,EACb,OAAO,cAAc,IAAI,YAAY,WAAW,CAAC,EAC1CA,CACX,CAGO,eAAekB,IAAoB,CAUtC,MAAMC,EAAU,MAAMC,EAAgB,UAAU,GAAG,GAAI,EACvDD,EAAQ,OAAO,SAAS,EAAI,IAAM,KAAK,GAAK,IAC5C,MAAME,EAAQ,MAAMD,EAAgB,QAAQ,GAAG,GAAG,EAC5CE,EAAQ,IAAIC,GAAa,QAAS,EAAG,GAAI,EAAGlB,EAAe,EAC3DmB,EAAO,MAAMJ,EAAgB,OAAO,IAAI,GAAG,EAC3CK,EAAU,MAAML,EAAgB,UAAU,IAAI,EAAE,EAChDM,EAAS,MAAMN,EAAgB,SAAS,IAAI,CAAC,EAEnDE,EAAM,OAAO,WAAa,GAC1BA,EAAM,OAAO,cAAgB,GAE7BH,EAAQ,OAAO,WAAa,GAC5BA,EAAQ,OAAO,cAAgB,GAC/BE,EAAM,OAAO,WAAa,GAC1BA,EAAM,OAAO,cAAgB,GAC7BG,EAAK,OAAO,WAAa,GACzBA,EAAK,OAAO,cAAgB,GAC5BC,EAAQ,OAAO,WAAa,GAC5BA,EAAQ,OAAO,cAAgB,GAE/BC,EAAO,OAAO,WAAa,GAC3BA,EAAO,OAAO,cAAgB,GAE9B,MAAMzB,EAAU,CACd,CACE,KAAM,UACN,OAAQkB,EAAQ,OAChB,SAAUA,EAAQ,SAClB,OAAQA,EAAQ,OAChB,cAAe,KACf,WAAY,KACZ,MAAOA,EAAQ,MACf,MAAO,aACP,WAAY,CAACnD,EAAM2D,EAAOC,IAAU5D,EAAK,QAAQ2D,EAAQC,CAAK,CACtE,EACM,CACE,KAAM,QACN,OAAQP,EAAM,OACd,SAAUA,EAAM,SAChB,OAAQA,EAAM,OACd,cAAe,KACf,WAAY,KACZ,MAAOA,EAAM,MACb,MAAO,oBACP,WAAY,CAACrD,EAAM2D,EAAOC,IAAU5D,EAAK,QAAQ2D,EAAQC,CAAK,CACtE,EACM,CACE,KAAM,QACN,OAAQN,EAAM,OACd,SAAUA,EAAM,SAChB,OAAQA,EAAM,OACd,cAAe,KACf,WAAY,KACZ,MAAOA,EAAM,MACb,MAAO,WACP,WAAY,CAACtD,EAAM2D,EAAOC,IAAU5D,EAAK,QAAQ2D,EAAQC,CAAK,CACtE,EACM,CACE,KAAM,OACN,OAAQJ,EAAK,OACb,SAAUA,EAAK,SACf,OAAQA,EAAK,OACb,cAAe,KACf,WAAY,MACZ,MAAOA,EAAK,MACZ,MAAO,kBACP,WAAY,CAACxD,EAAM2D,EAAOC,IAAU5D,EAAK,QAAQ2D,EAAQC,CAAK,CACtE,EACM,CACE,KAAM,UACN,OAAQH,EAAQ,OAChB,SAAUA,EAAQ,SAClB,OAAQA,EAAQ,OAChB,cAAe,KACf,WAAY,KACZ,MAAOA,EAAQ,MACf,MAAO,YACP,WAAY,CAACzD,EAAM2D,EAAOC,IAAU5D,EAAK,QAAQ2D,EAAQC,CAAK,CACtE,EACM,CACE,KAAM,SACN,OAAQF,EAAO,OACf,SAAUA,EAAO,SACjB,OAAQA,EAAO,OACf,cAAe,IACf,WAAY,KACZ,MAAOA,EAAO,MACd,MAAO,WACP,WAAY,CAAC1D,EAAM2D,EAAOC,IAAU5D,EAAK,QAAQ2D,EAAQC,CAAK,CACtE,CACA,EAEIC,GAA0B5B,CAAO,EAEjC,UAAW6B,KAAK7B,EACd6B,EAAE,SAAS,QAAQ,GAAI,EAGzB,OAAO7B,CACX,CAIA,SAASsB,GAAaQ,EAAY9H,EAAMlE,EAAUiM,EAAMC,EAAQ,CAE5D,IAAIrJ,EACAqJ,aAAmBC,GACrBtJ,EAAWqJ,EAEXrJ,EAAW,IAAIuJ,GAAwB,CACvC,IAAK7B,GAAY,KAAK2B,CAAO,CACnC,CAAO,EAGH,MAAMG,EAAOL,EACPM,EAAW,IAAIxB,EAAqB5G,EAAM,GAAI,EAAE,EAChDiG,EAAS,IAAIa,EAAWsB,EAAUzJ,CAAQ,EAC1C0J,EAAW,IAAIC,GACfC,EAAe,IAAIC,GACzBD,EAAa,IAAItC,CAAM,EACvBA,EAAO,SAAS,EAAInK,EACpBmK,EAAO,SAAS,EAAI8B,EAAO,KAAK,GAAK,IAWrC,MAAMU,EARY,IAAIC,GACpB,EAAG,EACH5M,EAAUA,EACV,EAAG,EAAI,KAAK,GACZ,GACA,CACN,EAEiC,UAAU,GAAG,EACpC6M,EAAgB,IAAIC,IAAuB,cAAcH,CAAU,EACnEI,EAAgB,IAAIC,GAAwB,CAAE,MAAO,SAAU,YAAa,GAAM,QAAS,GAAK,EAChGC,EAAQ,IAAIC,GAAeL,EAAeE,CAAa,EAC7D,OAAAE,EAAM,SAAS,EAAI,KAAK,GAAK,EAC7B9C,EAAO,MAAQ8C,EACfR,EAAa,IAAIQ,CAAK,EAGtBV,EAAS,IAAIE,CAAY,EAElB,CAAC,KAAAJ,EAAK,OAAAlC,EAAO,SAAAoC,EAAU,MAAAU,EAAM,OADrB,CAAC9C,CAAM,CACoB,CAC9C,CAEA,eAAekB,EAAgBgB,EAAKrM,EAASmN,EAAM,CAE7C,MAAMhD,EAAS,MAAMiD,GAAef,CAAI,EACxClC,EAAO,SAAUkD,GAAU,CACrBA,EAAM,SACRA,EAAM,SAAW,IAAItC,EAA2B,CAC9C,IAAKsC,EAAM,SAAS,IACpB,MAAOA,EAAM,SAAS,KAClC,CAAW,EACDA,EAAM,SAAS,qBAAoB,EAE7C,CAAO,EAED,MAAMd,EAAW,IAAIC,GACfC,EAAe,IAAIC,GACzBD,EAAa,IAAItC,CAAM,EAEvBA,EAAO,SAAS,EAAInK,EACpBmK,EAAO,MAAM,IAAIgD,EAAMA,EAAMA,CAAK,EAUlC,MAAMR,EARY,IAAIC,GACpB,EAAG,EACH5M,EAAUA,EACV,EAAG,EAAI,KAAK,GACZ,GACA,CACR,EAEmC,UAAU,GAAG,EACpC6M,EAAgB,IAAIC,IAAuB,cAAcH,CAAU,EACnEI,EAAgB,IAAIC,GAAwB,CAAE,MAAO,SAAU,YAAa,GAAM,QAAS,GAAK,EAChGC,EAAQ,IAAIC,GAAeL,EAAeE,CAAa,EAC7DE,EAAM,SAAS,EAAI,KAAK,GAAK,EAC7B9C,EAAO,MAAQ8C,EAEfR,EAAa,IAAIQ,CAAK,EAEtBV,EAAS,IAAIE,CAAY,EAGzB,IAAIa,EAAS,CAAA,EACb,OAAAnD,EAAO,SAASkD,GAAS,CACnBA,EAAM,QACRC,EAAO,KAAKD,CAAK,CAE3B,CAAO,EAGM,CAAC,KAAAhB,EAAK,OAAAlC,EAAO,SAAAoC,EAAS,MAAAU,EAAM,OAAAK,CAAM,CAC/C,CAGA,SAASxB,GAA0B5B,EAAQ,CACzC,QAASnI,EAAG,EAAEA,EAAEmI,EAAQ,OAAOnI,IACTmI,EAAQnI,CAAC,EAAE,SACnB,SAASsL,GAAS,EAC1BA,EAAM,QAAUA,EAAM,UACtBA,EAAM,SAAS,YAAc,GACrC,CAAO,CAEP,CC5QO,MAAME,EAAa,CACxB,YAAY,CACV,IAAAtD,EACA,QAAAC,EACA,OAAAxG,EACA,SAAAuF,EACA,YAAAO,EACA,QAAAgE,EACA,OAAA1E,CACJ,EAAK,CACD,KAAK,UAAa,IAAI2E,GACtB,KAAK,IAAMxD,EACX,KAAK,OAASA,EAAI,SAClB,KAAK,QAAUC,EACf,KAAK,OAASxG,EACd,KAAK,SAAWuF,EAChB,KAAK,YAAcO,EACnB,KAAK,QAAUgE,EACf,KAAK,OAAS1E,EACd,KAAK,eAAiB,KAAK,QAAQ,QAAQiD,GAAKA,EAAE,MAAM,EACxD,KAAK,eAAe,QAAQ,KAAK,GAAG,EACpC,KAAK,YAAc,IAAI9M,EAGvB,KAAK,QAAU,KAAK,QAAQ,KAAK,IAAI,EACrC,KAAK,YAAc,KAAK,YAAY,KAAK,IAAI,CACjD,CAEE,QAAQ0C,EAAO,CACbA,EAAM,eAAc,EAElBiC,EAAM,SAAS,EAAKjC,EAAM,QAAU,OAAO,WAAc,EAAI,EAC7DiC,EAAM,SAAS,EAAI,EAAGjC,EAAM,QAAU,OAAO,aAAe,EAAI,EAEhE,KAAK,UAAU,cAAciC,EAAM,SAAU,KAAK,MAAM,EACxD,IAAI8J,EAAa,KAAK,UAAU,iBAAiB,KAAK,cAAc,EAEpE,GAAIA,EAAW,OAAS,EAAG,CACzB,MAAMC,EAAgBD,EAAW,CAAC,EAAE,OAC9BE,EAAsBC,GAAeF,EAAc,KAAK,OAAQ,KAAK,OAAO,EAClF,IAAIG,EAAiB,KAOrB,GANIF,IAAwB,EAC1BE,EAAiB,KAAK,IACbF,EAAsB,IAC/BE,EAAiB,KAAK,QAAQF,EAAsB,CAAC,GAGnDE,EAAgB,CAClB,OAAO,YAAcF,EACrBhK,EAAM,OAAS,KAAK,QAAQgK,CAAmB,EAC/C,MAAMG,EAAyB,IAAI,YAAY,2BAC7C,CACE,OAAQ,CAAC,MAAO,OAAO,WAAW,CAChD,CACA,EACU,OAAO,cAAcA,CAAsB,EAC3CvF,EAAS,kBAAoB,EAE7B,MAAMwF,EAAiB,IAAI3P,EAE3B,GAAMyP,IAAmB,KAAK,IAAM,CAClC,MAAMG,EAA8B,IAAI,YAAY,mBAChD,CACI,OAAQ,CAAC,QAAS,EAAE,SAAU,GAAI,CAEtD,CACA,EACY,KAAK,OAAO,cAAcA,CAA2B,EAErDH,EAAe,OAAO,iBAAiBE,CAAc,CACjE,CAEU,OAAO,cAAc,IAAI,YAAY,gBAAgB,CAAC,EAEtDpK,EAAM,sBAAwB,GAC9B,KAAK,SAAS,OAAO,KAAKoK,CAAc,EACxC,KAAK,OAAO,OAAOA,CAAc,EACjCpK,EAAM,qBAAqB,KAAKoK,CAAc,EAAE,IAC9C,KAAK,OAAO,SAAS,QAAQ,IAAIA,CAAc,EAAE,UAAS,EAAG,eAAepK,EAAM,MAAM,CACpG,EAEU,MAAMsK,EAAsB,IAAI,YAAY,uBACtC,CACI,OAAQ,CAAC,eAAgBJ,EAAe,MAAM,GAAG,CACrE,CACA,EACY,KAAK,OAAO,cAAcI,CAAmB,EAE/C,WAAW,IAAI,CACb,OAAO,cAAc,IAAI,YAAY,sBAAsB,CAAC,CACxE,EAAY,GAAI,EAEN,SAAS,KAAK,MAAM,OAAS,UAC7BtK,EAAM,aAAe,GACrBA,EAAM,aAAe,GACrB,SAAS,eAAe,WAAW,EAAE,MAAM,QAAU,OACrD,KAAK,YAAY,gBAAkB,CAAA,CAC7C,CACA,CACA,CAEE,YAAYjC,EAAO,CACXiC,EAAM,eAEZjC,EAAM,eAAc,EACpBiC,EAAM,aAAe,GACrB,KAAK,YAAY,EAAIjC,EAAM,QAC3B,KAAK,YAAY,EAAIA,EAAM,QAE3BiC,EAAM,SAAS,EAAKjC,EAAM,QAAU,OAAO,WAAc,EAAI,EAC7DiC,EAAM,SAAS,EAAI,EAAGjC,EAAM,QAAU,OAAO,aAAe,EAAI,EACpE,CAGE,2BAA2BhD,EAAOwP,EAAM,CAEtC,GAAIxP,IAAW,KAAK,IAAK,CACvBwP,EAAK,UAAY,aACjB,MACN,CAGI,UAAWhE,KAAU,KAAK,QACxB,GAAIA,EAAO,OAAO,SAASxL,CAAM,EAAG,CAClCwP,EAAK,UAAYhE,EAAO,MACxB,MACR,CAGI,QAAQ,IAAIxL,EAAO,YAAY,EAE/BwP,EAAK,UAAY,GACjBA,EAAK,MAAM,QAAU,MACzB,CAEE,QAAS,CACP,KAAK,OAAO,iBAAiB,QAAS,KAAK,QAAS,EAAK,EACzD,KAAK,OAAO,iBAAiB,YAAa,KAAK,YAAa,EAAK,CACrE,CAEE,QAAS,CACP,KAAK,OAAO,oBAAoB,QAAS,KAAK,OAAO,EACrD,KAAK,OAAO,oBAAoB,YAAa,KAAK,WAAW,CACjE,CACA,CAIK,SAASC,GAAezP,EAAQ0P,EAAmB,CACpD,IAAIC,EAAU3P,EACd,KAAO2P,GAAS,CACd,GAAIA,IAAYD,EAAmB,MAAO,GAC1CC,EAAUA,EAAQ,MACxB,CACI,MAAO,EACX,CAEE,SAAST,GAAeF,EAAe/C,EAAQV,EAAS,CACtD,GAAIyD,EAAc,WAAa/C,EAC7B,MAAO,GAGT,QAAS,EAAI,EAAG,EAAIV,EAAQ,OAAQ,IAClC,GAAIA,EAAQ,CAAC,EAAE,QAAUkE,GAAeT,EAAezD,EAAQ,CAAC,EAAE,MAAM,EACtE,OAAO,EAAE,EAGb,OAAO,IACX,CC3KO,SAASqE,GAAkBtE,EAAK,CACnC,MAAMuE,EAASvE,EAAI,SAAS,EACtBwE,EAAU,GACVC,EAAW,IACXC,EAAY,YAAY,IAAG,EAEjC,SAASC,EAAKC,EAAa,CACzB,MAAMC,EAAUD,EAAcF,EACxBI,EAAI,KAAK,IAAID,EAAUJ,EAAU,CAAC,EAGlCM,EAAS,EAAI,KAAK,IAAI,EAAID,EAAG,CAAC,EAEpC9E,EAAI,SAAS,EAAIuE,GAAUC,EAAUD,GAAUQ,EAE3CD,EAAI,EACN,sBAAsBH,CAAI,EAE1B,OAAO,cAAc,IAAI,YAAY,SAAS,CAAC,CAEvD,CAEI,sBAAsBA,CAAI,CAC9B,CAEO,SAASK,GAA0BhF,EAAK,CAC3C,MAAMuE,EAASvE,EAAI,SAAS,EACtBwE,EAAU,EAEVS,EAAajF,EAAI,MAAM,EACvBkF,EAAc,EAEdT,EAAW,KACXC,EAAY,YAAY,IAAG,EAEjC,SAASS,EAAQC,EAAM,CACrB,MAAMP,EAAUO,EAAOV,EACjBI,EAAI,KAAK,IAAID,EAAUJ,EAAU,CAAC,EAClCM,EAASD,EAAIA,GAAK,EAAI,EAAIA,GAGhC9E,EAAI,SAAS,EAAIuE,GAAUC,EAAUD,GAAUQ,EAG/C,MAAM7B,EAAQ+B,GAAcC,EAAcD,GAAcF,EACxD/E,EAAI,MAAM,IAAIkD,EAAOA,EAAOA,CAAK,EAE7B4B,EAAI,EACN,sBAAsBK,CAAO,EAE7B,OAAO,cAAc,IAAI,YAAY,iBAAiB,CAAC,CAE/D,CAEI,sBAAsBA,CAAO,CACjC,CAEQ,SAASE,GAAe1E,EAAO2E,EAAeb,EAAW,IAAM,CACnE,GAAI,CAAC9D,EAAQ,OAEbA,EAAO,YAAc,GACrB,MAAM4E,EAAe5E,EAAO,QACtB+D,EAAY,YAAY,IAAG,EAEjC,SAASc,EAASZ,EAAa,CAC7B,MAAMC,EAAUD,EAAcF,EACxBI,EAAI,KAAK,IAAID,EAAUJ,EAAU,CAAC,EAClCM,EAASD,EAAIA,GAAK,EAAI,EAAIA,GAEhCnE,EAAO,QAAU4E,GAAgBD,EAAgBC,GAAgBR,EAE7DD,EAAI,GACN,sBAAsBU,CAAQ,CAEtC,CAEI,sBAAsBA,CAAQ,CAClC,CAEO,SAASC,GAAsBC,EAAS1F,EAAIC,EAAS,CACxD,MAAM0F,EAAgBD,IAAa1F,EACnCA,EAAI,SAAS,YAAc,GAC3BA,EAAI,SAAS,QAAU2F,EAAgB,EAAI,EAE3C1F,EAAQ,QAAS2F,GAAc,CAC7B,MAAM5H,EAAO4H,EAAU,OAEvB,GAAI,CAAC5H,EAAM,OAEX,MAAM6H,EAAaD,IAAcF,EAEjC1H,EAAK,SAASoF,GAAS,EAChBA,EAAM,QAAUA,EAAM,SAAWA,EAAM,YACxB,MAAM,QAAQA,EAAM,QAAQ,EAAIA,EAAM,SAAW,CAACA,EAAM,QAAQ,GACxE,QAAQ0C,GAAO,CACvBA,EAAI,YAAc,GAClBA,EAAI,QAAUD,EAAa,EAAI,CAC3C,CAAW,EAEDzC,EAAM,QAAU,GAE1B,CAAO,CACP,CAAK,CACL,CAEO,SAAS2C,GAAyBlC,EAAgB5D,EAAS+F,EAAQ,IAAIvB,EAAS,IAAM,CAC3F,QAAQ,IAAI,iBAAiBZ,CAAc,EACzC,QAAS/L,EAAImI,EAAQ,OAAS,EAAGnI,GAAK,EAAGA,IAAK,CAC5C,MAAMwK,EAAWrC,EAAQnI,CAAC,EAAE,SAEtB+N,EADS5F,EAAQnI,CAAC,EAAE,SACI+L,EAAe,OAE7C,WAAW,IAAM,CACf,GAAIgC,GACF,GAAIhC,EAAe,OAASA,EAAe,MAAM,SAAU,CAMzD,IAASoC,EAAT,SAAmBrB,EAAa,CAC9B,MAAMC,EAAUD,EAAcF,EACxBI,EAAI,KAAK,IAAID,EAAUJ,EAAU,CAAC,EAClCM,EAASD,EAAIA,GAAK,EAAI,EAAIA,GAEhChC,EAAc,QAAU,EAAIiC,EAExBD,EAAI,EACN,sBAAsBmB,CAAS,EAE/BpC,EAAe,MAAM,QAAU,EAE/C,EAjBY,MAAMf,EAAgBe,EAAe,MAAM,SAC3Cf,EAAc,YAAc,GAE5B,MAAM4B,EAAY,YAAY,IAAG,EAgBjC,sBAAsBuB,CAAS,CAC3C,OAEUC,GAAW5D,CAAQ,CAE7B,GAAUrC,EAAQ,OAAS,EAAInI,GAAKkO,CAAK,CACzC,CACA,CAES,SAASG,GAAiBlG,EAAS+F,EAAQ,IAAKI,EAAa,IAAM,GAAI,CAC5EnG,EAAQ,QAAQ,CAACC,EAAQ1F,IAAU,CACjC,WAAW,IAAM,CACf6L,GAAanG,EAAO,QAAQ,EAGxB1F,IAAUyF,EAAQ,OAAS,GAC7B,WAAW,IAAM,CACf,OAAO,cAAc,IAAI,YAAY,eAAe,CAAC,EACrDmG,EAAU,CACtB,EAAaJ,CAAK,CAGlB,EAASxL,EAAQwL,CAAK,CACtB,CAAK,CACL,CAIA,SAASE,GAAWI,EAAa,CACjC,OAAO,IAAI,QAASC,GAAY,CAC5BD,EAAY,SAASlD,GAAS,CAC9B,GAAIA,EAAM,QAAUA,EAAM,OAAQ,CAI9B,IAASoD,EAAT,SAAc5B,EAAa,CAC3B,MAAMC,EAAUD,EAAcF,EACxBI,EAAI,KAAK,IAAID,EAAU,IAAU,CAAC,EAClCE,EAAS,EAAKD,EAAIA,GAAK,EAAI,EAAIA,GAErC1B,EAAM,SAAS,QAAU2B,EAErBD,EAAI,EACJ,sBAAsB0B,CAAI,GAE1BpD,EAAM,QAAU,GAChBmD,IAEZ,EAfQ,MAAM7B,EAAY,YAAY,IAAG,EAiBjC,sBAAsB8B,CAAI,CAClC,CACA,CAAK,CACL,CAAC,CACD,CAGA,SAASH,GAAaC,EAAa,CACnCA,EAAY,QAAU,GAEtBA,EAAY,SAASlD,GAAS,CAC1B,IAAKA,EAAM,QAAUA,EAAM,SAAWA,EAAM,SAAU,CAkBtD,IAASoD,EAAT,SAAc5B,EAAa,CACvB,MAAMC,EAAUD,EAAcF,EACxBI,EAAI,KAAK,IAAID,EAAUJ,EAAU,CAAC,EAClCM,EAASD,EAAIA,GAAK,EAAI,EAAIA,GAEhC2B,EAAU,QAAQX,GAAO,CACzBA,EAAI,QAAUf,CACtB,CAAS,EAEGD,EAAI,GACR,sBAAsB0B,CAAI,CAElC,EA7BIpD,EAAM,QAAU,GAEhB,MAAMqD,EAAY,MAAM,QAAQrD,EAAM,QAAQ,EAAIA,EAAM,SAAW,CAACA,EAAM,QAAQ,EAClFqD,EAAU,QAAQX,GAAO,CACrBA,EAAI,YAAc,GAGlBA,EAAI,QAAU,EAGVA,EAAI,aAAe,KAAOA,EAAI,WAAa,IAC3CA,EAAI,OAASA,EAAI,MAAM,IAAM,SAAWA,EAAI,MAAM,EAAI,EAClE,CAAK,EAED,MAAMrB,EAAW,IACXC,EAAY,YAAY,IAAG,EAgBjC,sBAAsB8B,CAAI,CAC9B,CACA,CAAC,CACD,CCjOO,SAASE,GAAa,CAAC,MAAAhP,EAAM,IAAAsI,EAAI,QAAAC,EAAQ,SAAAjB,EAAS,OAAAvF,EAAO,QAAA8J,EAAQ,OAAA1E,CAAM,EAAE,CAC5E,MAAMrE,EAAQ9C,EAAM,OAAO,MAC3B,IAAIgO,EAEAlL,GAAS,EACTkL,EAAW1F,EAEX0F,EAAWzF,EAAQzF,EAAQ,CAAC,EAEhCb,EAAM,OAAS4J,EAAQ/I,CAAK,EAE5BkL,EAAS,OAAO,QAAU,GACtBA,EAAS,OAAO,SAAStC,GAAS,CAClCA,EAAM,QAAU,GACZA,EAAM,WACVA,EAAM,SAAS,YAAc,GAC7BA,EAAM,SAAS,QAAU,EAEjC,CAAK,EAEDqC,GAAsBC,EAAS1F,EAAIC,CAAO,EAC1C,MAAM8D,EAAiB,IAAI3P,EAC3BsR,EAAS,OAAO,iBAAiB3B,CAAc,EAI/C/E,EAAS,OAAO,KAAK+E,CAAc,EACnCtK,EAAO,OAAOsK,CAAc,EAC5BpK,EAAM,qBAAqB,KAAKoK,CAAc,EAAE,IAChDtK,EAAO,SAAS,MAAK,EAAG,IAAIsK,CAAc,EAAE,UAAS,EAAG,eAAepK,EAAM,MAAM,CACvF,EAEIF,EAAO,SAAS,KAAKE,EAAM,oBAAoB,CACnD,CAES,eAAegN,GAAc9H,EAAON,EAAU,CACnD5E,EAAM,aAAe,GACrB,QAAQ,IAAI,oBAAoB,EAChC,MAAMiN,EAAoB,IAAI,YAAY,mBAAmB,CAC3D,OAAO,CAAC,QAAQ,EAAE,SAAS,GAAI,CACrC,CAAK,EACD/H,EAAO,cAAc+H,CAAiB,EACtCrI,EAAS,kBAAoB,EAE7B,MAAMsI,EAAc,IAAK,YAAY,gBAAgB,CACjD,OAAQ,CAAC,MAAM,GAAI,CAC3B,CAAO,EACH,WAAW,IAAM,CACf,OAAO,cAAcA,CAAW,CACtC,EAAO,GAAG,CACV,CAES,SAASC,EAAa,CAAC,OAAAjI,EAAQ,SAAA/F,EAAU,OAAAW,EAAQ,SAAA6F,EAAU,SAAAD,CAAQ,EAAG,CAC7E,MAAM0H,EAAM,OAAO,kBAAoB,EAGvCtN,EAAO,OAAS,OAAO,WAAa,OAAO,YAC3CA,EAAO,uBAAsB,EAG7BX,EAAS,cAAciO,CAAG,EAC1BjO,EAAS,QAAQ,OAAO,WAAY,OAAO,YAAa,EAAK,EAE7D+F,EAAO,MAAM,MAAQ,QACrBA,EAAO,MAAM,OAAS,QAEtBQ,EAAS,QAAQ,OAAO,WAAY,OAAO,WAAW,EAGlDC,GACFA,EAAS,SAAS,SAAS,WAAc,MAAM,IAC7C,GAAK,OAAO,WAAayH,GACzB,GAAK,OAAO,YAAcA,EAChC,EAGE,QAAQ,IAAI,mBAAmB,CACjC,CChFO,MAAMxD,GAAU,CACnB,GACA,GACA,GACA,GACA,GACA,GACA,EACJ,EAEeyD,EAAwB,IAAI5S,EAAQ,KAAM,IAAK,CAAC,ECPxD,SAAS6S,GAAmB,CAAC,OAAApI,EAAQ,SAAA/F,EAAU,OAAAW,EAAQ,SAAA6F,EAAS,IAAAU,EAAI,QAAAC,EAAQ,SAAAjB,EAAS,SAAAK,CAAQ,EAAE,CAElG,OAAO,iBAAiB,gBAAiB,IAAM,CAC3C,WAAW,IAAM,CACA,SAAS,eAAe,cAAc,EAC9C,UAAU,IAAI,MAAM,CACrC,EAAW,GAAG,CACd,CAAK,EAED,SAAS,eAAe,eAAe,EAAE,iBAAiB,QAAS,IAAM,CACrE,MAAM6E,EAAO,SAAS,eAAe,cAAc,EACnDA,EAAK,MAAM,QAAQ,MAC3B,CAAK,EAGDrF,EAAO,iBAAiB,mBAAoBqI,GAAK7B,GAAerF,EAAI,SAASkH,EAAE,OAAO,QAAQA,EAAE,OAAO,QAAQ,CAAC,EAChHrI,EAAO,iBAAiB,uBAAwBqI,GAAInB,GAAyBmB,EAAE,OAAO,eAAejH,EAAQiH,EAAE,OAAO,KAAK,CAAC,EAE5H,OAAO,iBAAiB,gBAAgB,IAAI,CAC5CP,GAAc9H,EAAON,CAAQ,CACjC,CAAK,EAED,OAAO,iBAAiB,eAAgB,IAAM,CAC9C+F,GAAkBtE,CAAG,CACzB,CAAK,EAED,OAAO,iBAAiB,+BAAgC,IAAM,CAC1DgF,GAA0BhF,CAAG,EAC7BzB,EAAS,kBAAoB,CACrC,CAAK,EACD,OAAO,iBAAiB,gBAAkB2I,GAAM,CAACf,GAAiBlG,EAC9DiH,EAAE,OAAO,MACT,IAAM,CAACvN,EAAM,aAAe,EAAK,CAAC,CAC1C,CAAK,EACD,OAAO,iBAAiB,SAAUmN,EAAa,CAAC,OAAAjI,EAAO,SAAA/F,EAAS,OAAAW,EAAO,SAAA6F,EAAS,SAAAD,CAAQ,CAAC,CAAC,EAC1F,OAAO,iBAAiB,oBAAsByH,EAAa,CAAC,OAAAjI,EAAO,SAAA/F,EAAS,OAAAW,EAAO,SAAA6F,EAAS,SAAAD,CAAQ,CAAC,CAAC,EACtG,OAAO,iBAAiB,eAAiB3H,GAAU,CACnDgP,GAAa,CAAC,MAAAhP,EAAM,IAAAsI,EAAI,QAAAC,EAAQ,SAAAjB,EAAS,OAAAvF,EAAO,QAAA8J,GAAQ,OAAA1E,CAAM,CAAC,CACnE,CAAK,EAEgB,IAAI,eAAe,IAAM,CACtC,QAAQ,IAAI,kBAAkB,EAE9BiI,EAAa,CAAC,OAAAjI,EAAO,SAAA/F,EAAS,OAAAW,EAAO,SAAA6F,EAAS,SAAAD,CAAQ,CAAC,CAC/D,CAAK,EAEQ,QAAQ,SAAS,eAAe,aAAa,CAAC,CAC3D,CCjDO,MAAM8F,GAAU,CAACnF,EAAIC,EAAQkH,EAAa5H,EAAY9F,EAAOuF,EAASK,IAAY,CAErFW,EAAI,QAAQ,MAASzB,EAAS,YAAY,EAG1C,UAAWuD,KAAK7B,EACd6B,EAAE,WAAWA,EAAE,OAAQA,EAAE,cAAevD,EAAS,YAAY,EAC7DuD,EAAE,SAAS,QAAQA,EAAE,WAAavD,EAAS,iBAAiB,EAE7D4I,EAAa,UAAU,cAAcxN,EAAM,SAAUF,CAAM,EAG5D,IAAIgK,EAAa0D,EAAa,UAAU,iBAAiBA,EAAa,cAAc,EACpF,MAAMjD,EAAO,SAAS,eAAe,WAAW,EAIhD,GAFA3E,EAAY,gBAAkB,CAAA,EAE1B5F,EAAM,aACR,GAAK8J,EAAW,OAAS,GAAO9J,EAAM,cAAgB,GAAO,CAC3D,MAAMyN,EAAoB3D,EAAW,CAAC,EAAE,OAExC,SAAS,KAAK,MAAM,OAAS,UAE7BlE,EAAY,gBAAkB,CAAC6H,CAAiB,EAChDD,EAAa,2BAA2BC,EAAkBlD,CAAI,EAG9DA,EAAK,MAAM,KAAO,GAAGiD,EAAa,YAAY,EAAI,EAAE,KACpDjD,EAAK,MAAM,IAAM,GAAGiD,EAAa,YAAY,EAAI,EAAE,KACnDjD,EAAK,MAAM,QAAU,OAC7B,MACMA,EAAK,UAAY,GACjBA,EAAK,MAAM,QAAU,OACrB,SAAS,KAAK,MAAM,OAAS,UAM7BvK,EAAM,uBACRF,EAAO,SAAS,KAAKE,EAAM,qBAAsB,GAAI,EACjDF,EAAO,SAAS,WAAWE,EAAM,oBAAoB,EAAI,IAC3DA,EAAM,sBAAwB,KAEvBA,EAAM,eACfF,EAAO,SAAS,KAAKuN,EAAuB,GAAI,EAE5CvN,EAAO,SAAS,WAAWuN,CAAqB,EAAI,IACpDrN,EAAM,aAAe,KAIzBqF,EAAS,OAAM,EACfK,EAAS,OAAM,EACf,sBAAsB,IAAI8F,GAAQnF,EAAIC,EAAQkH,EAAa5H,EAAY9F,EAAOuF,EAASK,CAAQ,CAAC,CAEpG,ECnDO,eAAegI,GAAgBC,EAAM,CAE1C,KAAM,CAAE,MAAA9N,EAAO,OAAAC,EAAQ,SAAAX,EAAU,SAAAkG,EAAU,OAAAH,CAAM,EAAKL,GAAS,EACzD,CAAE,SAAAa,EAAS,YAAAE,EAAY,SAAAD,CAAQ,EAAKL,GAAiBnG,EAAUU,EAAOC,CAAM,EAClFiG,GAAclG,CAAK,EAGnB,MAAMwG,EAAMU,GAAO,EAGbT,EAAU,MAAMiB,GAAiB,EAEvCnB,GAAmBvG,EAAMwG,EAAIC,CAAO,EAC9BqH,EAIJnH,GAAa,GAHbM,GAAcT,CAAG,EACjBQ,GAAuBP,CAAO,GAKhC,MAAMkH,EAAe,IAAI7D,GAAa,CAAC,IAAAtD,EAAI,QAAAC,EAAQ,OAAAxG,EAAO,SAAAuF,EAAS,YAAAO,EAAY,QAAAgE,GAAQ,OAAA1E,CAAM,CAAC,EAG9FsI,EAAa,OAAM,EACnBhC,GAAQnF,EAAIC,EAAQkH,EAAa5H,EAAY9F,EAAOuF,EAASK,CAAQ,EACrE4H,GAAmB,CAAC,OAAApI,EAAQ,SAAA/F,EAAU,OAAAW,EAAQ,SAAA6F,EAAS,IAAAU,EAAI,QAAAC,EAAQ,SAAAjB,EAAS,SAAAK,CAAQ,CAAC,CACvF","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10]}