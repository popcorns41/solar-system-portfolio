{"version":3,"file":"solarSystem-D9zUUExx.js","sources":["../../node_modules/three/examples/jsm/controls/OrbitControls.js","../../node_modules/three/examples/jsm/shaders/CopyShader.js","../../node_modules/three/examples/jsm/postprocessing/Pass.js","../../node_modules/three/examples/jsm/postprocessing/ShaderPass.js","../../node_modules/three/examples/jsm/postprocessing/MaskPass.js","../../node_modules/three/examples/jsm/postprocessing/EffectComposer.js","../../node_modules/three/examples/jsm/shaders/LuminosityHighPassShader.js","../../node_modules/three/examples/jsm/postprocessing/UnrealBloomPass.js","../../node_modules/three/examples/jsm/postprocessing/RenderPass.js","../../node_modules/three/examples/jsm/postprocessing/OutlinePass.js","../../../../../../images/sun.jpg","../../../../../../images/8ball.jpg","../../scripts/solarSystem.js"],"sourcesContent":["import {\r\n\tControls,\r\n\tMOUSE,\r\n\tQuaternion,\r\n\tSpherical,\r\n\tTOUCH,\r\n\tVector2,\r\n\tVector3,\r\n\tPlane,\r\n\tRay,\r\n\tMathUtils\r\n} from 'three';\r\n\r\n/**\r\n * Fires when the camera has been transformed by the controls.\r\n *\r\n * @event OrbitControls#change\r\n * @type {Object}\r\n */\r\nconst _changeEvent = { type: 'change' };\r\n\r\n/**\r\n * Fires when an interaction was initiated.\r\n *\r\n * @event OrbitControls#start\r\n * @type {Object}\r\n */\r\nconst _startEvent = { type: 'start' };\r\n\r\n/**\r\n * Fires when an interaction has finished.\r\n *\r\n * @event OrbitControls#end\r\n * @type {Object}\r\n */\r\nconst _endEvent = { type: 'end' };\r\n\r\nconst _ray = new Ray();\r\nconst _plane = new Plane();\r\nconst _TILT_LIMIT = Math.cos( 70 * MathUtils.DEG2RAD );\r\n\r\nconst _v = new Vector3();\r\nconst _twoPI = 2 * Math.PI;\r\n\r\nconst _STATE = {\r\n\tNONE: - 1,\r\n\tROTATE: 0,\r\n\tDOLLY: 1,\r\n\tPAN: 2,\r\n\tTOUCH_ROTATE: 3,\r\n\tTOUCH_PAN: 4,\r\n\tTOUCH_DOLLY_PAN: 5,\r\n\tTOUCH_DOLLY_ROTATE: 6\r\n};\r\nconst _EPS = 0.000001;\r\n\r\n\r\n/**\r\n * Orbit controls allow the camera to orbit around a target.\r\n *\r\n * OrbitControls performs orbiting, dollying (zooming), and panning. Unlike {@link TrackballControls},\r\n * it maintains the \"up\" direction `object.up` (+Y by default).\r\n *\r\n * - Orbit: Left mouse / touch: one-finger move.\r\n * - Zoom: Middle mouse, or mousewheel / touch: two-finger spread or squish.\r\n * - Pan: Right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move.\r\n *\r\n * ```js\r\n * const controls = new OrbitControls( camera, renderer.domElement );\r\n *\r\n * // controls.update() must be called after any manual changes to the camera's transform\r\n * camera.position.set( 0, 20, 100 );\r\n * controls.update();\r\n *\r\n * function animate() {\r\n *\r\n * \t// required if controls.enableDamping or controls.autoRotate are set to true\r\n * \tcontrols.update();\r\n *\r\n * \trenderer.render( scene, camera );\r\n *\r\n * }\r\n * ```\r\n *\r\n * @augments Controls\r\n * @three_import import { OrbitControls } from 'three/addons/controls/OrbitControls.js';\r\n */\r\nclass OrbitControls extends Controls {\r\n\r\n\t/**\r\n\t * Constructs a new controls instance.\r\n\t *\r\n\t * @param {Object3D} object - The object that is managed by the controls.\r\n\t * @param {?HTMLDOMElement} domElement - The HTML element used for event listeners.\r\n\t */\r\n\tconstructor( object, domElement = null ) {\r\n\r\n\t\tsuper( object, domElement );\r\n\r\n\t\tthis.state = _STATE.NONE;\r\n\r\n\t\t/**\r\n\t\t * The focus point of the controls, the `object` orbits around this.\r\n\t\t * It can be updated manually at any point to change the focus of the controls.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t */\r\n\t\tthis.target = new Vector3();\r\n\r\n\t\t/**\r\n\t\t * The focus point of the `minTargetRadius` and `maxTargetRadius` limits.\r\n\t\t * It can be updated manually at any point to change the center of interest\r\n\t\t * for the `target`.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t */\r\n\t\tthis.cursor = new Vector3();\r\n\r\n\t\t/**\r\n\t\t * How far you can dolly in (perspective camera only).\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tthis.minDistance = 0;\r\n\r\n\t\t/**\r\n\t\t * How far you can dolly out (perspective camera only).\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default Infinity\r\n\t\t */\r\n\t\tthis.maxDistance = Infinity;\r\n\r\n\t\t/**\r\n\t\t * How far you can zoom in (orthographic camera only).\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tthis.minZoom = 0;\r\n\r\n\t\t/**\r\n\t\t * How far you can zoom out (orthographic camera only).\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default Infinity\r\n\t\t */\r\n\t\tthis.maxZoom = Infinity;\r\n\r\n\t\t/**\r\n\t\t * How close you can get the target to the 3D `cursor`.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tthis.minTargetRadius = 0;\r\n\r\n\t\t/**\r\n\t\t * How far you can move the target from the 3D `cursor`.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default Infinity\r\n\t\t */\r\n\t\tthis.maxTargetRadius = Infinity;\r\n\r\n\t\t/**\r\n\t\t * How far you can orbit vertically, lower limit. Range is `[0, Math.PI]` radians.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tthis.minPolarAngle = 0;\r\n\r\n\t\t/**\r\n\t\t * How far you can orbit vertically, upper limit. Range is `[0, Math.PI]` radians.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default Math.PI\r\n\t\t */\r\n\t\tthis.maxPolarAngle = Math.PI;\r\n\r\n\t\t/**\r\n\t\t * How far you can orbit horizontally, lower limit. If set, the interval `[ min, max ]`\r\n\t\t * must be a sub-interval of `[ - 2 PI, 2 PI ]`, with `( max - min < 2 PI )`.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default -Infinity\r\n\t\t */\r\n\t\tthis.minAzimuthAngle = - Infinity;\r\n\r\n\t\t/**\r\n\t\t * How far you can orbit horizontally, upper limit. If set, the interval `[ min, max ]`\r\n\t\t * must be a sub-interval of `[ - 2 PI, 2 PI ]`, with `( max - min < 2 PI )`.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default -Infinity\r\n\t\t */\r\n\t\tthis.maxAzimuthAngle = Infinity;\r\n\r\n\t\t/**\r\n\t\t * Set to `true` to enable damping (inertia), which can be used to give a sense of weight\r\n\t\t * to the controls. Note that if this is enabled, you must call `update()` in your animation\r\n\t\t * loop.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.enableDamping = false;\r\n\r\n\t\t/**\r\n\t\t * The damping inertia used if `enableDamping` is set to `true`.\r\n\t\t *\r\n\t\t * Note that for this to work, you must call `update()` in your animation loop.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 0.05\r\n\t\t */\r\n\t\tthis.dampingFactor = 0.05;\r\n\r\n\t\t/**\r\n\t\t * Enable or disable zooming (dollying) of the camera.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.enableZoom = true;\r\n\r\n\t\t/**\r\n\t\t * Speed of zooming / dollying.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tthis.zoomSpeed = 1.0;\r\n\r\n\t\t/**\r\n\t\t * Enable or disable horizontal and vertical rotation of the camera.\r\n\t\t *\r\n\t\t * Note that it is possible to disable a single axis by setting the min and max of the\r\n\t\t * `minPolarAngle` or `minAzimuthAngle` to the same value, which will cause the vertical\r\n\t\t * or horizontal rotation to be fixed at that value.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.enableRotate = true;\r\n\r\n\t\t/**\r\n\t\t * Speed of rotation.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tthis.rotateSpeed = 1.0;\r\n\r\n\t\t/**\r\n\t\t * How fast to rotate the camera when the keyboard is used.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tthis.keyRotateSpeed = 1.0;\r\n\r\n\t\t/**\r\n\t\t * Enable or disable camera panning.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.enablePan = true;\r\n\r\n\t\t/**\r\n\t\t * Speed of panning.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tthis.panSpeed = 1.0;\r\n\r\n\t\t/**\r\n\t\t * Defines how the camera's position is translated when panning. If `true`, the camera pans\r\n\t\t * in screen space. Otherwise, the camera pans in the plane orthogonal to the camera's up\r\n\t\t * direction.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.screenSpacePanning = true;\r\n\r\n\t\t/**\r\n\t\t * How fast to pan the camera when the keyboard is used in\r\n\t\t * pixels per keypress.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 7\r\n\t\t */\r\n\t\tthis.keyPanSpeed = 7.0;\r\n\r\n\t\t/**\r\n\t\t * Setting this property to `true` allows to zoom to the cursor's position.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.zoomToCursor = false;\r\n\r\n\t\t/**\r\n\t\t * Set to true to automatically rotate around the target\r\n\t\t *\r\n\t\t * Note that if this is enabled, you must call `update()` in your animation loop.\r\n\t\t * If you want the auto-rotate speed to be independent of the frame rate (the refresh\r\n\t\t * rate of the display), you must pass the time `deltaTime`, in seconds, to `update()`.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.autoRotate = false;\r\n\r\n\t\t/**\r\n\t\t * How fast to rotate around the target if `autoRotate` is `true`. The default  equates to 30 seconds\r\n\t\t * per orbit at 60fps.\r\n\t\t *\r\n\t\t * Note that if `autoRotate` is enabled, you must call `update()` in your animation loop.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 2\r\n\t\t */\r\n\t\tthis.autoRotateSpeed = 2.0;\r\n\r\n\t\t/**\r\n\t\t * This object contains references to the keycodes for controlling camera panning.\r\n\t\t *\r\n\t\t * ```js\r\n\t\t * controls.keys = {\r\n\t\t * \tLEFT: 'ArrowLeft', //left arrow\r\n\t\t * \tUP: 'ArrowUp', // up arrow\r\n\t\t * \tRIGHT: 'ArrowRight', // right arrow\r\n\t\t * \tBOTTOM: 'ArrowDown' // down arrow\r\n\t\t * }\r\n\t\t * ```\r\n\t\t * @type {Object}\r\n\t\t */\r\n\t\tthis.keys = { LEFT: 'ArrowLeft', UP: 'ArrowUp', RIGHT: 'ArrowRight', BOTTOM: 'ArrowDown' };\r\n\r\n\t\t/**\r\n\t\t * This object contains references to the mouse actions used by the controls.\r\n\t\t *\r\n\t\t * ```js\r\n\t\t * controls.mouseButtons = {\r\n\t\t * \tLEFT: THREE.MOUSE.ROTATE,\r\n\t\t * \tMIDDLE: THREE.MOUSE.DOLLY,\r\n\t\t * \tRIGHT: THREE.MOUSE.PAN\r\n\t\t * }\r\n\t\t * ```\r\n\t\t * @type {Object}\r\n\t\t */\r\n\t\tthis.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\r\n\r\n\t\t/**\r\n\t\t * This object contains references to the touch actions used by the controls.\r\n\t\t *\r\n\t\t * ```js\r\n\t\t * controls.mouseButtons = {\r\n\t\t * \tONE: THREE.TOUCH.ROTATE,\r\n\t\t * \tTWO: THREE.TOUCH.DOLLY_PAN\r\n\t\t * }\r\n\t\t * ```\r\n\t\t * @type {Object}\r\n\t\t */\r\n\t\tthis.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\r\n\r\n\t\t/**\r\n\t\t * Used internally by `saveState()` and `reset()`.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t */\r\n\t\tthis.target0 = this.target.clone();\r\n\r\n\t\t/**\r\n\t\t * Used internally by `saveState()` and `reset()`.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t */\r\n\t\tthis.position0 = this.object.position.clone();\r\n\r\n\t\t/**\r\n\t\t * Used internally by `saveState()` and `reset()`.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tthis.zoom0 = this.object.zoom;\r\n\r\n\t\t// the target DOM element for key events\r\n\t\tthis._domElementKeyEvents = null;\r\n\r\n\t\t// internals\r\n\r\n\t\tthis._lastPosition = new Vector3();\r\n\t\tthis._lastQuaternion = new Quaternion();\r\n\t\tthis._lastTargetPosition = new Vector3();\r\n\r\n\t\t// so camera.up is the orbit axis\r\n\t\tthis._quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\r\n\t\tthis._quatInverse = this._quat.clone().invert();\r\n\r\n\t\t// current position in spherical coordinates\r\n\t\tthis._spherical = new Spherical();\r\n\t\tthis._sphericalDelta = new Spherical();\r\n\r\n\t\tthis._scale = 1;\r\n\t\tthis._panOffset = new Vector3();\r\n\r\n\t\tthis._rotateStart = new Vector2();\r\n\t\tthis._rotateEnd = new Vector2();\r\n\t\tthis._rotateDelta = new Vector2();\r\n\r\n\t\tthis._panStart = new Vector2();\r\n\t\tthis._panEnd = new Vector2();\r\n\t\tthis._panDelta = new Vector2();\r\n\r\n\t\tthis._dollyStart = new Vector2();\r\n\t\tthis._dollyEnd = new Vector2();\r\n\t\tthis._dollyDelta = new Vector2();\r\n\r\n\t\tthis._dollyDirection = new Vector3();\r\n\t\tthis._mouse = new Vector2();\r\n\t\tthis._performCursorZoom = false;\r\n\r\n\t\tthis._pointers = [];\r\n\t\tthis._pointerPositions = {};\r\n\r\n\t\tthis._controlActive = false;\r\n\r\n\t\t// event listeners\r\n\r\n\t\tthis._onPointerMove = onPointerMove.bind( this );\r\n\t\tthis._onPointerDown = onPointerDown.bind( this );\r\n\t\tthis._onPointerUp = onPointerUp.bind( this );\r\n\t\tthis._onContextMenu = onContextMenu.bind( this );\r\n\t\tthis._onMouseWheel = onMouseWheel.bind( this );\r\n\t\tthis._onKeyDown = onKeyDown.bind( this );\r\n\r\n\t\tthis._onTouchStart = onTouchStart.bind( this );\r\n\t\tthis._onTouchMove = onTouchMove.bind( this );\r\n\r\n\t\tthis._onMouseDown = onMouseDown.bind( this );\r\n\t\tthis._onMouseMove = onMouseMove.bind( this );\r\n\r\n\t\tthis._interceptControlDown = interceptControlDown.bind( this );\r\n\t\tthis._interceptControlUp = interceptControlUp.bind( this );\r\n\r\n\t\t//\r\n\r\n\t\tif ( this.domElement !== null ) {\r\n\r\n\t\t\tthis.connect( this.domElement );\r\n\r\n\t\t}\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tconnect( element ) {\r\n\r\n\t\tsuper.connect( element );\r\n\r\n\t\tthis.domElement.addEventListener( 'pointerdown', this._onPointerDown );\r\n\t\tthis.domElement.addEventListener( 'pointercancel', this._onPointerUp );\r\n\r\n\t\tthis.domElement.addEventListener( 'contextmenu', this._onContextMenu );\r\n\t\tthis.domElement.addEventListener( 'wheel', this._onMouseWheel, { passive: false } );\r\n\r\n\t\tconst document = this.domElement.getRootNode(); // offscreen canvas compatibility\r\n\t\tdocument.addEventListener( 'keydown', this._interceptControlDown, { passive: true, capture: true } );\r\n\r\n\t\tthis.domElement.style.touchAction = 'none'; // disable touch scroll\r\n\r\n\t}\r\n\r\n\tdisconnect() {\r\n\r\n\t\tthis.domElement.removeEventListener( 'pointerdown', this._onPointerDown );\r\n\t\tthis.domElement.removeEventListener( 'pointermove', this._onPointerMove );\r\n\t\tthis.domElement.removeEventListener( 'pointerup', this._onPointerUp );\r\n\t\tthis.domElement.removeEventListener( 'pointercancel', this._onPointerUp );\r\n\r\n\t\tthis.domElement.removeEventListener( 'wheel', this._onMouseWheel );\r\n\t\tthis.domElement.removeEventListener( 'contextmenu', this._onContextMenu );\r\n\r\n\t\tthis.stopListenToKeyEvents();\r\n\r\n\t\tconst document = this.domElement.getRootNode(); // offscreen canvas compatibility\r\n\t\tdocument.removeEventListener( 'keydown', this._interceptControlDown, { capture: true } );\r\n\r\n\t\tthis.domElement.style.touchAction = 'auto';\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.disconnect();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Get the current vertical rotation, in radians.\r\n\t *\r\n\t * @return {number} The current vertical rotation, in radians.\r\n\t */\r\n\tgetPolarAngle() {\r\n\r\n\t\treturn this._spherical.phi;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Get the current horizontal rotation, in radians.\r\n\t *\r\n\t * @return {number} The current horizontal rotation, in radians.\r\n\t */\r\n\tgetAzimuthalAngle() {\r\n\r\n\t\treturn this._spherical.theta;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the distance from the camera to the target.\r\n\t *\r\n\t * @return {number} The distance from the camera to the target.\r\n\t */\r\n\tgetDistance() {\r\n\r\n\t\treturn this.object.position.distanceTo( this.target );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds key event listeners to the given DOM element.\r\n\t * `window` is a recommended argument for using this method.\r\n\t *\r\n\t * @param {HTMLDOMElement} domElement - The DOM element\r\n\t */\r\n\tlistenToKeyEvents( domElement ) {\r\n\r\n\t\tdomElement.addEventListener( 'keydown', this._onKeyDown );\r\n\t\tthis._domElementKeyEvents = domElement;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Removes the key event listener previously defined with `listenToKeyEvents()`.\r\n\t */\r\n\tstopListenToKeyEvents() {\r\n\r\n\t\tif ( this._domElementKeyEvents !== null ) {\r\n\r\n\t\t\tthis._domElementKeyEvents.removeEventListener( 'keydown', this._onKeyDown );\r\n\t\t\tthis._domElementKeyEvents = null;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Save the current state of the controls. This can later be recovered with `reset()`.\r\n\t */\r\n\tsaveState() {\r\n\r\n\t\tthis.target0.copy( this.target );\r\n\t\tthis.position0.copy( this.object.position );\r\n\t\tthis.zoom0 = this.object.zoom;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Reset the controls to their state from either the last time the `saveState()`\r\n\t * was called, or the initial state.\r\n\t */\r\n\treset() {\r\n\r\n\t\tthis.target.copy( this.target0 );\r\n\t\tthis.object.position.copy( this.position0 );\r\n\t\tthis.object.zoom = this.zoom0;\r\n\r\n\t\tthis.object.updateProjectionMatrix();\r\n\t\tthis.dispatchEvent( _changeEvent );\r\n\r\n\t\tthis.update();\r\n\r\n\t\tthis.state = _STATE.NONE;\r\n\r\n\t}\r\n\r\n\tupdate( deltaTime = null ) {\r\n\r\n\t\tconst position = this.object.position;\r\n\r\n\t\t_v.copy( position ).sub( this.target );\r\n\r\n\t\t// rotate offset to \"y-axis-is-up\" space\r\n\t\t_v.applyQuaternion( this._quat );\r\n\r\n\t\t// angle from z-axis around y-axis\r\n\t\tthis._spherical.setFromVector3( _v );\r\n\r\n\t\tif ( this.autoRotate && this.state === _STATE.NONE ) {\r\n\r\n\t\t\tthis._rotateLeft( this._getAutoRotationAngle( deltaTime ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.enableDamping ) {\r\n\r\n\t\t\tthis._spherical.theta += this._sphericalDelta.theta * this.dampingFactor;\r\n\t\t\tthis._spherical.phi += this._sphericalDelta.phi * this.dampingFactor;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis._spherical.theta += this._sphericalDelta.theta;\r\n\t\t\tthis._spherical.phi += this._sphericalDelta.phi;\r\n\r\n\t\t}\r\n\r\n\t\t// restrict theta to be between desired limits\r\n\r\n\t\tlet min = this.minAzimuthAngle;\r\n\t\tlet max = this.maxAzimuthAngle;\r\n\r\n\t\tif ( isFinite( min ) && isFinite( max ) ) {\r\n\r\n\t\t\tif ( min < - Math.PI ) min += _twoPI; else if ( min > Math.PI ) min -= _twoPI;\r\n\r\n\t\t\tif ( max < - Math.PI ) max += _twoPI; else if ( max > Math.PI ) max -= _twoPI;\r\n\r\n\t\t\tif ( min <= max ) {\r\n\r\n\t\t\t\tthis._spherical.theta = Math.max( min, Math.min( max, this._spherical.theta ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._spherical.theta = ( this._spherical.theta > ( min + max ) / 2 ) ?\r\n\t\t\t\t\tMath.max( min, this._spherical.theta ) :\r\n\t\t\t\t\tMath.min( max, this._spherical.theta );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// restrict phi to be between desired limits\r\n\t\tthis._spherical.phi = Math.max( this.minPolarAngle, Math.min( this.maxPolarAngle, this._spherical.phi ) );\r\n\r\n\t\tthis._spherical.makeSafe();\r\n\r\n\r\n\t\t// move target to panned location\r\n\r\n\t\tif ( this.enableDamping === true ) {\r\n\r\n\t\t\tthis.target.addScaledVector( this._panOffset, this.dampingFactor );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.target.add( this._panOffset );\r\n\r\n\t\t}\r\n\r\n\t\t// Limit the target distance from the cursor to create a sphere around the center of interest\r\n\t\tthis.target.sub( this.cursor );\r\n\t\tthis.target.clampLength( this.minTargetRadius, this.maxTargetRadius );\r\n\t\tthis.target.add( this.cursor );\r\n\r\n\t\tlet zoomChanged = false;\r\n\t\t// adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\r\n\t\t// we adjust zoom later in these cases\r\n\t\tif ( this.zoomToCursor && this._performCursorZoom || this.object.isOrthographicCamera ) {\r\n\r\n\t\t\tthis._spherical.radius = this._clampDistance( this._spherical.radius );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst prevRadius = this._spherical.radius;\r\n\t\t\tthis._spherical.radius = this._clampDistance( this._spherical.radius * this._scale );\r\n\t\t\tzoomChanged = prevRadius != this._spherical.radius;\r\n\r\n\t\t}\r\n\r\n\t\t_v.setFromSpherical( this._spherical );\r\n\r\n\t\t// rotate offset back to \"camera-up-vector-is-up\" space\r\n\t\t_v.applyQuaternion( this._quatInverse );\r\n\r\n\t\tposition.copy( this.target ).add( _v );\r\n\r\n\t\tthis.object.lookAt( this.target );\r\n\r\n\t\tif ( this.enableDamping === true ) {\r\n\r\n\t\t\tthis._sphericalDelta.theta *= ( 1 - this.dampingFactor );\r\n\t\t\tthis._sphericalDelta.phi *= ( 1 - this.dampingFactor );\r\n\r\n\t\t\tthis._panOffset.multiplyScalar( 1 - this.dampingFactor );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis._sphericalDelta.set( 0, 0, 0 );\r\n\r\n\t\t\tthis._panOffset.set( 0, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\t// adjust camera position\r\n\t\tif ( this.zoomToCursor && this._performCursorZoom ) {\r\n\r\n\t\t\tlet newRadius = null;\r\n\t\t\tif ( this.object.isPerspectiveCamera ) {\r\n\r\n\t\t\t\t// move the camera down the pointer ray\r\n\t\t\t\t// this method avoids floating point error\r\n\t\t\t\tconst prevRadius = _v.length();\r\n\t\t\t\tnewRadius = this._clampDistance( prevRadius * this._scale );\r\n\r\n\t\t\t\tconst radiusDelta = prevRadius - newRadius;\r\n\t\t\t\tthis.object.position.addScaledVector( this._dollyDirection, radiusDelta );\r\n\t\t\t\tthis.object.updateMatrixWorld();\r\n\r\n\t\t\t\tzoomChanged = !! radiusDelta;\r\n\r\n\t\t\t} else if ( this.object.isOrthographicCamera ) {\r\n\r\n\t\t\t\t// adjust the ortho camera position based on zoom changes\r\n\t\t\t\tconst mouseBefore = new Vector3( this._mouse.x, this._mouse.y, 0 );\r\n\t\t\t\tmouseBefore.unproject( this.object );\r\n\r\n\t\t\t\tconst prevZoom = this.object.zoom;\r\n\t\t\t\tthis.object.zoom = Math.max( this.minZoom, Math.min( this.maxZoom, this.object.zoom / this._scale ) );\r\n\t\t\t\tthis.object.updateProjectionMatrix();\r\n\r\n\t\t\t\tzoomChanged = prevZoom !== this.object.zoom;\r\n\r\n\t\t\t\tconst mouseAfter = new Vector3( this._mouse.x, this._mouse.y, 0 );\r\n\t\t\t\tmouseAfter.unproject( this.object );\r\n\r\n\t\t\t\tthis.object.position.sub( mouseAfter ).add( mouseBefore );\r\n\t\t\t\tthis.object.updateMatrixWorld();\r\n\r\n\t\t\t\tnewRadius = _v.length();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.' );\r\n\t\t\t\tthis.zoomToCursor = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// handle the placement of the target\r\n\t\t\tif ( newRadius !== null ) {\r\n\r\n\t\t\t\tif ( this.screenSpacePanning ) {\r\n\r\n\t\t\t\t\t// position the orbit target in front of the new camera position\r\n\t\t\t\t\tthis.target.set( 0, 0, - 1 )\r\n\t\t\t\t\t\t.transformDirection( this.object.matrix )\r\n\t\t\t\t\t\t.multiplyScalar( newRadius )\r\n\t\t\t\t\t\t.add( this.object.position );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// get the ray and translation plane to compute target\r\n\t\t\t\t\t_ray.origin.copy( this.object.position );\r\n\t\t\t\t\t_ray.direction.set( 0, 0, - 1 ).transformDirection( this.object.matrix );\r\n\r\n\t\t\t\t\t// if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\r\n\t\t\t\t\t// extremely large values\r\n\t\t\t\t\tif ( Math.abs( this.object.up.dot( _ray.direction ) ) < _TILT_LIMIT ) {\r\n\r\n\t\t\t\t\t\tthis.object.lookAt( this.target );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t_plane.setFromNormalAndCoplanarPoint( this.object.up, this.target );\r\n\t\t\t\t\t\t_ray.intersectPlane( _plane, this.target );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( this.object.isOrthographicCamera ) {\r\n\r\n\t\t\tconst prevZoom = this.object.zoom;\r\n\t\t\tthis.object.zoom = Math.max( this.minZoom, Math.min( this.maxZoom, this.object.zoom / this._scale ) );\r\n\r\n\t\t\tif ( prevZoom !== this.object.zoom ) {\r\n\r\n\t\t\t\tthis.object.updateProjectionMatrix();\r\n\t\t\t\tzoomChanged = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis._scale = 1;\r\n\t\tthis._performCursorZoom = false;\r\n\r\n\t\t// update condition is:\r\n\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\r\n\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\r\n\r\n\t\tif ( zoomChanged ||\r\n\t\t\tthis._lastPosition.distanceToSquared( this.object.position ) > _EPS ||\r\n\t\t\t8 * ( 1 - this._lastQuaternion.dot( this.object.quaternion ) ) > _EPS ||\r\n\t\t\tthis._lastTargetPosition.distanceToSquared( this.target ) > _EPS ) {\r\n\r\n\t\t\tthis.dispatchEvent( _changeEvent );\r\n\r\n\t\t\tthis._lastPosition.copy( this.object.position );\r\n\t\t\tthis._lastQuaternion.copy( this.object.quaternion );\r\n\t\t\tthis._lastTargetPosition.copy( this.target );\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\t_getAutoRotationAngle( deltaTime ) {\r\n\r\n\t\tif ( deltaTime !== null ) {\r\n\r\n\t\t\treturn ( _twoPI / 60 * this.autoRotateSpeed ) * deltaTime;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn _twoPI / 60 / 60 * this.autoRotateSpeed;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_getZoomScale( delta ) {\r\n\r\n\t\tconst normalizedDelta = Math.abs( delta * 0.01 );\r\n\t\treturn Math.pow( 0.95, this.zoomSpeed * normalizedDelta );\r\n\r\n\t}\r\n\r\n\t_rotateLeft( angle ) {\r\n\r\n\t\tthis._sphericalDelta.theta -= angle;\r\n\r\n\t}\r\n\r\n\t_rotateUp( angle ) {\r\n\r\n\t\tthis._sphericalDelta.phi -= angle;\r\n\r\n\t}\r\n\r\n\t_panLeft( distance, objectMatrix ) {\r\n\r\n\t\t_v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\r\n\t\t_v.multiplyScalar( - distance );\r\n\r\n\t\tthis._panOffset.add( _v );\r\n\r\n\t}\r\n\r\n\t_panUp( distance, objectMatrix ) {\r\n\r\n\t\tif ( this.screenSpacePanning === true ) {\r\n\r\n\t\t\t_v.setFromMatrixColumn( objectMatrix, 1 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_v.setFromMatrixColumn( objectMatrix, 0 );\r\n\t\t\t_v.crossVectors( this.object.up, _v );\r\n\r\n\t\t}\r\n\r\n\t\t_v.multiplyScalar( distance );\r\n\r\n\t\tthis._panOffset.add( _v );\r\n\r\n\t}\r\n\r\n\t// deltaX and deltaY are in pixels; right and down are positive\r\n\t_pan( deltaX, deltaY ) {\r\n\r\n\t\tconst element = this.domElement;\r\n\r\n\t\tif ( this.object.isPerspectiveCamera ) {\r\n\r\n\t\t\t// perspective\r\n\t\t\tconst position = this.object.position;\r\n\t\t\t_v.copy( position ).sub( this.target );\r\n\t\t\tlet targetDistance = _v.length();\r\n\r\n\t\t\t// half of the fov is center to top of screen\r\n\t\t\ttargetDistance *= Math.tan( ( this.object.fov / 2 ) * Math.PI / 180.0 );\r\n\r\n\t\t\t// we use only clientHeight here so aspect ratio does not distort speed\r\n\t\t\tthis._panLeft( 2 * deltaX * targetDistance / element.clientHeight, this.object.matrix );\r\n\t\t\tthis._panUp( 2 * deltaY * targetDistance / element.clientHeight, this.object.matrix );\r\n\r\n\t\t} else if ( this.object.isOrthographicCamera ) {\r\n\r\n\t\t\t// orthographic\r\n\t\t\tthis._panLeft( deltaX * ( this.object.right - this.object.left ) / this.object.zoom / element.clientWidth, this.object.matrix );\r\n\t\t\tthis._panUp( deltaY * ( this.object.top - this.object.bottom ) / this.object.zoom / element.clientHeight, this.object.matrix );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// camera neither orthographic nor perspective\r\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\r\n\t\t\tthis.enablePan = false;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_dollyOut( dollyScale ) {\r\n\r\n\t\tif ( this.object.isPerspectiveCamera || this.object.isOrthographicCamera ) {\r\n\r\n\t\t\tthis._scale /= dollyScale;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\r\n\t\t\tthis.enableZoom = false;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_dollyIn( dollyScale ) {\r\n\r\n\t\tif ( this.object.isPerspectiveCamera || this.object.isOrthographicCamera ) {\r\n\r\n\t\t\tthis._scale *= dollyScale;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\r\n\t\t\tthis.enableZoom = false;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_updateZoomParameters( x, y ) {\r\n\r\n\t\tif ( ! this.zoomToCursor ) {\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tthis._performCursorZoom = true;\r\n\r\n\t\tconst rect = this.domElement.getBoundingClientRect();\r\n\t\tconst dx = x - rect.left;\r\n\t\tconst dy = y - rect.top;\r\n\t\tconst w = rect.width;\r\n\t\tconst h = rect.height;\r\n\r\n\t\tthis._mouse.x = ( dx / w ) * 2 - 1;\r\n\t\tthis._mouse.y = - ( dy / h ) * 2 + 1;\r\n\r\n\t\tthis._dollyDirection.set( this._mouse.x, this._mouse.y, 1 ).unproject( this.object ).sub( this.object.position ).normalize();\r\n\r\n\t}\r\n\r\n\t_clampDistance( dist ) {\r\n\r\n\t\treturn Math.max( this.minDistance, Math.min( this.maxDistance, dist ) );\r\n\r\n\t}\r\n\r\n\t//\r\n\t// event callbacks - update the object state\r\n\t//\r\n\r\n\t_handleMouseDownRotate( event ) {\r\n\r\n\t\tthis._rotateStart.set( event.clientX, event.clientY );\r\n\r\n\t}\r\n\r\n\t_handleMouseDownDolly( event ) {\r\n\r\n\t\tthis._updateZoomParameters( event.clientX, event.clientX );\r\n\t\tthis._dollyStart.set( event.clientX, event.clientY );\r\n\r\n\t}\r\n\r\n\t_handleMouseDownPan( event ) {\r\n\r\n\t\tthis._panStart.set( event.clientX, event.clientY );\r\n\r\n\t}\r\n\r\n\t_handleMouseMoveRotate( event ) {\r\n\r\n\t\tthis._rotateEnd.set( event.clientX, event.clientY );\r\n\r\n\t\tthis._rotateDelta.subVectors( this._rotateEnd, this._rotateStart ).multiplyScalar( this.rotateSpeed );\r\n\r\n\t\tconst element = this.domElement;\r\n\r\n\t\tthis._rotateLeft( _twoPI * this._rotateDelta.x / element.clientHeight ); // yes, height\r\n\r\n\t\tthis._rotateUp( _twoPI * this._rotateDelta.y / element.clientHeight );\r\n\r\n\t\tthis._rotateStart.copy( this._rotateEnd );\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\t_handleMouseMoveDolly( event ) {\r\n\r\n\t\tthis._dollyEnd.set( event.clientX, event.clientY );\r\n\r\n\t\tthis._dollyDelta.subVectors( this._dollyEnd, this._dollyStart );\r\n\r\n\t\tif ( this._dollyDelta.y > 0 ) {\r\n\r\n\t\t\tthis._dollyOut( this._getZoomScale( this._dollyDelta.y ) );\r\n\r\n\t\t} else if ( this._dollyDelta.y < 0 ) {\r\n\r\n\t\t\tthis._dollyIn( this._getZoomScale( this._dollyDelta.y ) );\r\n\r\n\t\t}\r\n\r\n\t\tthis._dollyStart.copy( this._dollyEnd );\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\t_handleMouseMovePan( event ) {\r\n\r\n\t\tthis._panEnd.set( event.clientX, event.clientY );\r\n\r\n\t\tthis._panDelta.subVectors( this._panEnd, this._panStart ).multiplyScalar( this.panSpeed );\r\n\r\n\t\tthis._pan( this._panDelta.x, this._panDelta.y );\r\n\r\n\t\tthis._panStart.copy( this._panEnd );\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\t_handleMouseWheel( event ) {\r\n\r\n\t\tthis._updateZoomParameters( event.clientX, event.clientY );\r\n\r\n\t\tif ( event.deltaY < 0 ) {\r\n\r\n\t\t\tthis._dollyIn( this._getZoomScale( event.deltaY ) );\r\n\r\n\t\t} else if ( event.deltaY > 0 ) {\r\n\r\n\t\t\tthis._dollyOut( this._getZoomScale( event.deltaY ) );\r\n\r\n\t\t}\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\t_handleKeyDown( event ) {\r\n\r\n\t\tlet needsUpdate = false;\r\n\r\n\t\tswitch ( event.code ) {\r\n\r\n\t\t\tcase this.keys.UP:\r\n\r\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n\t\t\t\t\tif ( this.enableRotate ) {\r\n\r\n\t\t\t\t\t\tthis._rotateUp( _twoPI * this.keyRotateSpeed / this.domElement.clientHeight );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( this.enablePan ) {\r\n\r\n\t\t\t\t\t\tthis._pan( 0, this.keyPanSpeed );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tneedsUpdate = true;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase this.keys.BOTTOM:\r\n\r\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n\t\t\t\t\tif ( this.enableRotate ) {\r\n\r\n\t\t\t\t\t\tthis._rotateUp( - _twoPI * this.keyRotateSpeed / this.domElement.clientHeight );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( this.enablePan ) {\r\n\r\n\t\t\t\t\t\tthis._pan( 0, - this.keyPanSpeed );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tneedsUpdate = true;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase this.keys.LEFT:\r\n\r\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n\t\t\t\t\tif ( this.enableRotate ) {\r\n\r\n\t\t\t\t\t\tthis._rotateLeft( _twoPI * this.keyRotateSpeed / this.domElement.clientHeight );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( this.enablePan ) {\r\n\r\n\t\t\t\t\t\tthis._pan( this.keyPanSpeed, 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tneedsUpdate = true;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase this.keys.RIGHT:\r\n\r\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n\t\t\t\t\tif ( this.enableRotate ) {\r\n\r\n\t\t\t\t\t\tthis._rotateLeft( - _twoPI * this.keyRotateSpeed / this.domElement.clientHeight );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( this.enablePan ) {\r\n\r\n\t\t\t\t\t\tthis._pan( - this.keyPanSpeed, 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tneedsUpdate = true;\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t\tif ( needsUpdate ) {\r\n\r\n\t\t\t// prevent the browser from scrolling on cursor keys\r\n\t\t\tevent.preventDefault();\r\n\r\n\t\t\tthis.update();\r\n\r\n\t\t}\r\n\r\n\r\n\t}\r\n\r\n\t_handleTouchStartRotate( event ) {\r\n\r\n\t\tif ( this._pointers.length === 1 ) {\r\n\r\n\t\t\tthis._rotateStart.set( event.pageX, event.pageY );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst position = this._getSecondPointerPosition( event );\r\n\r\n\t\t\tconst x = 0.5 * ( event.pageX + position.x );\r\n\t\t\tconst y = 0.5 * ( event.pageY + position.y );\r\n\r\n\t\t\tthis._rotateStart.set( x, y );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_handleTouchStartPan( event ) {\r\n\r\n\t\tif ( this._pointers.length === 1 ) {\r\n\r\n\t\t\tthis._panStart.set( event.pageX, event.pageY );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst position = this._getSecondPointerPosition( event );\r\n\r\n\t\t\tconst x = 0.5 * ( event.pageX + position.x );\r\n\t\t\tconst y = 0.5 * ( event.pageY + position.y );\r\n\r\n\t\t\tthis._panStart.set( x, y );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_handleTouchStartDolly( event ) {\r\n\r\n\t\tconst position = this._getSecondPointerPosition( event );\r\n\r\n\t\tconst dx = event.pageX - position.x;\r\n\t\tconst dy = event.pageY - position.y;\r\n\r\n\t\tconst distance = Math.sqrt( dx * dx + dy * dy );\r\n\r\n\t\tthis._dollyStart.set( 0, distance );\r\n\r\n\t}\r\n\r\n\t_handleTouchStartDollyPan( event ) {\r\n\r\n\t\tif ( this.enableZoom ) this._handleTouchStartDolly( event );\r\n\r\n\t\tif ( this.enablePan ) this._handleTouchStartPan( event );\r\n\r\n\t}\r\n\r\n\t_handleTouchStartDollyRotate( event ) {\r\n\r\n\t\tif ( this.enableZoom ) this._handleTouchStartDolly( event );\r\n\r\n\t\tif ( this.enableRotate ) this._handleTouchStartRotate( event );\r\n\r\n\t}\r\n\r\n\t_handleTouchMoveRotate( event ) {\r\n\r\n\t\tif ( this._pointers.length == 1 ) {\r\n\r\n\t\t\tthis._rotateEnd.set( event.pageX, event.pageY );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst position = this._getSecondPointerPosition( event );\r\n\r\n\t\t\tconst x = 0.5 * ( event.pageX + position.x );\r\n\t\t\tconst y = 0.5 * ( event.pageY + position.y );\r\n\r\n\t\t\tthis._rotateEnd.set( x, y );\r\n\r\n\t\t}\r\n\r\n\t\tthis._rotateDelta.subVectors( this._rotateEnd, this._rotateStart ).multiplyScalar( this.rotateSpeed );\r\n\r\n\t\tconst element = this.domElement;\r\n\r\n\t\tthis._rotateLeft( _twoPI * this._rotateDelta.x / element.clientHeight ); // yes, height\r\n\r\n\t\tthis._rotateUp( _twoPI * this._rotateDelta.y / element.clientHeight );\r\n\r\n\t\tthis._rotateStart.copy( this._rotateEnd );\r\n\r\n\t}\r\n\r\n\t_handleTouchMovePan( event ) {\r\n\r\n\t\tif ( this._pointers.length === 1 ) {\r\n\r\n\t\t\tthis._panEnd.set( event.pageX, event.pageY );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst position = this._getSecondPointerPosition( event );\r\n\r\n\t\t\tconst x = 0.5 * ( event.pageX + position.x );\r\n\t\t\tconst y = 0.5 * ( event.pageY + position.y );\r\n\r\n\t\t\tthis._panEnd.set( x, y );\r\n\r\n\t\t}\r\n\r\n\t\tthis._panDelta.subVectors( this._panEnd, this._panStart ).multiplyScalar( this.panSpeed );\r\n\r\n\t\tthis._pan( this._panDelta.x, this._panDelta.y );\r\n\r\n\t\tthis._panStart.copy( this._panEnd );\r\n\r\n\t}\r\n\r\n\t_handleTouchMoveDolly( event ) {\r\n\r\n\t\tconst position = this._getSecondPointerPosition( event );\r\n\r\n\t\tconst dx = event.pageX - position.x;\r\n\t\tconst dy = event.pageY - position.y;\r\n\r\n\t\tconst distance = Math.sqrt( dx * dx + dy * dy );\r\n\r\n\t\tthis._dollyEnd.set( 0, distance );\r\n\r\n\t\tthis._dollyDelta.set( 0, Math.pow( this._dollyEnd.y / this._dollyStart.y, this.zoomSpeed ) );\r\n\r\n\t\tthis._dollyOut( this._dollyDelta.y );\r\n\r\n\t\tthis._dollyStart.copy( this._dollyEnd );\r\n\r\n\t\tconst centerX = ( event.pageX + position.x ) * 0.5;\r\n\t\tconst centerY = ( event.pageY + position.y ) * 0.5;\r\n\r\n\t\tthis._updateZoomParameters( centerX, centerY );\r\n\r\n\t}\r\n\r\n\t_handleTouchMoveDollyPan( event ) {\r\n\r\n\t\tif ( this.enableZoom ) this._handleTouchMoveDolly( event );\r\n\r\n\t\tif ( this.enablePan ) this._handleTouchMovePan( event );\r\n\r\n\t}\r\n\r\n\t_handleTouchMoveDollyRotate( event ) {\r\n\r\n\t\tif ( this.enableZoom ) this._handleTouchMoveDolly( event );\r\n\r\n\t\tif ( this.enableRotate ) this._handleTouchMoveRotate( event );\r\n\r\n\t}\r\n\r\n\t// pointers\r\n\r\n\t_addPointer( event ) {\r\n\r\n\t\tthis._pointers.push( event.pointerId );\r\n\r\n\t}\r\n\r\n\t_removePointer( event ) {\r\n\r\n\t\tdelete this._pointerPositions[ event.pointerId ];\r\n\r\n\t\tfor ( let i = 0; i < this._pointers.length; i ++ ) {\r\n\r\n\t\t\tif ( this._pointers[ i ] == event.pointerId ) {\r\n\r\n\t\t\t\tthis._pointers.splice( i, 1 );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_isTrackingPointer( event ) {\r\n\r\n\t\tfor ( let i = 0; i < this._pointers.length; i ++ ) {\r\n\r\n\t\t\tif ( this._pointers[ i ] == event.pointerId ) return true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\t_trackPointer( event ) {\r\n\r\n\t\tlet position = this._pointerPositions[ event.pointerId ];\r\n\r\n\t\tif ( position === undefined ) {\r\n\r\n\t\t\tposition = new Vector2();\r\n\t\t\tthis._pointerPositions[ event.pointerId ] = position;\r\n\r\n\t\t}\r\n\r\n\t\tposition.set( event.pageX, event.pageY );\r\n\r\n\t}\r\n\r\n\t_getSecondPointerPosition( event ) {\r\n\r\n\t\tconst pointerId = ( event.pointerId === this._pointers[ 0 ] ) ? this._pointers[ 1 ] : this._pointers[ 0 ];\r\n\r\n\t\treturn this._pointerPositions[ pointerId ];\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\t_customWheelEvent( event ) {\r\n\r\n\t\tconst mode = event.deltaMode;\r\n\r\n\t\t// minimal wheel event altered to meet delta-zoom demand\r\n\t\tconst newEvent = {\r\n\t\t\tclientX: event.clientX,\r\n\t\t\tclientY: event.clientY,\r\n\t\t\tdeltaY: event.deltaY,\r\n\t\t};\r\n\r\n\t\tswitch ( mode ) {\r\n\r\n\t\t\tcase 1: // LINE_MODE\r\n\t\t\t\tnewEvent.deltaY *= 16;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 2: // PAGE_MODE\r\n\t\t\t\tnewEvent.deltaY *= 100;\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t\t// detect if event was triggered by pinching\r\n\t\tif ( event.ctrlKey && ! this._controlActive ) {\r\n\r\n\t\t\tnewEvent.deltaY *= 10;\r\n\r\n\t\t}\r\n\r\n\t\treturn newEvent;\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction onPointerDown( event ) {\r\n\r\n\tif ( this.enabled === false ) return;\r\n\r\n\tif ( this._pointers.length === 0 ) {\r\n\r\n\t\tthis.domElement.setPointerCapture( event.pointerId );\r\n\r\n\t\tthis.domElement.addEventListener( 'pointermove', this._onPointerMove );\r\n\t\tthis.domElement.addEventListener( 'pointerup', this._onPointerUp );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tif ( this._isTrackingPointer( event ) ) return;\r\n\r\n\t//\r\n\r\n\tthis._addPointer( event );\r\n\r\n\tif ( event.pointerType === 'touch' ) {\r\n\r\n\t\tthis._onTouchStart( event );\r\n\r\n\t} else {\r\n\r\n\t\tthis._onMouseDown( event );\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction onPointerMove( event ) {\r\n\r\n\tif ( this.enabled === false ) return;\r\n\r\n\tif ( event.pointerType === 'touch' ) {\r\n\r\n\t\tthis._onTouchMove( event );\r\n\r\n\t} else {\r\n\r\n\t\tthis._onMouseMove( event );\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction onPointerUp( event ) {\r\n\r\n\tthis._removePointer( event );\r\n\r\n\tswitch ( this._pointers.length ) {\r\n\r\n\t\tcase 0:\r\n\r\n\t\t\tthis.domElement.releasePointerCapture( event.pointerId );\r\n\r\n\t\t\tthis.domElement.removeEventListener( 'pointermove', this._onPointerMove );\r\n\t\t\tthis.domElement.removeEventListener( 'pointerup', this._onPointerUp );\r\n\r\n\t\t\tthis.dispatchEvent( _endEvent );\r\n\r\n\t\t\tthis.state = _STATE.NONE;\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase 1:\r\n\r\n\t\t\tconst pointerId = this._pointers[ 0 ];\r\n\t\t\tconst position = this._pointerPositions[ pointerId ];\r\n\r\n\t\t\t// minimal placeholder event - allows state correction on pointer-up\r\n\t\t\tthis._onTouchStart( { pointerId: pointerId, pageX: position.x, pageY: position.y } );\r\n\r\n\t\t\tbreak;\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction onMouseDown( event ) {\r\n\r\n\tlet mouseAction;\r\n\r\n\tswitch ( event.button ) {\r\n\r\n\t\tcase 0:\r\n\r\n\t\t\tmouseAction = this.mouseButtons.LEFT;\r\n\t\t\tbreak;\r\n\r\n\t\tcase 1:\r\n\r\n\t\t\tmouseAction = this.mouseButtons.MIDDLE;\r\n\t\t\tbreak;\r\n\r\n\t\tcase 2:\r\n\r\n\t\t\tmouseAction = this.mouseButtons.RIGHT;\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\r\n\t\t\tmouseAction = - 1;\r\n\r\n\t}\r\n\r\n\tswitch ( mouseAction ) {\r\n\r\n\t\tcase MOUSE.DOLLY:\r\n\r\n\t\t\tif ( this.enableZoom === false ) return;\r\n\r\n\t\t\tthis._handleMouseDownDolly( event );\r\n\r\n\t\t\tthis.state = _STATE.DOLLY;\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase MOUSE.ROTATE:\r\n\r\n\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n\t\t\t\tif ( this.enablePan === false ) return;\r\n\r\n\t\t\t\tthis._handleMouseDownPan( event );\r\n\r\n\t\t\t\tthis.state = _STATE.PAN;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( this.enableRotate === false ) return;\r\n\r\n\t\t\t\tthis._handleMouseDownRotate( event );\r\n\r\n\t\t\t\tthis.state = _STATE.ROTATE;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase MOUSE.PAN:\r\n\r\n\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n\t\t\t\tif ( this.enableRotate === false ) return;\r\n\r\n\t\t\t\tthis._handleMouseDownRotate( event );\r\n\r\n\t\t\t\tthis.state = _STATE.ROTATE;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( this.enablePan === false ) return;\r\n\r\n\t\t\t\tthis._handleMouseDownPan( event );\r\n\r\n\t\t\t\tthis.state = _STATE.PAN;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\r\n\t\t\tthis.state = _STATE.NONE;\r\n\r\n\t}\r\n\r\n\tif ( this.state !== _STATE.NONE ) {\r\n\r\n\t\tthis.dispatchEvent( _startEvent );\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction onMouseMove( event ) {\r\n\r\n\tswitch ( this.state ) {\r\n\r\n\t\tcase _STATE.ROTATE:\r\n\r\n\t\t\tif ( this.enableRotate === false ) return;\r\n\r\n\t\t\tthis._handleMouseMoveRotate( event );\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase _STATE.DOLLY:\r\n\r\n\t\t\tif ( this.enableZoom === false ) return;\r\n\r\n\t\t\tthis._handleMouseMoveDolly( event );\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase _STATE.PAN:\r\n\r\n\t\t\tif ( this.enablePan === false ) return;\r\n\r\n\t\t\tthis._handleMouseMovePan( event );\r\n\r\n\t\t\tbreak;\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction onMouseWheel( event ) {\r\n\r\n\tif ( this.enabled === false || this.enableZoom === false || this.state !== _STATE.NONE ) return;\r\n\r\n\tevent.preventDefault();\r\n\r\n\tthis.dispatchEvent( _startEvent );\r\n\r\n\tthis._handleMouseWheel( this._customWheelEvent( event ) );\r\n\r\n\tthis.dispatchEvent( _endEvent );\r\n\r\n}\r\n\r\nfunction onKeyDown( event ) {\r\n\r\n\tif ( this.enabled === false ) return;\r\n\r\n\tthis._handleKeyDown( event );\r\n\r\n}\r\n\r\nfunction onTouchStart( event ) {\r\n\r\n\tthis._trackPointer( event );\r\n\r\n\tswitch ( this._pointers.length ) {\r\n\r\n\t\tcase 1:\r\n\r\n\t\t\tswitch ( this.touches.ONE ) {\r\n\r\n\t\t\t\tcase TOUCH.ROTATE:\r\n\r\n\t\t\t\t\tif ( this.enableRotate === false ) return;\r\n\r\n\t\t\t\t\tthis._handleTouchStartRotate( event );\r\n\r\n\t\t\t\t\tthis.state = _STATE.TOUCH_ROTATE;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase TOUCH.PAN:\r\n\r\n\t\t\t\t\tif ( this.enablePan === false ) return;\r\n\r\n\t\t\t\t\tthis._handleTouchStartPan( event );\r\n\r\n\t\t\t\t\tthis.state = _STATE.TOUCH_PAN;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\r\n\t\t\t\t\tthis.state = _STATE.NONE;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase 2:\r\n\r\n\t\t\tswitch ( this.touches.TWO ) {\r\n\r\n\t\t\t\tcase TOUCH.DOLLY_PAN:\r\n\r\n\t\t\t\t\tif ( this.enableZoom === false && this.enablePan === false ) return;\r\n\r\n\t\t\t\t\tthis._handleTouchStartDollyPan( event );\r\n\r\n\t\t\t\t\tthis.state = _STATE.TOUCH_DOLLY_PAN;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase TOUCH.DOLLY_ROTATE:\r\n\r\n\t\t\t\t\tif ( this.enableZoom === false && this.enableRotate === false ) return;\r\n\r\n\t\t\t\t\tthis._handleTouchStartDollyRotate( event );\r\n\r\n\t\t\t\t\tthis.state = _STATE.TOUCH_DOLLY_ROTATE;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\r\n\t\t\t\t\tthis.state = _STATE.NONE;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\r\n\t\t\tthis.state = _STATE.NONE;\r\n\r\n\t}\r\n\r\n\tif ( this.state !== _STATE.NONE ) {\r\n\r\n\t\tthis.dispatchEvent( _startEvent );\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction onTouchMove( event ) {\r\n\r\n\tthis._trackPointer( event );\r\n\r\n\tswitch ( this.state ) {\r\n\r\n\t\tcase _STATE.TOUCH_ROTATE:\r\n\r\n\t\t\tif ( this.enableRotate === false ) return;\r\n\r\n\t\t\tthis._handleTouchMoveRotate( event );\r\n\r\n\t\t\tthis.update();\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase _STATE.TOUCH_PAN:\r\n\r\n\t\t\tif ( this.enablePan === false ) return;\r\n\r\n\t\t\tthis._handleTouchMovePan( event );\r\n\r\n\t\t\tthis.update();\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase _STATE.TOUCH_DOLLY_PAN:\r\n\r\n\t\t\tif ( this.enableZoom === false && this.enablePan === false ) return;\r\n\r\n\t\t\tthis._handleTouchMoveDollyPan( event );\r\n\r\n\t\t\tthis.update();\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase _STATE.TOUCH_DOLLY_ROTATE:\r\n\r\n\t\t\tif ( this.enableZoom === false && this.enableRotate === false ) return;\r\n\r\n\t\t\tthis._handleTouchMoveDollyRotate( event );\r\n\r\n\t\t\tthis.update();\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\r\n\t\t\tthis.state = _STATE.NONE;\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction onContextMenu( event ) {\r\n\r\n\tif ( this.enabled === false ) return;\r\n\r\n\tevent.preventDefault();\r\n\r\n}\r\n\r\nfunction interceptControlDown( event ) {\r\n\r\n\tif ( event.key === 'Control' ) {\r\n\r\n\t\tthis._controlActive = true;\r\n\r\n\t\tconst document = this.domElement.getRootNode(); // offscreen canvas compatibility\r\n\r\n\t\tdocument.addEventListener( 'keyup', this._interceptControlUp, { passive: true, capture: true } );\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction interceptControlUp( event ) {\r\n\r\n\tif ( event.key === 'Control' ) {\r\n\r\n\t\tthis._controlActive = false;\r\n\r\n\t\tconst document = this.domElement.getRootNode(); // offscreen canvas compatibility\r\n\r\n\t\tdocument.removeEventListener( 'keyup', this._interceptControlUp, { passive: true, capture: true } );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { OrbitControls };\r\n","/**\r\n * @module CopyShader\r\n * @three_import import { CopyShader } from 'three/addons/shaders/CopyShader.js';\r\n */\r\n\r\n/**\r\n * Full-screen copy shader pass.\r\n *\r\n * @constant\r\n * @type {ShaderMaterial~Shader}\r\n */\r\nconst CopyShader = {\r\n\r\n\tname: 'CopyShader',\r\n\r\n\tuniforms: {\r\n\r\n\t\t'tDiffuse': { value: null },\r\n\t\t'opacity': { value: 1.0 }\r\n\r\n\t},\r\n\r\n\tvertexShader: /* glsl */`\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvUv = uv;\r\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t\t}`,\r\n\r\n\tfragmentShader: /* glsl */`\r\n\r\n\t\tuniform float opacity;\r\n\r\n\t\tuniform sampler2D tDiffuse;\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\r\n\t\t\tgl_FragColor = opacity * texel;\r\n\r\n\r\n\t\t}`\r\n\r\n};\r\n\r\nexport { CopyShader };\r\n","import {\r\n\tBufferGeometry,\r\n\tFloat32BufferAttribute,\r\n\tOrthographicCamera,\r\n\tMesh\r\n} from 'three';\r\n\r\n/**\r\n * Abstract base class for all post processing passes.\r\n *\r\n * This module is only relevant for post processing with {@link WebGLRenderer}.\r\n *\r\n * @abstract\r\n * @three_import import { Pass } from 'three/addons/postprocessing/Pass.js';\r\n */\r\nclass Pass {\r\n\r\n\t/**\r\n\t * Constructs a new pass.\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isPass = true;\r\n\r\n\t\t/**\r\n\t\t * If set to `true`, the pass is processed by the composer.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.enabled = true;\r\n\r\n\t\t/**\r\n\t\t * If set to `true`, the pass indicates to swap read and write buffer after rendering.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.needsSwap = true;\r\n\r\n\t\t/**\r\n\t\t * If set to `true`, the pass clears its buffer before rendering\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.clear = false;\r\n\r\n\t\t/**\r\n\t\t * If set to `true`, the result of the pass is rendered to screen. The last pass in the composers\r\n\t\t * pass chain gets automatically rendered to screen, no matter how this property is configured.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.renderToScreen = false;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the size of the pass.\r\n\t *\r\n\t * @abstract\r\n\t * @param {number} width - The width to set.\r\n\t * @param {number} height - The width to set.\r\n\t */\r\n\tsetSize( /* width, height */ ) {}\r\n\r\n\t/**\r\n\t * This method holds the render logic of a pass. It must be implemented in all derived classes.\r\n\t *\r\n\t * @abstract\r\n\t * @param {WebGLRenderer} renderer - The renderer.\r\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\r\n\t * destination for the pass.\r\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\r\n\t * previous pass from this buffer.\r\n\t * @param {number} deltaTime - The delta time in seconds.\r\n\t * @param {boolean} maskActive - Whether masking is active or not.\r\n\t */\r\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\r\n\r\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Frees the GPU-related resources allocated by this instance. Call this\r\n\t * method whenever the pass is no longer used in your app.\r\n\t *\r\n\t * @abstract\r\n\t */\r\n\tdispose() {}\r\n\r\n}\r\n\r\n// Helper for passes that need to fill the viewport with a single quad.\r\n\r\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\r\n\r\n// https://github.com/mrdoob/three.js/pull/21358\r\n\r\nclass FullscreenTriangleGeometry extends BufferGeometry {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst _geometry = new FullscreenTriangleGeometry();\r\n\r\n\r\n/**\r\n * This module is a helper for passes which need to render a full\r\n * screen effect which is quite common in context of post processing.\r\n *\r\n * The intended usage is to reuse a single full screen quad for rendering\r\n * subsequent passes by just reassigning the `material` reference.\r\n *\r\n * This module can only be used with {@link WebGLRenderer}.\r\n *\r\n * @augments Mesh\r\n * @three_import import { FullScreenQuad } from 'three/addons/postprocessing/Pass.js';\r\n */\r\nclass FullScreenQuad {\r\n\r\n\t/**\r\n\t * Constructs a new full screen quad.\r\n\t *\r\n\t * @param {?Material} material - The material to render te full screen quad with.\r\n\t */\r\n\tconstructor( material ) {\r\n\r\n\t\tthis._mesh = new Mesh( _geometry, material );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Frees the GPU-related resources allocated by this instance. Call this\r\n\t * method whenever the instance is no longer used in your app.\r\n\t */\r\n\tdispose() {\r\n\r\n\t\tthis._mesh.geometry.dispose();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Renders the full screen quad.\r\n\t *\r\n\t * @param {WebGLRenderer} renderer - The renderer.\r\n\t */\r\n\trender( renderer ) {\r\n\r\n\t\trenderer.render( this._mesh, _camera );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The quad's material.\r\n\t *\r\n\t * @type {?Material}\r\n\t */\r\n\tget material() {\r\n\r\n\t\treturn this._mesh.material;\r\n\r\n\t}\r\n\r\n\tset material( value ) {\r\n\r\n\t\tthis._mesh.material = value;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Pass, FullScreenQuad };\r\n","import {\r\n\tShaderMaterial,\r\n\tUniformsUtils\r\n} from 'three';\r\nimport { Pass, FullScreenQuad } from './Pass.js';\r\n\r\n/**\r\n * This pass can be used to create a post processing effect\r\n * with a raw GLSL shader object. Useful for implementing custom\r\n * effects.\r\n *\r\n * ```js\r\n * const fxaaPass = new ShaderPass( FXAAShader );\r\n * composer.addPass( fxaaPass );\r\n * ```\r\n *\r\n * @augments Pass\r\n * @three_import import { ShaderPass } from 'three/addons/postprocessing/ShaderPass.js';\r\n */\r\nclass ShaderPass extends Pass {\r\n\r\n\t/**\r\n\t * Constructs a new shader pass.\r\n\t *\r\n\t * @param {Object|ShaderMaterial} [shader] - A shader object holding vertex and fragment shader as well as\r\n\t * defines and uniforms. It's also valid to pass a custom shader material.\r\n\t * @param {string} [textureID='tDiffuse'] - The name of the texture uniform that should sample\r\n\t * the read buffer.\r\n\t */\r\n\tconstructor( shader, textureID = 'tDiffuse' ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The name of the texture uniform that should sample the read buffer.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @default 'tDiffuse'\r\n\t\t */\r\n\t\tthis.textureID = textureID;\r\n\r\n\t\t/**\r\n\t\t * The pass uniforms.\r\n\t\t *\r\n\t\t * @type {?Object}\r\n\t\t */\r\n\t\tthis.uniforms = null;\r\n\r\n\t\t/**\r\n\t\t * The pass material.\r\n\t\t *\r\n\t\t * @type {?ShaderMaterial}\r\n\t\t */\r\n\t\tthis.material = null;\r\n\r\n\t\tif ( shader instanceof ShaderMaterial ) {\r\n\r\n\t\t\tthis.uniforms = shader.uniforms;\r\n\r\n\t\t\tthis.material = shader;\r\n\r\n\t\t} else if ( shader ) {\r\n\r\n\t\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\r\n\r\n\t\t\tthis.material = new ShaderMaterial( {\r\n\r\n\t\t\t\tname: ( shader.name !== undefined ) ? shader.name : 'unspecified',\r\n\t\t\t\tdefines: Object.assign( {}, shader.defines ),\r\n\t\t\t\tuniforms: this.uniforms,\r\n\t\t\t\tvertexShader: shader.vertexShader,\r\n\t\t\t\tfragmentShader: shader.fragmentShader\r\n\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t\t// internals\r\n\r\n\t\tthis._fsQuad = new FullScreenQuad( this.material );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Performs the shader pass.\r\n\t *\r\n\t * @param {WebGLRenderer} renderer - The renderer.\r\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\r\n\t * destination for the pass.\r\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\r\n\t * previous pass from this buffer.\r\n\t * @param {number} deltaTime - The delta time in seconds.\r\n\t * @param {boolean} maskActive - Whether masking is active or not.\r\n\t */\r\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\r\n\r\n\t\tif ( this.uniforms[ this.textureID ] ) {\r\n\r\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\r\n\r\n\t\t}\r\n\r\n\t\tthis._fsQuad.material = this.material;\r\n\r\n\t\tif ( this.renderToScreen ) {\r\n\r\n\t\t\trenderer.setRenderTarget( null );\r\n\t\t\tthis._fsQuad.render( renderer );\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderer.setRenderTarget( writeBuffer );\r\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\r\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\r\n\t\t\tthis._fsQuad.render( renderer );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Frees the GPU-related resources allocated by this instance. Call this\r\n\t * method whenever the pass is no longer used in your app.\r\n\t */\r\n\tdispose() {\r\n\r\n\t\tthis.material.dispose();\r\n\r\n\t\tthis._fsQuad.dispose();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { ShaderPass };\r\n","import { Pass } from './Pass.js';\r\n\r\n/**\r\n * This pass can be used to define a mask during post processing.\r\n * Meaning only areas of subsequent post processing are affected\r\n * which lie in the masking area of this pass. Internally, the masking\r\n * is implemented with the stencil buffer.\r\n *\r\n * ```js\r\n * const maskPass = new MaskPass( scene, camera );\r\n * composer.addPass( maskPass );\r\n * ```\r\n *\r\n * @augments Pass\r\n * @three_import import { MaskPass } from 'three/addons/postprocessing/MaskPass.js';\r\n */\r\nclass MaskPass extends Pass {\r\n\r\n\t/**\r\n\t * Constructs a new mask pass.\r\n\t *\r\n\t * @param {Scene} scene - The 3D objects in this scene will define the mask.\r\n\t * @param {Camera} camera - The camera.\r\n\t */\r\n\tconstructor( scene, camera ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The scene that defines the mask.\r\n\t\t *\r\n\t\t * @type {Scene}\r\n\t\t */\r\n\t\tthis.scene = scene;\r\n\r\n\t\t/**\r\n\t\t * The camera.\r\n\t\t *\r\n\t\t * @type {Camera}\r\n\t\t */\r\n\t\tthis.camera = camera;\r\n\r\n\t\t/**\r\n\t\t * Overwritten to perform a clear operation by default.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.clear = true;\r\n\r\n\t\t/**\r\n\t\t * Overwritten to disable the swap.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.needsSwap = false;\r\n\r\n\t\t/**\r\n\t\t * Whether to inverse the mask or not.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.inverse = false;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Performs a mask pass with the configured scene and camera.\r\n\t *\r\n\t * @param {WebGLRenderer} renderer - The renderer.\r\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\r\n\t * destination for the pass.\r\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\r\n\t * previous pass from this buffer.\r\n\t * @param {number} deltaTime - The delta time in seconds.\r\n\t * @param {boolean} maskActive - Whether masking is active or not.\r\n\t */\r\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\r\n\r\n\t\tconst context = renderer.getContext();\r\n\t\tconst state = renderer.state;\r\n\r\n\t\t// don't update color or depth\r\n\r\n\t\tstate.buffers.color.setMask( false );\r\n\t\tstate.buffers.depth.setMask( false );\r\n\r\n\t\t// lock buffers\r\n\r\n\t\tstate.buffers.color.setLocked( true );\r\n\t\tstate.buffers.depth.setLocked( true );\r\n\r\n\t\t// set up stencil\r\n\r\n\t\tlet writeValue, clearValue;\r\n\r\n\t\tif ( this.inverse ) {\r\n\r\n\t\t\twriteValue = 0;\r\n\t\t\tclearValue = 1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\twriteValue = 1;\r\n\t\t\tclearValue = 0;\r\n\r\n\t\t}\r\n\r\n\t\tstate.buffers.stencil.setTest( true );\r\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\r\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\r\n\t\tstate.buffers.stencil.setClear( clearValue );\r\n\t\tstate.buffers.stencil.setLocked( true );\r\n\r\n\t\t// draw into the stencil buffer\r\n\r\n\t\trenderer.setRenderTarget( readBuffer );\r\n\t\tif ( this.clear ) renderer.clear();\r\n\t\trenderer.render( this.scene, this.camera );\r\n\r\n\t\trenderer.setRenderTarget( writeBuffer );\r\n\t\tif ( this.clear ) renderer.clear();\r\n\t\trenderer.render( this.scene, this.camera );\r\n\r\n\t\t// unlock color and depth buffer and make them writable for subsequent rendering/clearing\r\n\r\n\t\tstate.buffers.color.setLocked( false );\r\n\t\tstate.buffers.depth.setLocked( false );\r\n\r\n\t\tstate.buffers.color.setMask( true );\r\n\t\tstate.buffers.depth.setMask( true );\r\n\r\n\t\t// only render where stencil is set to 1\r\n\r\n\t\tstate.buffers.stencil.setLocked( false );\r\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\r\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\r\n\t\tstate.buffers.stencil.setLocked( true );\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * This pass can be used to clear a mask previously defined with {@link MaskPass}.\r\n *\r\n * ```js\r\n * const clearPass = new ClearMaskPass();\r\n * composer.addPass( clearPass );\r\n * ```\r\n *\r\n * @augments Pass\r\n */\r\nclass ClearMaskPass extends Pass {\r\n\r\n\t/**\r\n\t * Constructs a new clear mask pass.\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * Overwritten to disable the swap.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.needsSwap = false;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Performs the clear of the currently defined mask.\r\n\t *\r\n\t * @param {WebGLRenderer} renderer - The renderer.\r\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\r\n\t * destination for the pass.\r\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\r\n\t * previous pass from this buffer.\r\n\t * @param {number} deltaTime - The delta time in seconds.\r\n\t * @param {boolean} maskActive - Whether masking is active or not.\r\n\t */\r\n\trender( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\r\n\r\n\t\trenderer.state.buffers.stencil.setLocked( false );\r\n\t\trenderer.state.buffers.stencil.setTest( false );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { MaskPass, ClearMaskPass };\r\n","import {\r\n\tClock,\r\n\tHalfFloatType,\r\n\tNoBlending,\r\n\tVector2,\r\n\tWebGLRenderTarget\r\n} from 'three';\r\nimport { CopyShader } from '../shaders/CopyShader.js';\r\nimport { ShaderPass } from './ShaderPass.js';\r\nimport { ClearMaskPass, MaskPass } from './MaskPass.js';\r\n\r\n/**\r\n * Used to implement post-processing effects in three.js.\r\n * The class manages a chain of post-processing passes to produce the final visual result.\r\n * Post-processing passes are executed in order of their addition/insertion.\r\n * The last pass is automatically rendered to screen.\r\n *\r\n * This module can only be used with {@link WebGLRenderer}.\r\n *\r\n * ```js\r\n * const composer = new EffectComposer( renderer );\r\n *\r\n * // adding some passes\r\n * const renderPass = new RenderPass( scene, camera );\r\n * composer.addPass( renderPass );\r\n *\r\n * const glitchPass = new GlitchPass();\r\n * composer.addPass( glitchPass );\r\n *\r\n * const outputPass = new OutputPass()\r\n * composer.addPass( outputPass );\r\n *\r\n * function animate() {\r\n *\r\n * \tcomposer.render(); // instead of renderer.render()\r\n *\r\n * }\r\n * ```\r\n *\r\n * @three_import import { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js';\r\n */\r\nclass EffectComposer {\r\n\r\n\t/**\r\n\t * Constructs a new effect composer.\r\n\t *\r\n\t * @param {WebGLRenderer} renderer - The renderer.\r\n\t * @param {WebGLRenderTarget} [renderTarget] - This render target and a clone will\r\n\t * be used as the internal read and write buffers. If not given, the composer creates\r\n\t * the buffers automatically.\r\n\t */\r\n\tconstructor( renderer, renderTarget ) {\r\n\r\n\t\t/**\r\n\t\t * The renderer.\r\n\t\t *\r\n\t\t * @type {WebGLRenderer}\r\n\t\t */\r\n\t\tthis.renderer = renderer;\r\n\r\n\t\tthis._pixelRatio = renderer.getPixelRatio();\r\n\r\n\t\tif ( renderTarget === undefined ) {\r\n\r\n\t\t\tconst size = renderer.getSize( new Vector2() );\r\n\t\t\tthis._width = size.width;\r\n\t\t\tthis._height = size.height;\r\n\r\n\t\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, { type: HalfFloatType } );\r\n\t\t\trenderTarget.texture.name = 'EffectComposer.rt1';\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis._width = renderTarget.width;\r\n\t\t\tthis._height = renderTarget.height;\r\n\r\n\t\t}\r\n\r\n\t\tthis.renderTarget1 = renderTarget;\r\n\t\tthis.renderTarget2 = renderTarget.clone();\r\n\t\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\r\n\r\n\t\t/**\r\n\t\t * A reference to the internal write buffer. Passes usually write\r\n\t\t * their result into this buffer.\r\n\t\t *\r\n\t\t * @type {WebGLRenderTarget}\r\n\t\t */\r\n\t\tthis.writeBuffer = this.renderTarget1;\r\n\r\n\t\t/**\r\n\t\t * A reference to the internal read buffer. Passes usually read\r\n\t\t * the previous render result from this buffer.\r\n\t\t *\r\n\t\t * @type {WebGLRenderTarget}\r\n\t\t */\r\n\t\tthis.readBuffer = this.renderTarget2;\r\n\r\n\t\t/**\r\n\t\t * Whether the final pass is rendered to the screen (default framebuffer) or not.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.renderToScreen = true;\r\n\r\n\t\t/**\r\n\t\t * An array representing the (ordered) chain of post-processing passes.\r\n\t\t *\r\n\t\t * @type {Array<Pass>}\r\n\t\t */\r\n\t\tthis.passes = [];\r\n\r\n\t\t/**\r\n\t\t * A copy pass used for internal swap operations.\r\n\t\t *\r\n\t\t * @private\r\n\t\t * @type {ShaderPass}\r\n\t\t */\r\n\t\tthis.copyPass = new ShaderPass( CopyShader );\r\n\t\tthis.copyPass.material.blending = NoBlending;\r\n\r\n\t\t/**\r\n\t\t * The internal clock for managing time data.\r\n\t\t *\r\n\t\t * @private\r\n\t\t * @type {Clock}\r\n\t\t */\r\n\t\tthis.clock = new Clock();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Swaps the internal read/write buffers.\r\n\t */\r\n\tswapBuffers() {\r\n\r\n\t\tconst tmp = this.readBuffer;\r\n\t\tthis.readBuffer = this.writeBuffer;\r\n\t\tthis.writeBuffer = tmp;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds the given pass to the pass chain.\r\n\t *\r\n\t * @param {Pass} pass - The pass to add.\r\n\t */\r\n\taddPass( pass ) {\r\n\r\n\t\tthis.passes.push( pass );\r\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Inserts the given pass at a given index.\r\n\t *\r\n\t * @param {Pass} pass - The pass to insert.\r\n\t * @param {number} index - The index into the pass chain.\r\n\t */\r\n\tinsertPass( pass, index ) {\r\n\r\n\t\tthis.passes.splice( index, 0, pass );\r\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Removes the given pass from the pass chain.\r\n\t *\r\n\t * @param {Pass} pass - The pass to remove.\r\n\t */\r\n\tremovePass( pass ) {\r\n\r\n\t\tconst index = this.passes.indexOf( pass );\r\n\r\n\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\tthis.passes.splice( index, 1 );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the pass for the given index is the last enabled pass in the pass chain.\r\n\t *\r\n\t * @param {number} passIndex - The pass index.\r\n\t * @return {boolean} Whether the pass for the given index is the last pass in the pass chain.\r\n\t */\r\n\tisLastEnabledPass( passIndex ) {\r\n\r\n\t\tfor ( let i = passIndex + 1; i < this.passes.length; i ++ ) {\r\n\r\n\t\t\tif ( this.passes[ i ].enabled ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Executes all enabled post-processing passes in order to produce the final frame.\r\n\t *\r\n\t * @param {number} deltaTime - The delta time in seconds. If not given, the composer computes\r\n\t * its own time delta value.\r\n\t */\r\n\trender( deltaTime ) {\r\n\r\n\t\t// deltaTime value is in seconds\r\n\r\n\t\tif ( deltaTime === undefined ) {\r\n\r\n\t\t\tdeltaTime = this.clock.getDelta();\r\n\r\n\t\t}\r\n\r\n\t\tconst currentRenderTarget = this.renderer.getRenderTarget();\r\n\r\n\t\tlet maskActive = false;\r\n\r\n\t\tfor ( let i = 0, il = this.passes.length; i < il; i ++ ) {\r\n\r\n\t\t\tconst pass = this.passes[ i ];\r\n\r\n\t\t\tif ( pass.enabled === false ) continue;\r\n\r\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\r\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\r\n\r\n\t\t\tif ( pass.needsSwap ) {\r\n\r\n\t\t\t\tif ( maskActive ) {\r\n\r\n\t\t\t\t\tconst context = this.renderer.getContext();\r\n\t\t\t\t\tconst stencil = this.renderer.state.buffers.stencil;\r\n\r\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\r\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\r\n\r\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\r\n\r\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\r\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.swapBuffers();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( MaskPass !== undefined ) {\r\n\r\n\t\t\t\tif ( pass instanceof MaskPass ) {\r\n\r\n\t\t\t\t\tmaskActive = true;\r\n\r\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\r\n\r\n\t\t\t\t\tmaskActive = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Resets the internal state of the EffectComposer.\r\n\t *\r\n\t * @param {WebGLRenderTarget} [renderTarget] - This render target has the same purpose like\r\n\t * the one from the constructor. If set, it is used to setup the read and write buffers.\r\n\t */\r\n\treset( renderTarget ) {\r\n\r\n\t\tif ( renderTarget === undefined ) {\r\n\r\n\t\t\tconst size = this.renderer.getSize( new Vector2() );\r\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\r\n\t\t\tthis._width = size.width;\r\n\t\t\tthis._height = size.height;\r\n\r\n\t\t\trenderTarget = this.renderTarget1.clone();\r\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\r\n\r\n\t\t}\r\n\r\n\t\tthis.renderTarget1.dispose();\r\n\t\tthis.renderTarget2.dispose();\r\n\t\tthis.renderTarget1 = renderTarget;\r\n\t\tthis.renderTarget2 = renderTarget.clone();\r\n\r\n\t\tthis.writeBuffer = this.renderTarget1;\r\n\t\tthis.readBuffer = this.renderTarget2;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Resizes the internal read and write buffers as well as all passes. Similar to {@link WebGLRenderer#setSize},\r\n\t * this method honors the current pixel ration.\r\n\t *\r\n\t * @param {number} width - The width in logical pixels.\r\n\t * @param {number} height - The height in logical pixels.\r\n\t */\r\n\tsetSize( width, height ) {\r\n\r\n\t\tthis._width = width;\r\n\t\tthis._height = height;\r\n\r\n\t\tconst effectiveWidth = this._width * this._pixelRatio;\r\n\t\tconst effectiveHeight = this._height * this._pixelRatio;\r\n\r\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\r\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\r\n\r\n\t\tfor ( let i = 0; i < this.passes.length; i ++ ) {\r\n\r\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets device pixel ratio. This is usually used for HiDPI device to prevent blurring output.\r\n\t * Setting the pixel ratio will automatically resize the composer.\r\n\t *\r\n\t * @param {number} pixelRatio - The pixel ratio to set.\r\n\t */\r\n\tsetPixelRatio( pixelRatio ) {\r\n\r\n\t\tthis._pixelRatio = pixelRatio;\r\n\r\n\t\tthis.setSize( this._width, this._height );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Frees the GPU-related resources allocated by this instance. Call this\r\n\t * method whenever the composer is no longer used in your app.\r\n\t */\r\n\tdispose() {\r\n\r\n\t\tthis.renderTarget1.dispose();\r\n\t\tthis.renderTarget2.dispose();\r\n\r\n\t\tthis.copyPass.dispose();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { EffectComposer };\r\n","import {\r\n\tColor\r\n} from 'three';\r\n\r\n/**\r\n * @module LuminosityHighPassShader\r\n * @three_import import { LuminosityHighPassShader } from 'three/addons/shaders/LuminosityHighPassShader.js';\r\n */\r\n\r\n/**\r\n * Luminosity high pass shader.\r\n *\r\n * @constant\r\n * @type {ShaderMaterial~Shader}\r\n */\r\nconst LuminosityHighPassShader = {\r\n\r\n\tname: 'LuminosityHighPassShader',\r\n\r\n\tuniforms: {\r\n\r\n\t\t'tDiffuse': { value: null },\r\n\t\t'luminosityThreshold': { value: 1.0 },\r\n\t\t'smoothWidth': { value: 1.0 },\r\n\t\t'defaultColor': { value: new Color( 0x000000 ) },\r\n\t\t'defaultOpacity': { value: 0.0 }\r\n\r\n\t},\r\n\r\n\tvertexShader: /* glsl */`\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvUv = uv;\r\n\r\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t\t}`,\r\n\r\n\tfragmentShader: /* glsl */`\r\n\r\n\t\tuniform sampler2D tDiffuse;\r\n\t\tuniform vec3 defaultColor;\r\n\t\tuniform float defaultOpacity;\r\n\t\tuniform float luminosityThreshold;\r\n\t\tuniform float smoothWidth;\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\r\n\r\n\t\t\tfloat v = luminance( texel.xyz );\r\n\r\n\t\t\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\r\n\r\n\t\t\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\r\n\r\n\t\t\tgl_FragColor = mix( outputColor, texel, alpha );\r\n\r\n\t\t}`\r\n\r\n};\r\n\r\nexport { LuminosityHighPassShader };\r\n","import {\r\n\tAdditiveBlending,\r\n\tColor,\r\n\tHalfFloatType,\r\n\tMeshBasicMaterial,\r\n\tShaderMaterial,\r\n\tUniformsUtils,\r\n\tVector2,\r\n\tVector3,\r\n\tWebGLRenderTarget\r\n} from 'three';\r\nimport { Pass, FullScreenQuad } from './Pass.js';\r\nimport { CopyShader } from '../shaders/CopyShader.js';\r\nimport { LuminosityHighPassShader } from '../shaders/LuminosityHighPassShader.js';\r\n\r\n/**\r\n * This pass is inspired by the bloom pass of Unreal Engine. It creates a\r\n * mip map chain of bloom textures and blurs them with different radii. Because\r\n * of the weighted combination of mips, and because larger blurs are done on\r\n * higher mips, this effect provides good quality and performance.\r\n *\r\n * When using this pass, tone mapping must be enabled in the renderer settings.\r\n *\r\n * Reference:\r\n * - [Bloom in Unreal Engine]{@link https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/Bloom/}\r\n *\r\n * ```js\r\n * const resolution = new THREE.Vector2( window.innerWidth, window.innerHeight );\r\n * const bloomPass = new UnrealBloomPass( resolution, 1.5, 0.4, 0.85 );\r\n * composer.addPass( bloomPass );\r\n * ```\r\n *\r\n * @augments Pass\r\n * @three_import import { UnrealBloomPass } from 'three/addons/postprocessing/UnrealBloomPass.js';\r\n */\r\nclass UnrealBloomPass extends Pass {\r\n\r\n\t/**\r\n\t * Constructs a new Unreal Bloom pass.\r\n\t *\r\n\t * @param {Vector2} [resolution] - The effect's resolution.\r\n\t * @param {number} [strength=1] - The Bloom strength.\r\n\t * @param {number} radius - The Bloom radius.\r\n\t * @param {number} threshold - The luminance threshold limits which bright areas contribute to the Bloom effect.\r\n\t */\r\n\tconstructor( resolution, strength = 1, radius, threshold ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The Bloom strength.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tthis.strength = strength;\r\n\r\n\t\t/**\r\n\t\t * The Bloom radius.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tthis.radius = radius;\r\n\r\n\t\t/**\r\n\t\t * The luminance threshold limits which bright areas contribute to the Bloom effect.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tthis.threshold = threshold;\r\n\r\n\t\t/**\r\n\t\t * The effect's resolution.\r\n\t\t *\r\n\t\t * @type {Vector2}\r\n\t\t * @default (256,256)\r\n\t\t */\r\n\t\tthis.resolution = ( resolution !== undefined ) ? new Vector2( resolution.x, resolution.y ) : new Vector2( 256, 256 );\r\n\r\n\t\t/**\r\n\t\t * The effect's clear color\r\n\t\t *\r\n\t\t * @type {Color}\r\n\t\t * @default (0,0,0)\r\n\t\t */\r\n\t\tthis.clearColor = new Color( 0, 0, 0 );\r\n\r\n\t\t/**\r\n\t\t * Overwritten to disable the swap.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.needsSwap = false;\r\n\r\n\t\t// internals\r\n\r\n\t\t// render targets\r\n\t\tthis.renderTargetsHorizontal = [];\r\n\t\tthis.renderTargetsVertical = [];\r\n\t\tthis.nMips = 5;\r\n\t\tlet resx = Math.round( this.resolution.x / 2 );\r\n\t\tlet resy = Math.round( this.resolution.y / 2 );\r\n\r\n\t\tthis.renderTargetBright = new WebGLRenderTarget( resx, resy, { type: HalfFloatType } );\r\n\t\tthis.renderTargetBright.texture.name = 'UnrealBloomPass.bright';\r\n\t\tthis.renderTargetBright.texture.generateMipmaps = false;\r\n\r\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\r\n\r\n\t\t\tconst renderTargetHorizontal = new WebGLRenderTarget( resx, resy, { type: HalfFloatType } );\r\n\r\n\t\t\trenderTargetHorizontal.texture.name = 'UnrealBloomPass.h' + i;\r\n\t\t\trenderTargetHorizontal.texture.generateMipmaps = false;\r\n\r\n\t\t\tthis.renderTargetsHorizontal.push( renderTargetHorizontal );\r\n\r\n\t\t\tconst renderTargetVertical = new WebGLRenderTarget( resx, resy, { type: HalfFloatType } );\r\n\r\n\t\t\trenderTargetVertical.texture.name = 'UnrealBloomPass.v' + i;\r\n\t\t\trenderTargetVertical.texture.generateMipmaps = false;\r\n\r\n\t\t\tthis.renderTargetsVertical.push( renderTargetVertical );\r\n\r\n\t\t\tresx = Math.round( resx / 2 );\r\n\r\n\t\t\tresy = Math.round( resy / 2 );\r\n\r\n\t\t}\r\n\r\n\t\t// luminosity high pass material\r\n\r\n\t\tconst highPassShader = LuminosityHighPassShader;\r\n\t\tthis.highPassUniforms = UniformsUtils.clone( highPassShader.uniforms );\r\n\r\n\t\tthis.highPassUniforms[ 'luminosityThreshold' ].value = threshold;\r\n\t\tthis.highPassUniforms[ 'smoothWidth' ].value = 0.01;\r\n\r\n\t\tthis.materialHighPassFilter = new ShaderMaterial( {\r\n\t\t\tuniforms: this.highPassUniforms,\r\n\t\t\tvertexShader: highPassShader.vertexShader,\r\n\t\t\tfragmentShader: highPassShader.fragmentShader\r\n\t\t} );\r\n\r\n\t\t// gaussian blur materials\r\n\r\n\t\tthis.separableBlurMaterials = [];\r\n\t\tconst kernelSizeArray = [ 3, 5, 7, 9, 11 ];\r\n\t\tresx = Math.round( this.resolution.x / 2 );\r\n\t\tresy = Math.round( this.resolution.y / 2 );\r\n\r\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\r\n\r\n\t\t\tthis.separableBlurMaterials.push( this._getSeparableBlurMaterial( kernelSizeArray[ i ] ) );\r\n\r\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'invSize' ].value = new Vector2( 1 / resx, 1 / resy );\r\n\r\n\t\t\tresx = Math.round( resx / 2 );\r\n\r\n\t\t\tresy = Math.round( resy / 2 );\r\n\r\n\t\t}\r\n\r\n\t\t// composite material\r\n\r\n\t\tthis.compositeMaterial = this._getCompositeMaterial( this.nMips );\r\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture1' ].value = this.renderTargetsVertical[ 0 ].texture;\r\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture2' ].value = this.renderTargetsVertical[ 1 ].texture;\r\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture3' ].value = this.renderTargetsVertical[ 2 ].texture;\r\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture4' ].value = this.renderTargetsVertical[ 3 ].texture;\r\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture5' ].value = this.renderTargetsVertical[ 4 ].texture;\r\n\t\tthis.compositeMaterial.uniforms[ 'bloomStrength' ].value = strength;\r\n\t\tthis.compositeMaterial.uniforms[ 'bloomRadius' ].value = 0.1;\r\n\r\n\t\tconst bloomFactors = [ 1.0, 0.8, 0.6, 0.4, 0.2 ];\r\n\t\tthis.compositeMaterial.uniforms[ 'bloomFactors' ].value = bloomFactors;\r\n\t\tthis.bloomTintColors = [ new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ) ];\r\n\t\tthis.compositeMaterial.uniforms[ 'bloomTintColors' ].value = this.bloomTintColors;\r\n\r\n\t\t// blend material\r\n\r\n\t\tthis.copyUniforms = UniformsUtils.clone( CopyShader.uniforms );\r\n\r\n\t\tthis.blendMaterial = new ShaderMaterial( {\r\n\t\t\tuniforms: this.copyUniforms,\r\n\t\t\tvertexShader: CopyShader.vertexShader,\r\n\t\t\tfragmentShader: CopyShader.fragmentShader,\r\n\t\t\tblending: AdditiveBlending,\r\n\t\t\tdepthTest: false,\r\n\t\t\tdepthWrite: false,\r\n\t\t\ttransparent: true\r\n\t\t} );\r\n\r\n\t\tthis._oldClearColor = new Color();\r\n\t\tthis._oldClearAlpha = 1;\r\n\r\n\t\tthis._basic = new MeshBasicMaterial();\r\n\r\n\t\tthis._fsQuad = new FullScreenQuad( null );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Frees the GPU-related resources allocated by this instance. Call this\r\n\t * method whenever the pass is no longer used in your app.\r\n\t */\r\n\tdispose() {\r\n\r\n\t\tfor ( let i = 0; i < this.renderTargetsHorizontal.length; i ++ ) {\r\n\r\n\t\t\tthis.renderTargetsHorizontal[ i ].dispose();\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0; i < this.renderTargetsVertical.length; i ++ ) {\r\n\r\n\t\t\tthis.renderTargetsVertical[ i ].dispose();\r\n\r\n\t\t}\r\n\r\n\t\tthis.renderTargetBright.dispose();\r\n\r\n\t\t//\r\n\r\n\t\tfor ( let i = 0; i < this.separableBlurMaterials.length; i ++ ) {\r\n\r\n\t\t\tthis.separableBlurMaterials[ i ].dispose();\r\n\r\n\t\t}\r\n\r\n\t\tthis.compositeMaterial.dispose();\r\n\t\tthis.blendMaterial.dispose();\r\n\t\tthis._basic.dispose();\r\n\r\n\t\t//\r\n\r\n\t\tthis._fsQuad.dispose();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the size of the pass.\r\n\t *\r\n\t * @param {number} width - The width to set.\r\n\t * @param {number} height - The width to set.\r\n\t */\r\n\tsetSize( width, height ) {\r\n\r\n\t\tlet resx = Math.round( width / 2 );\r\n\t\tlet resy = Math.round( height / 2 );\r\n\r\n\t\tthis.renderTargetBright.setSize( resx, resy );\r\n\r\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\r\n\r\n\t\t\tthis.renderTargetsHorizontal[ i ].setSize( resx, resy );\r\n\t\t\tthis.renderTargetsVertical[ i ].setSize( resx, resy );\r\n\r\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'invSize' ].value = new Vector2( 1 / resx, 1 / resy );\r\n\r\n\t\t\tresx = Math.round( resx / 2 );\r\n\t\t\tresy = Math.round( resy / 2 );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Performs the Bloom pass.\r\n\t *\r\n\t * @param {WebGLRenderer} renderer - The renderer.\r\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\r\n\t * destination for the pass.\r\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\r\n\t * previous pass from this buffer.\r\n\t * @param {number} deltaTime - The delta time in seconds.\r\n\t * @param {boolean} maskActive - Whether masking is active or not.\r\n\t */\r\n\trender( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\r\n\r\n\t\trenderer.getClearColor( this._oldClearColor );\r\n\t\tthis._oldClearAlpha = renderer.getClearAlpha();\r\n\t\tconst oldAutoClear = renderer.autoClear;\r\n\t\trenderer.autoClear = false;\r\n\r\n\t\trenderer.setClearColor( this.clearColor, 0 );\r\n\r\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\r\n\r\n\t\t// Render input to screen\r\n\r\n\t\tif ( this.renderToScreen ) {\r\n\r\n\t\t\tthis._fsQuad.material = this._basic;\r\n\t\t\tthis._basic.map = readBuffer.texture;\r\n\r\n\t\t\trenderer.setRenderTarget( null );\r\n\t\t\trenderer.clear();\r\n\t\t\tthis._fsQuad.render( renderer );\r\n\r\n\t\t}\r\n\r\n\t\t// 1. Extract Bright Areas\r\n\r\n\t\tthis.highPassUniforms[ 'tDiffuse' ].value = readBuffer.texture;\r\n\t\tthis.highPassUniforms[ 'luminosityThreshold' ].value = this.threshold;\r\n\t\tthis._fsQuad.material = this.materialHighPassFilter;\r\n\r\n\t\trenderer.setRenderTarget( this.renderTargetBright );\r\n\t\trenderer.clear();\r\n\t\tthis._fsQuad.render( renderer );\r\n\r\n\t\t// 2. Blur All the mips progressively\r\n\r\n\t\tlet inputRenderTarget = this.renderTargetBright;\r\n\r\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\r\n\r\n\t\t\tthis._fsQuad.material = this.separableBlurMaterials[ i ];\r\n\r\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'colorTexture' ].value = inputRenderTarget.texture;\r\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'direction' ].value = UnrealBloomPass.BlurDirectionX;\r\n\t\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ i ] );\r\n\t\t\trenderer.clear();\r\n\t\t\tthis._fsQuad.render( renderer );\r\n\r\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'colorTexture' ].value = this.renderTargetsHorizontal[ i ].texture;\r\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'direction' ].value = UnrealBloomPass.BlurDirectionY;\r\n\t\t\trenderer.setRenderTarget( this.renderTargetsVertical[ i ] );\r\n\t\t\trenderer.clear();\r\n\t\t\tthis._fsQuad.render( renderer );\r\n\r\n\t\t\tinputRenderTarget = this.renderTargetsVertical[ i ];\r\n\r\n\t\t}\r\n\r\n\t\t// Composite All the mips\r\n\r\n\t\tthis._fsQuad.material = this.compositeMaterial;\r\n\t\tthis.compositeMaterial.uniforms[ 'bloomStrength' ].value = this.strength;\r\n\t\tthis.compositeMaterial.uniforms[ 'bloomRadius' ].value = this.radius;\r\n\t\tthis.compositeMaterial.uniforms[ 'bloomTintColors' ].value = this.bloomTintColors;\r\n\r\n\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ 0 ] );\r\n\t\trenderer.clear();\r\n\t\tthis._fsQuad.render( renderer );\r\n\r\n\t\t// Blend it additively over the input texture\r\n\r\n\t\tthis._fsQuad.material = this.blendMaterial;\r\n\t\tthis.copyUniforms[ 'tDiffuse' ].value = this.renderTargetsHorizontal[ 0 ].texture;\r\n\r\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\r\n\r\n\t\tif ( this.renderToScreen ) {\r\n\r\n\t\t\trenderer.setRenderTarget( null );\r\n\t\t\tthis._fsQuad.render( renderer );\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderer.setRenderTarget( readBuffer );\r\n\t\t\tthis._fsQuad.render( renderer );\r\n\r\n\t\t}\r\n\r\n\t\t// Restore renderer settings\r\n\r\n\t\trenderer.setClearColor( this._oldClearColor, this._oldClearAlpha );\r\n\t\trenderer.autoClear = oldAutoClear;\r\n\r\n\t}\r\n\r\n\t// internals\r\n\r\n\t_getSeparableBlurMaterial( kernelRadius ) {\r\n\r\n\t\tconst coefficients = [];\r\n\r\n\t\tfor ( let i = 0; i < kernelRadius; i ++ ) {\r\n\r\n\t\t\tcoefficients.push( 0.39894 * Math.exp( - 0.5 * i * i / ( kernelRadius * kernelRadius ) ) / kernelRadius );\r\n\r\n\t\t}\r\n\r\n\t\treturn new ShaderMaterial( {\r\n\r\n\t\t\tdefines: {\r\n\t\t\t\t'KERNEL_RADIUS': kernelRadius\r\n\t\t\t},\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\t'colorTexture': { value: null },\r\n\t\t\t\t'invSize': { value: new Vector2( 0.5, 0.5 ) }, // inverse texture size\r\n\t\t\t\t'direction': { value: new Vector2( 0.5, 0.5 ) },\r\n\t\t\t\t'gaussianCoefficients': { value: coefficients } // precomputed Gaussian coefficients\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader:\r\n\t\t\t\t`varying vec2 vUv;\r\n\t\t\t\tvoid main() {\r\n\t\t\t\t\tvUv = uv;\r\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\t\t\t\t}`,\r\n\r\n\t\t\tfragmentShader:\r\n\t\t\t\t`#include <common>\r\n\t\t\t\tvarying vec2 vUv;\r\n\t\t\t\tuniform sampler2D colorTexture;\r\n\t\t\t\tuniform vec2 invSize;\r\n\t\t\t\tuniform vec2 direction;\r\n\t\t\t\tuniform float gaussianCoefficients[KERNEL_RADIUS];\r\n\r\n\t\t\t\tvoid main() {\r\n\t\t\t\t\tfloat weightSum = gaussianCoefficients[0];\r\n\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv ).rgb * weightSum;\r\n\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\r\n\t\t\t\t\t\tfloat x = float(i);\r\n\t\t\t\t\t\tfloat w = gaussianCoefficients[i];\r\n\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\r\n\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset ).rgb;\r\n\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset ).rgb;\r\n\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\r\n\t\t\t\t\t\tweightSum += 2.0 * w;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\r\n\t\t\t\t}`\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\t_getCompositeMaterial( nMips ) {\r\n\r\n\t\treturn new ShaderMaterial( {\r\n\r\n\t\t\tdefines: {\r\n\t\t\t\t'NUM_MIPS': nMips\r\n\t\t\t},\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\t'blurTexture1': { value: null },\r\n\t\t\t\t'blurTexture2': { value: null },\r\n\t\t\t\t'blurTexture3': { value: null },\r\n\t\t\t\t'blurTexture4': { value: null },\r\n\t\t\t\t'blurTexture5': { value: null },\r\n\t\t\t\t'bloomStrength': { value: 1.0 },\r\n\t\t\t\t'bloomFactors': { value: null },\r\n\t\t\t\t'bloomTintColors': { value: null },\r\n\t\t\t\t'bloomRadius': { value: 0.0 }\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader:\r\n\t\t\t\t`varying vec2 vUv;\r\n\t\t\t\tvoid main() {\r\n\t\t\t\t\tvUv = uv;\r\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\t\t\t\t}`,\r\n\r\n\t\t\tfragmentShader:\r\n\t\t\t\t`varying vec2 vUv;\r\n\t\t\t\tuniform sampler2D blurTexture1;\r\n\t\t\t\tuniform sampler2D blurTexture2;\r\n\t\t\t\tuniform sampler2D blurTexture3;\r\n\t\t\t\tuniform sampler2D blurTexture4;\r\n\t\t\t\tuniform sampler2D blurTexture5;\r\n\t\t\t\tuniform float bloomStrength;\r\n\t\t\t\tuniform float bloomRadius;\r\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\r\n\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\r\n\r\n\t\t\t\tfloat lerpBloomFactor(const in float factor) {\r\n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\r\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvoid main() {\r\n\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +\r\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +\r\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +\r\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +\r\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\r\n\t\t\t\t}`\r\n\t\t} );\r\n\r\n\t}\r\n\r\n}\r\n\r\nUnrealBloomPass.BlurDirectionX = new Vector2( 1.0, 0.0 );\r\nUnrealBloomPass.BlurDirectionY = new Vector2( 0.0, 1.0 );\r\n\r\nexport { UnrealBloomPass };\r\n","import {\r\n\tColor\r\n} from 'three';\r\nimport { Pass } from './Pass.js';\r\n\r\n/**\r\n * This class represents a render pass. It takes a camera and a scene and produces\r\n * a beauty pass for subsequent post processing effects.\r\n *\r\n * ```js\r\n * const renderPass = new RenderPass( scene, camera );\r\n * composer.addPass( renderPass );\r\n * ```\r\n *\r\n * @augments Pass\r\n * @three_import import { RenderPass } from 'three/addons/postprocessing/RenderPass.js';\r\n */\r\nclass RenderPass extends Pass {\r\n\r\n\t/**\r\n\t * Constructs a new render pass.\r\n\t *\r\n\t * @param {Scene} scene - The scene to render.\r\n\t * @param {Camera} camera - The camera.\r\n\t * @param {?Material} [overrideMaterial=null] - The override material. If set, this material is used\r\n\t * for all objects in the scene.\r\n\t * @param {?(number|Color|string)} [clearColor=null] - The clear color of the render pass.\r\n\t * @param {?number} [clearAlpha=null] - The clear alpha of the render pass.\r\n\t */\r\n\tconstructor( scene, camera, overrideMaterial = null, clearColor = null, clearAlpha = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The scene to render.\r\n\t\t *\r\n\t\t * @type {Scene}\r\n\t\t */\r\n\t\tthis.scene = scene;\r\n\r\n\t\t/**\r\n\t\t * The camera.\r\n\t\t *\r\n\t\t * @type {Camera}\r\n\t\t */\r\n\t\tthis.camera = camera;\r\n\r\n\t\t/**\r\n\t\t * The override material. If set, this material is used\r\n\t\t * for all objects in the scene.\r\n\t\t *\r\n\t\t * @type {?Material}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.overrideMaterial = overrideMaterial;\r\n\r\n\t\t/**\r\n\t\t * The clear color of the render pass.\r\n\t\t *\r\n\t\t * @type {?(number|Color|string)}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.clearColor = clearColor;\r\n\r\n\t\t/**\r\n\t\t * The clear alpha of the render pass.\r\n\t\t *\r\n\t\t * @type {?number}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.clearAlpha = clearAlpha;\r\n\r\n\t\t/**\r\n\t\t * Overwritten to perform a clear operation by default.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.clear = true;\r\n\r\n\t\t/**\r\n\t\t * If set to `true`, only the depth can be cleared when `clear` is to `false`.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.clearDepth = false;\r\n\r\n\t\t/**\r\n\t\t * Overwritten to disable the swap.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.needsSwap = false;\r\n\t\tthis._oldClearColor = new Color();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Performs a beauty pass with the configured scene and camera.\r\n\t *\r\n\t * @param {WebGLRenderer} renderer - The renderer.\r\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\r\n\t * destination for the pass.\r\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\r\n\t * previous pass from this buffer.\r\n\t * @param {number} deltaTime - The delta time in seconds.\r\n\t * @param {boolean} maskActive - Whether masking is active or not.\r\n\t */\r\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\r\n\r\n\t\tconst oldAutoClear = renderer.autoClear;\r\n\t\trenderer.autoClear = false;\r\n\r\n\t\tlet oldClearAlpha, oldOverrideMaterial;\r\n\r\n\t\tif ( this.overrideMaterial !== null ) {\r\n\r\n\t\t\toldOverrideMaterial = this.scene.overrideMaterial;\r\n\r\n\t\t\tthis.scene.overrideMaterial = this.overrideMaterial;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.clearColor !== null ) {\r\n\r\n\t\t\trenderer.getClearColor( this._oldClearColor );\r\n\t\t\trenderer.setClearColor( this.clearColor, renderer.getClearAlpha() );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.clearAlpha !== null ) {\r\n\r\n\t\t\toldClearAlpha = renderer.getClearAlpha();\r\n\t\t\trenderer.setClearAlpha( this.clearAlpha );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.clearDepth == true ) {\r\n\r\n\t\t\trenderer.clearDepth();\r\n\r\n\t\t}\r\n\r\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\r\n\r\n\t\tif ( this.clear === true ) {\r\n\r\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\r\n\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\r\n\r\n\t\t}\r\n\r\n\t\trenderer.render( this.scene, this.camera );\r\n\r\n\t\t// restore\r\n\r\n\t\tif ( this.clearColor !== null ) {\r\n\r\n\t\t\trenderer.setClearColor( this._oldClearColor );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.clearAlpha !== null ) {\r\n\r\n\t\t\trenderer.setClearAlpha( oldClearAlpha );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.overrideMaterial !== null ) {\r\n\r\n\t\t\tthis.scene.overrideMaterial = oldOverrideMaterial;\r\n\r\n\t\t}\r\n\r\n\t\trenderer.autoClear = oldAutoClear;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { RenderPass };\r\n","import {\r\n\tAdditiveBlending,\r\n\tColor,\r\n\tDoubleSide,\r\n\tHalfFloatType,\r\n\tMatrix4,\r\n\tMeshDepthMaterial,\r\n\tNoBlending,\r\n\tRGBADepthPacking,\r\n\tShaderMaterial,\r\n\tUniformsUtils,\r\n\tVector2,\r\n\tVector3,\r\n\tWebGLRenderTarget\r\n} from 'three';\r\nimport { Pass, FullScreenQuad } from './Pass.js';\r\nimport { CopyShader } from '../shaders/CopyShader.js';\r\n\r\n/**\r\n * A pass for rendering outlines around selected objects.\r\n *\r\n * ```js\r\n * const resolution = new THREE.Vector2( window.innerWidth, window.innerHeight );\r\n * const outlinePass = new OutlinePass( resolution, scene, camera );\r\n * composer.addPass( outlinePass );\r\n * ```\r\n *\r\n * @augments Pass\r\n * @three_import import { OutlinePass } from 'three/addons/postprocessing/OutlinePass.js';\r\n */\r\nclass OutlinePass extends Pass {\r\n\r\n\t/**\r\n\t * Constructs a new outline pass.\r\n\t *\r\n\t * @param {Vector2} [resolution] - The effect's resolution.\r\n\t * @param {Scene} scene - The scene to render.\r\n\t * @param {Camera} camera - The camera.\r\n\t * @param {Array<Object3D>} [selectedObjects] - The selected 3D objects that should receive an outline.\r\n\t *\r\n\t */\r\n\tconstructor( resolution, scene, camera, selectedObjects ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The scene to render.\r\n\t\t *\r\n\t\t * @type {Object}\r\n\t\t */\r\n\t\tthis.renderScene = scene;\r\n\r\n\t\t/**\r\n\t\t * The camera.\r\n\t\t *\r\n\t\t * @type {Object}\r\n\t\t */\r\n\t\tthis.renderCamera = camera;\r\n\r\n\t\t/**\r\n\t\t * The selected 3D objects that should receive an outline.\r\n\t\t *\r\n\t\t * @type {Array<Object3D>}\r\n\t\t */\r\n\t\tthis.selectedObjects = selectedObjects !== undefined ? selectedObjects : [];\r\n\r\n\t\t/**\r\n\t\t * The visible edge color.\r\n\t\t *\r\n\t\t * @type {Color}\r\n\t\t * @default (1,1,1)\r\n\t\t */\r\n\t\tthis.visibleEdgeColor = new Color( 1, 1, 1 );\r\n\r\n\t\t/**\r\n\t\t * The hidden edge color.\r\n\t\t *\r\n\t\t * @type {Color}\r\n\t\t * @default (0.1,0.04,0.02)\r\n\t\t */\r\n\t\tthis.hiddenEdgeColor = new Color( 0.1, 0.04, 0.02 );\r\n\r\n\t\t/**\r\n\t\t * Can be used for an animated glow/pulse effect.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tthis.edgeGlow = 0.0;\r\n\r\n\t\t/**\r\n\t\t * Whether to use a pattern texture for to highlight selected\r\n\t\t * 3D objects or not.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.usePatternTexture = false;\r\n\r\n\t\t/**\r\n\t\t * Can be used to highlight selected 3D objects. Requires to set\r\n\t\t * {@link OutlinePass#usePatternTexture} to `true`.\r\n\t\t *\r\n\t\t * @type {?Texture}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.patternTexture = null;\r\n\r\n\t\t/**\r\n\t\t * The edge thickness.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tthis.edgeThickness = 1.0;\r\n\r\n\t\t/**\r\n\t\t * The edge strength.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 3\r\n\t\t */\r\n\t\tthis.edgeStrength = 3.0;\r\n\r\n\t\t/**\r\n\t\t * The downsample ratio. The effect can be rendered in a much\r\n\t\t * lower resolution than the beauty pass.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 2\r\n\t\t */\r\n\t\tthis.downSampleRatio = 2;\r\n\r\n\t\t/**\r\n\t\t * The pulse period.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tthis.pulsePeriod = 0;\r\n\r\n\t\tthis._visibilityCache = new Map();\r\n\t\tthis._selectionCache = new Set();\r\n\r\n\t\t/**\r\n\t\t * The effect's resolution.\r\n\t\t *\r\n\t\t * @type {Vector2}\r\n\t\t * @default (256,256)\r\n\t\t */\r\n\t\tthis.resolution = ( resolution !== undefined ) ? new Vector2( resolution.x, resolution.y ) : new Vector2( 256, 256 );\r\n\r\n\t\tconst resx = Math.round( this.resolution.x / this.downSampleRatio );\r\n\t\tconst resy = Math.round( this.resolution.y / this.downSampleRatio );\r\n\r\n\t\tthis.renderTargetMaskBuffer = new WebGLRenderTarget( this.resolution.x, this.resolution.y );\r\n\t\tthis.renderTargetMaskBuffer.texture.name = 'OutlinePass.mask';\r\n\t\tthis.renderTargetMaskBuffer.texture.generateMipmaps = false;\r\n\r\n\t\tthis.depthMaterial = new MeshDepthMaterial();\r\n\t\tthis.depthMaterial.side = DoubleSide;\r\n\t\tthis.depthMaterial.depthPacking = RGBADepthPacking;\r\n\t\tthis.depthMaterial.blending = NoBlending;\r\n\r\n\t\tthis.prepareMaskMaterial = this._getPrepareMaskMaterial();\r\n\t\tthis.prepareMaskMaterial.side = DoubleSide;\r\n\t\tthis.prepareMaskMaterial.fragmentShader = replaceDepthToViewZ( this.prepareMaskMaterial.fragmentShader, this.renderCamera );\r\n\r\n\t\tthis.renderTargetDepthBuffer = new WebGLRenderTarget( this.resolution.x, this.resolution.y, { type: HalfFloatType } );\r\n\t\tthis.renderTargetDepthBuffer.texture.name = 'OutlinePass.depth';\r\n\t\tthis.renderTargetDepthBuffer.texture.generateMipmaps = false;\r\n\r\n\t\tthis.renderTargetMaskDownSampleBuffer = new WebGLRenderTarget( resx, resy, { type: HalfFloatType } );\r\n\t\tthis.renderTargetMaskDownSampleBuffer.texture.name = 'OutlinePass.depthDownSample';\r\n\t\tthis.renderTargetMaskDownSampleBuffer.texture.generateMipmaps = false;\r\n\r\n\t\tthis.renderTargetBlurBuffer1 = new WebGLRenderTarget( resx, resy, { type: HalfFloatType } );\r\n\t\tthis.renderTargetBlurBuffer1.texture.name = 'OutlinePass.blur1';\r\n\t\tthis.renderTargetBlurBuffer1.texture.generateMipmaps = false;\r\n\t\tthis.renderTargetBlurBuffer2 = new WebGLRenderTarget( Math.round( resx / 2 ), Math.round( resy / 2 ), { type: HalfFloatType } );\r\n\t\tthis.renderTargetBlurBuffer2.texture.name = 'OutlinePass.blur2';\r\n\t\tthis.renderTargetBlurBuffer2.texture.generateMipmaps = false;\r\n\r\n\t\tthis.edgeDetectionMaterial = this._getEdgeDetectionMaterial();\r\n\t\tthis.renderTargetEdgeBuffer1 = new WebGLRenderTarget( resx, resy, { type: HalfFloatType } );\r\n\t\tthis.renderTargetEdgeBuffer1.texture.name = 'OutlinePass.edge1';\r\n\t\tthis.renderTargetEdgeBuffer1.texture.generateMipmaps = false;\r\n\t\tthis.renderTargetEdgeBuffer2 = new WebGLRenderTarget( Math.round( resx / 2 ), Math.round( resy / 2 ), { type: HalfFloatType } );\r\n\t\tthis.renderTargetEdgeBuffer2.texture.name = 'OutlinePass.edge2';\r\n\t\tthis.renderTargetEdgeBuffer2.texture.generateMipmaps = false;\r\n\r\n\t\tconst MAX_EDGE_THICKNESS = 4;\r\n\t\tconst MAX_EDGE_GLOW = 4;\r\n\r\n\t\tthis.separableBlurMaterial1 = this._getSeparableBlurMaterial( MAX_EDGE_THICKNESS );\r\n\t\tthis.separableBlurMaterial1.uniforms[ 'texSize' ].value.set( resx, resy );\r\n\t\tthis.separableBlurMaterial1.uniforms[ 'kernelRadius' ].value = 1;\r\n\t\tthis.separableBlurMaterial2 = this._getSeparableBlurMaterial( MAX_EDGE_GLOW );\r\n\t\tthis.separableBlurMaterial2.uniforms[ 'texSize' ].value.set( Math.round( resx / 2 ), Math.round( resy / 2 ) );\r\n\t\tthis.separableBlurMaterial2.uniforms[ 'kernelRadius' ].value = MAX_EDGE_GLOW;\r\n\r\n\t\t// Overlay material\r\n\t\tthis.overlayMaterial = this._getOverlayMaterial();\r\n\r\n\t\t// copy material\r\n\r\n\t\tconst copyShader = CopyShader;\r\n\r\n\t\tthis.copyUniforms = UniformsUtils.clone( copyShader.uniforms );\r\n\r\n\t\tthis.materialCopy = new ShaderMaterial( {\r\n\t\t\tuniforms: this.copyUniforms,\r\n\t\t\tvertexShader: copyShader.vertexShader,\r\n\t\t\tfragmentShader: copyShader.fragmentShader,\r\n\t\t\tblending: NoBlending,\r\n\t\t\tdepthTest: false,\r\n\t\t\tdepthWrite: false\r\n\t\t} );\r\n\r\n\t\tthis.enabled = true;\r\n\t\tthis.needsSwap = false;\r\n\r\n\t\tthis._oldClearColor = new Color();\r\n\t\tthis.oldClearAlpha = 1;\r\n\r\n\t\tthis._fsQuad = new FullScreenQuad( null );\r\n\r\n\t\tthis.tempPulseColor1 = new Color();\r\n\t\tthis.tempPulseColor2 = new Color();\r\n\t\tthis.textureMatrix = new Matrix4();\r\n\r\n\t\tfunction replaceDepthToViewZ( string, camera ) {\r\n\r\n\t\t\tconst type = camera.isPerspectiveCamera ? 'perspective' : 'orthographic';\r\n\r\n\t\t\treturn string.replace( /DEPTH_TO_VIEW_Z/g, type + 'DepthToViewZ' );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Frees the GPU-related resources allocated by this instance. Call this\r\n\t * method whenever the pass is no longer used in your app.\r\n\t */\r\n\tdispose() {\r\n\r\n\t\tthis.renderTargetMaskBuffer.dispose();\r\n\t\tthis.renderTargetDepthBuffer.dispose();\r\n\t\tthis.renderTargetMaskDownSampleBuffer.dispose();\r\n\t\tthis.renderTargetBlurBuffer1.dispose();\r\n\t\tthis.renderTargetBlurBuffer2.dispose();\r\n\t\tthis.renderTargetEdgeBuffer1.dispose();\r\n\t\tthis.renderTargetEdgeBuffer2.dispose();\r\n\r\n\t\tthis.depthMaterial.dispose();\r\n\t\tthis.prepareMaskMaterial.dispose();\r\n\t\tthis.edgeDetectionMaterial.dispose();\r\n\t\tthis.separableBlurMaterial1.dispose();\r\n\t\tthis.separableBlurMaterial2.dispose();\r\n\t\tthis.overlayMaterial.dispose();\r\n\t\tthis.materialCopy.dispose();\r\n\r\n\t\tthis._fsQuad.dispose();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the size of the pass.\r\n\t *\r\n\t * @param {number} width - The width to set.\r\n\t * @param {number} height - The width to set.\r\n\t */\r\n\tsetSize( width, height ) {\r\n\r\n\t\tthis.renderTargetMaskBuffer.setSize( width, height );\r\n\t\tthis.renderTargetDepthBuffer.setSize( width, height );\r\n\r\n\t\tlet resx = Math.round( width / this.downSampleRatio );\r\n\t\tlet resy = Math.round( height / this.downSampleRatio );\r\n\t\tthis.renderTargetMaskDownSampleBuffer.setSize( resx, resy );\r\n\t\tthis.renderTargetBlurBuffer1.setSize( resx, resy );\r\n\t\tthis.renderTargetEdgeBuffer1.setSize( resx, resy );\r\n\t\tthis.separableBlurMaterial1.uniforms[ 'texSize' ].value.set( resx, resy );\r\n\r\n\t\tresx = Math.round( resx / 2 );\r\n\t\tresy = Math.round( resy / 2 );\r\n\r\n\t\tthis.renderTargetBlurBuffer2.setSize( resx, resy );\r\n\t\tthis.renderTargetEdgeBuffer2.setSize( resx, resy );\r\n\r\n\t\tthis.separableBlurMaterial2.uniforms[ 'texSize' ].value.set( resx, resy );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Performs the Outline pass.\r\n\t *\r\n\t * @param {WebGLRenderer} renderer - The renderer.\r\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\r\n\t * destination for the pass.\r\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\r\n\t * previous pass from this buffer.\r\n\t * @param {number} deltaTime - The delta time in seconds.\r\n\t * @param {boolean} maskActive - Whether masking is active or not.\r\n\t */\r\n\trender( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\r\n\r\n\t\tif ( this.selectedObjects.length > 0 ) {\r\n\r\n\t\t\trenderer.getClearColor( this._oldClearColor );\r\n\t\t\tthis.oldClearAlpha = renderer.getClearAlpha();\r\n\t\t\tconst oldAutoClear = renderer.autoClear;\r\n\r\n\t\t\trenderer.autoClear = false;\r\n\r\n\t\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\r\n\r\n\t\t\trenderer.setClearColor( 0xffffff, 1 );\r\n\r\n\t\t\tthis._updateSelectionCache();\r\n\r\n\t\t\t// Make selected objects invisible\r\n\t\t\tthis._changeVisibilityOfSelectedObjects( false );\r\n\r\n\t\t\tconst currentBackground = this.renderScene.background;\r\n\t\t\tconst currentOverrideMaterial = this.renderScene.overrideMaterial;\r\n\t\t\tthis.renderScene.background = null;\r\n\r\n\t\t\t// 1. Draw Non Selected objects in the depth buffer\r\n\t\t\tthis.renderScene.overrideMaterial = this.depthMaterial;\r\n\t\t\trenderer.setRenderTarget( this.renderTargetDepthBuffer );\r\n\t\t\trenderer.clear();\r\n\t\t\trenderer.render( this.renderScene, this.renderCamera );\r\n\r\n\t\t\t// Make selected objects visible\r\n\t\t\tthis._changeVisibilityOfSelectedObjects( true );\r\n\t\t\tthis._visibilityCache.clear();\r\n\r\n\t\t\t// Update Texture Matrix for Depth compare\r\n\t\t\tthis._updateTextureMatrix();\r\n\r\n\t\t\t// Make non selected objects invisible, and draw only the selected objects, by comparing the depth buffer of non selected objects\r\n\t\t\tthis._changeVisibilityOfNonSelectedObjects( false );\r\n\t\t\tthis.renderScene.overrideMaterial = this.prepareMaskMaterial;\r\n\t\t\tthis.prepareMaskMaterial.uniforms[ 'cameraNearFar' ].value.set( this.renderCamera.near, this.renderCamera.far );\r\n\t\t\tthis.prepareMaskMaterial.uniforms[ 'depthTexture' ].value = this.renderTargetDepthBuffer.texture;\r\n\t\t\tthis.prepareMaskMaterial.uniforms[ 'textureMatrix' ].value = this.textureMatrix;\r\n\t\t\trenderer.setRenderTarget( this.renderTargetMaskBuffer );\r\n\t\t\trenderer.clear();\r\n\t\t\trenderer.render( this.renderScene, this.renderCamera );\r\n\t\t\tthis._changeVisibilityOfNonSelectedObjects( true );\r\n\t\t\tthis._visibilityCache.clear();\r\n\t\t\tthis._selectionCache.clear();\r\n\r\n\t\t\tthis.renderScene.background = currentBackground;\r\n\t\t\tthis.renderScene.overrideMaterial = currentOverrideMaterial;\r\n\r\n\t\t\t// 2. Downsample to Half resolution\r\n\t\t\tthis._fsQuad.material = this.materialCopy;\r\n\t\t\tthis.copyUniforms[ 'tDiffuse' ].value = this.renderTargetMaskBuffer.texture;\r\n\t\t\trenderer.setRenderTarget( this.renderTargetMaskDownSampleBuffer );\r\n\t\t\trenderer.clear();\r\n\t\t\tthis._fsQuad.render( renderer );\r\n\r\n\t\t\tthis.tempPulseColor1.copy( this.visibleEdgeColor );\r\n\t\t\tthis.tempPulseColor2.copy( this.hiddenEdgeColor );\r\n\r\n\t\t\tif ( this.pulsePeriod > 0 ) {\r\n\r\n\t\t\t\tconst scalar = ( 1 + 0.25 ) / 2 + Math.cos( performance.now() * 0.01 / this.pulsePeriod ) * ( 1.0 - 0.25 ) / 2;\r\n\t\t\t\tthis.tempPulseColor1.multiplyScalar( scalar );\r\n\t\t\t\tthis.tempPulseColor2.multiplyScalar( scalar );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// 3. Apply Edge Detection Pass\r\n\t\t\tthis._fsQuad.material = this.edgeDetectionMaterial;\r\n\t\t\tthis.edgeDetectionMaterial.uniforms[ 'maskTexture' ].value = this.renderTargetMaskDownSampleBuffer.texture;\r\n\t\t\tthis.edgeDetectionMaterial.uniforms[ 'texSize' ].value.set( this.renderTargetMaskDownSampleBuffer.width, this.renderTargetMaskDownSampleBuffer.height );\r\n\t\t\tthis.edgeDetectionMaterial.uniforms[ 'visibleEdgeColor' ].value = this.tempPulseColor1;\r\n\t\t\tthis.edgeDetectionMaterial.uniforms[ 'hiddenEdgeColor' ].value = this.tempPulseColor2;\r\n\t\t\trenderer.setRenderTarget( this.renderTargetEdgeBuffer1 );\r\n\t\t\trenderer.clear();\r\n\t\t\tthis._fsQuad.render( renderer );\r\n\r\n\t\t\t// 4. Apply Blur on Half res\r\n\t\t\tthis._fsQuad.material = this.separableBlurMaterial1;\r\n\t\t\tthis.separableBlurMaterial1.uniforms[ 'colorTexture' ].value = this.renderTargetEdgeBuffer1.texture;\r\n\t\t\tthis.separableBlurMaterial1.uniforms[ 'direction' ].value = OutlinePass.BlurDirectionX;\r\n\t\t\tthis.separableBlurMaterial1.uniforms[ 'kernelRadius' ].value = this.edgeThickness;\r\n\t\t\trenderer.setRenderTarget( this.renderTargetBlurBuffer1 );\r\n\t\t\trenderer.clear();\r\n\t\t\tthis._fsQuad.render( renderer );\r\n\t\t\tthis.separableBlurMaterial1.uniforms[ 'colorTexture' ].value = this.renderTargetBlurBuffer1.texture;\r\n\t\t\tthis.separableBlurMaterial1.uniforms[ 'direction' ].value = OutlinePass.BlurDirectionY;\r\n\t\t\trenderer.setRenderTarget( this.renderTargetEdgeBuffer1 );\r\n\t\t\trenderer.clear();\r\n\t\t\tthis._fsQuad.render( renderer );\r\n\r\n\t\t\t// Apply Blur on quarter res\r\n\t\t\tthis._fsQuad.material = this.separableBlurMaterial2;\r\n\t\t\tthis.separableBlurMaterial2.uniforms[ 'colorTexture' ].value = this.renderTargetEdgeBuffer1.texture;\r\n\t\t\tthis.separableBlurMaterial2.uniforms[ 'direction' ].value = OutlinePass.BlurDirectionX;\r\n\t\t\trenderer.setRenderTarget( this.renderTargetBlurBuffer2 );\r\n\t\t\trenderer.clear();\r\n\t\t\tthis._fsQuad.render( renderer );\r\n\t\t\tthis.separableBlurMaterial2.uniforms[ 'colorTexture' ].value = this.renderTargetBlurBuffer2.texture;\r\n\t\t\tthis.separableBlurMaterial2.uniforms[ 'direction' ].value = OutlinePass.BlurDirectionY;\r\n\t\t\trenderer.setRenderTarget( this.renderTargetEdgeBuffer2 );\r\n\t\t\trenderer.clear();\r\n\t\t\tthis._fsQuad.render( renderer );\r\n\r\n\t\t\t// Blend it additively over the input texture\r\n\t\t\tthis._fsQuad.material = this.overlayMaterial;\r\n\t\t\tthis.overlayMaterial.uniforms[ 'maskTexture' ].value = this.renderTargetMaskBuffer.texture;\r\n\t\t\tthis.overlayMaterial.uniforms[ 'edgeTexture1' ].value = this.renderTargetEdgeBuffer1.texture;\r\n\t\t\tthis.overlayMaterial.uniforms[ 'edgeTexture2' ].value = this.renderTargetEdgeBuffer2.texture;\r\n\t\t\tthis.overlayMaterial.uniforms[ 'patternTexture' ].value = this.patternTexture;\r\n\t\t\tthis.overlayMaterial.uniforms[ 'edgeStrength' ].value = this.edgeStrength;\r\n\t\t\tthis.overlayMaterial.uniforms[ 'edgeGlow' ].value = this.edgeGlow;\r\n\t\t\tthis.overlayMaterial.uniforms[ 'usePatternTexture' ].value = this.usePatternTexture;\r\n\r\n\r\n\t\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\r\n\r\n\t\t\trenderer.setRenderTarget( readBuffer );\r\n\t\t\tthis._fsQuad.render( renderer );\r\n\r\n\t\t\trenderer.setClearColor( this._oldClearColor, this.oldClearAlpha );\r\n\t\t\trenderer.autoClear = oldAutoClear;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.renderToScreen ) {\r\n\r\n\t\t\tthis._fsQuad.material = this.materialCopy;\r\n\t\t\tthis.copyUniforms[ 'tDiffuse' ].value = readBuffer.texture;\r\n\t\t\trenderer.setRenderTarget( null );\r\n\t\t\tthis._fsQuad.render( renderer );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// internals\r\n\r\n\t_updateSelectionCache() {\r\n\r\n\t\tconst cache = this._selectionCache;\r\n\r\n\t\tfunction gatherSelectedMeshesCallBack( object ) {\r\n\r\n\t\t\tif ( object.isMesh ) cache.add( object );\r\n\r\n\t\t}\r\n\r\n\t\tcache.clear();\r\n\r\n\t\tfor ( let i = 0; i < this.selectedObjects.length; i ++ ) {\r\n\r\n\t\t\tconst selectedObject = this.selectedObjects[ i ];\r\n\t\t\tselectedObject.traverse( gatherSelectedMeshesCallBack );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_changeVisibilityOfSelectedObjects( bVisible ) {\r\n\r\n\t\tconst cache = this._visibilityCache;\r\n\r\n\t\tfor ( const mesh of this._selectionCache ) {\r\n\r\n\t\t\tif ( bVisible === true ) {\r\n\r\n\t\t\t\tmesh.visible = cache.get( mesh );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tcache.set( mesh, mesh.visible );\r\n\t\t\t\tmesh.visible = bVisible;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_changeVisibilityOfNonSelectedObjects( bVisible ) {\r\n\r\n\t\tconst visibilityCache = this._visibilityCache;\r\n\t\tconst selectionCache = this._selectionCache;\r\n\r\n\t\tfunction VisibilityChangeCallBack( object ) {\r\n\r\n\t\t\tif ( object.isMesh || object.isSprite ) {\r\n\r\n\t\t\t\t// only meshes and sprites are supported by OutlinePass\r\n\r\n\t\t\t\tif ( ! selectionCache.has( object ) ) {\r\n\r\n\t\t\t\t\tconst visibility = object.visible;\r\n\r\n\t\t\t\t\tif ( bVisible === false || visibilityCache.get( object ) === true ) {\r\n\r\n\t\t\t\t\t\tobject.visible = bVisible;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvisibilityCache.set( object, visibility );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object.isPoints || object.isLine ) {\r\n\r\n\t\t\t\t// the visibility of points and lines is always set to false in order to\r\n\t\t\t\t// not affect the outline computation\r\n\r\n\t\t\t\tif ( bVisible === true ) {\r\n\r\n\t\t\t\t\tobject.visible = visibilityCache.get( object ); // restore\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tvisibilityCache.set( object, object.visible );\r\n\t\t\t\t\tobject.visible = bVisible;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.renderScene.traverse( VisibilityChangeCallBack );\r\n\r\n\t}\r\n\r\n\t_updateTextureMatrix() {\r\n\r\n\t\tthis.textureMatrix.set( 0.5, 0.0, 0.0, 0.5,\r\n\t\t\t0.0, 0.5, 0.0, 0.5,\r\n\t\t\t0.0, 0.0, 0.5, 0.5,\r\n\t\t\t0.0, 0.0, 0.0, 1.0 );\r\n\t\tthis.textureMatrix.multiply( this.renderCamera.projectionMatrix );\r\n\t\tthis.textureMatrix.multiply( this.renderCamera.matrixWorldInverse );\r\n\r\n\t}\r\n\r\n\t_getPrepareMaskMaterial() {\r\n\r\n\t\treturn new ShaderMaterial( {\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\t'depthTexture': { value: null },\r\n\t\t\t\t'cameraNearFar': { value: new Vector2( 0.5, 0.5 ) },\r\n\t\t\t\t'textureMatrix': { value: null }\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader:\r\n\t\t\t\t`#include <batching_pars_vertex>\r\n\t\t\t\t#include <morphtarget_pars_vertex>\r\n\t\t\t\t#include <skinning_pars_vertex>\r\n\r\n\t\t\t\tvarying vec4 projTexCoord;\r\n\t\t\t\tvarying vec4 vPosition;\r\n\t\t\t\tuniform mat4 textureMatrix;\r\n\r\n\t\t\t\tvoid main() {\r\n\r\n\t\t\t\t\t#include <batching_vertex>\r\n\t\t\t\t\t#include <skinbase_vertex>\r\n\t\t\t\t\t#include <begin_vertex>\r\n\t\t\t\t\t#include <morphtarget_vertex>\r\n\t\t\t\t\t#include <skinning_vertex>\r\n\t\t\t\t\t#include <project_vertex>\r\n\r\n\t\t\t\t\tvPosition = mvPosition;\r\n\r\n\t\t\t\t\tvec4 worldPosition = vec4( transformed, 1.0 );\r\n\r\n\t\t\t\t\t#ifdef USE_INSTANCING\r\n\r\n\t\t\t\t\t\tworldPosition = instanceMatrix * worldPosition;\r\n\r\n\t\t\t\t\t#endif\r\n\r\n\t\t\t\t\tworldPosition = modelMatrix * worldPosition;\r\n\r\n\t\t\t\t\tprojTexCoord = textureMatrix * worldPosition;\r\n\r\n\t\t\t\t}`,\r\n\r\n\t\t\tfragmentShader:\r\n\t\t\t\t`#include <packing>\r\n\t\t\t\tvarying vec4 vPosition;\r\n\t\t\t\tvarying vec4 projTexCoord;\r\n\t\t\t\tuniform sampler2D depthTexture;\r\n\t\t\t\tuniform vec2 cameraNearFar;\r\n\r\n\t\t\t\tvoid main() {\r\n\r\n\t\t\t\t\tfloat depth = unpackRGBAToDepth(texture2DProj( depthTexture, projTexCoord ));\r\n\t\t\t\t\tfloat viewZ = - DEPTH_TO_VIEW_Z( depth, cameraNearFar.x, cameraNearFar.y );\r\n\t\t\t\t\tfloat depthTest = (-vPosition.z > viewZ) ? 1.0 : 0.0;\r\n\t\t\t\t\tgl_FragColor = vec4(0.0, depthTest, 1.0, 1.0);\r\n\r\n\t\t\t\t}`\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\t_getEdgeDetectionMaterial() {\r\n\r\n\t\treturn new ShaderMaterial( {\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\t'maskTexture': { value: null },\r\n\t\t\t\t'texSize': { value: new Vector2( 0.5, 0.5 ) },\r\n\t\t\t\t'visibleEdgeColor': { value: new Vector3( 1.0, 1.0, 1.0 ) },\r\n\t\t\t\t'hiddenEdgeColor': { value: new Vector3( 1.0, 1.0, 1.0 ) },\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader:\r\n\t\t\t\t`varying vec2 vUv;\r\n\r\n\t\t\t\tvoid main() {\r\n\t\t\t\t\tvUv = uv;\r\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\t\t\t\t}`,\r\n\r\n\t\t\tfragmentShader:\r\n\t\t\t\t`varying vec2 vUv;\r\n\r\n\t\t\t\tuniform sampler2D maskTexture;\r\n\t\t\t\tuniform vec2 texSize;\r\n\t\t\t\tuniform vec3 visibleEdgeColor;\r\n\t\t\t\tuniform vec3 hiddenEdgeColor;\r\n\r\n\t\t\t\tvoid main() {\r\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\r\n\t\t\t\t\tvec4 uvOffset = vec4(1.0, 0.0, 0.0, 1.0) * vec4(invSize, invSize);\r\n\t\t\t\t\tvec4 c1 = texture2D( maskTexture, vUv + uvOffset.xy);\r\n\t\t\t\t\tvec4 c2 = texture2D( maskTexture, vUv - uvOffset.xy);\r\n\t\t\t\t\tvec4 c3 = texture2D( maskTexture, vUv + uvOffset.yw);\r\n\t\t\t\t\tvec4 c4 = texture2D( maskTexture, vUv - uvOffset.yw);\r\n\t\t\t\t\tfloat diff1 = (c1.r - c2.r)*0.5;\r\n\t\t\t\t\tfloat diff2 = (c3.r - c4.r)*0.5;\r\n\t\t\t\t\tfloat d = length( vec2(diff1, diff2) );\r\n\t\t\t\t\tfloat a1 = min(c1.g, c2.g);\r\n\t\t\t\t\tfloat a2 = min(c3.g, c4.g);\r\n\t\t\t\t\tfloat visibilityFactor = min(a1, a2);\r\n\t\t\t\t\tvec3 edgeColor = 1.0 - visibilityFactor > 0.001 ? visibleEdgeColor : hiddenEdgeColor;\r\n\t\t\t\t\tgl_FragColor = vec4(edgeColor, 1.0) * vec4(d);\r\n\t\t\t\t}`\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\t_getSeparableBlurMaterial( maxRadius ) {\r\n\r\n\t\treturn new ShaderMaterial( {\r\n\r\n\t\t\tdefines: {\r\n\t\t\t\t'MAX_RADIUS': maxRadius,\r\n\t\t\t},\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\t'colorTexture': { value: null },\r\n\t\t\t\t'texSize': { value: new Vector2( 0.5, 0.5 ) },\r\n\t\t\t\t'direction': { value: new Vector2( 0.5, 0.5 ) },\r\n\t\t\t\t'kernelRadius': { value: 1.0 }\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader:\r\n\t\t\t\t`varying vec2 vUv;\r\n\r\n\t\t\t\tvoid main() {\r\n\t\t\t\t\tvUv = uv;\r\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\t\t\t\t}`,\r\n\r\n\t\t\tfragmentShader:\r\n\t\t\t\t`#include <common>\r\n\t\t\t\tvarying vec2 vUv;\r\n\t\t\t\tuniform sampler2D colorTexture;\r\n\t\t\t\tuniform vec2 texSize;\r\n\t\t\t\tuniform vec2 direction;\r\n\t\t\t\tuniform float kernelRadius;\r\n\r\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\r\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvoid main() {\r\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\r\n\t\t\t\t\tfloat sigma = kernelRadius/2.0;\r\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, sigma);\r\n\t\t\t\t\tvec4 diffuseSum = texture2D( colorTexture, vUv) * weightSum;\r\n\t\t\t\t\tvec2 delta = direction * invSize * kernelRadius/float(MAX_RADIUS);\r\n\t\t\t\t\tvec2 uvOffset = delta;\r\n\t\t\t\t\tfor( int i = 1; i <= MAX_RADIUS; i ++ ) {\r\n\t\t\t\t\t\tfloat x = kernelRadius * float(i) / float(MAX_RADIUS);\r\n\t\t\t\t\t\tfloat w = gaussianPdf(x, sigma);\r\n\t\t\t\t\t\tvec4 sample1 = texture2D( colorTexture, vUv + uvOffset);\r\n\t\t\t\t\t\tvec4 sample2 = texture2D( colorTexture, vUv - uvOffset);\r\n\t\t\t\t\t\tdiffuseSum += ((sample1 + sample2) * w);\r\n\t\t\t\t\t\tweightSum += (2.0 * w);\r\n\t\t\t\t\t\tuvOffset += delta;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tgl_FragColor = diffuseSum/weightSum;\r\n\t\t\t\t}`\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\t_getOverlayMaterial() {\r\n\r\n\t\treturn new ShaderMaterial( {\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\t'maskTexture': { value: null },\r\n\t\t\t\t'edgeTexture1': { value: null },\r\n\t\t\t\t'edgeTexture2': { value: null },\r\n\t\t\t\t'patternTexture': { value: null },\r\n\t\t\t\t'edgeStrength': { value: 1.0 },\r\n\t\t\t\t'edgeGlow': { value: 1.0 },\r\n\t\t\t\t'usePatternTexture': { value: 0.0 }\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader:\r\n\t\t\t\t`varying vec2 vUv;\r\n\r\n\t\t\t\tvoid main() {\r\n\t\t\t\t\tvUv = uv;\r\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\t\t\t\t}`,\r\n\r\n\t\t\tfragmentShader:\r\n\t\t\t\t`varying vec2 vUv;\r\n\r\n\t\t\t\tuniform sampler2D maskTexture;\r\n\t\t\t\tuniform sampler2D edgeTexture1;\r\n\t\t\t\tuniform sampler2D edgeTexture2;\r\n\t\t\t\tuniform sampler2D patternTexture;\r\n\t\t\t\tuniform float edgeStrength;\r\n\t\t\t\tuniform float edgeGlow;\r\n\t\t\t\tuniform bool usePatternTexture;\r\n\r\n\t\t\t\tvoid main() {\r\n\t\t\t\t\tvec4 edgeValue1 = texture2D(edgeTexture1, vUv);\r\n\t\t\t\t\tvec4 edgeValue2 = texture2D(edgeTexture2, vUv);\r\n\t\t\t\t\tvec4 maskColor = texture2D(maskTexture, vUv);\r\n\t\t\t\t\tvec4 patternColor = texture2D(patternTexture, 6.0 * vUv);\r\n\t\t\t\t\tfloat visibilityFactor = 1.0 - maskColor.g > 0.0 ? 1.0 : 0.5;\r\n\t\t\t\t\tvec4 edgeValue = edgeValue1 + edgeValue2 * edgeGlow;\r\n\t\t\t\t\tvec4 finalColor = edgeStrength * maskColor.r * edgeValue;\r\n\t\t\t\t\tif(usePatternTexture)\r\n\t\t\t\t\t\tfinalColor += + visibilityFactor * (1.0 - maskColor.r) * (1.0 - patternColor.r);\r\n\t\t\t\t\tgl_FragColor = finalColor;\r\n\t\t\t\t}`,\r\n\t\t\tblending: AdditiveBlending,\r\n\t\t\tdepthTest: false,\r\n\t\t\tdepthWrite: false,\r\n\t\t\ttransparent: true\r\n\t\t} );\r\n\r\n\t}\r\n\r\n}\r\n\r\nOutlinePass.BlurDirectionX = new Vector2( 1.0, 0.0 );\r\nOutlinePass.BlurDirectionY = new Vector2( 0.0, 1.0 );\r\n\r\nexport { OutlinePass };\r\n","export default \"__VITE_PUBLIC_ASSET__7f38635d__\"","export default \"__VITE_PUBLIC_ASSET__78e6bed0__\"","import * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\nimport { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js';\r\nimport { UnrealBloomPass } from 'three/addons/postprocessing/UnrealBloomPass.js';\r\nimport { RenderPass } from 'three/addons/postprocessing/RenderPass.js';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\r\nimport { OutlinePass } from 'three/addons/postprocessing/OutlinePass.js';\r\n\r\nimport {getCachedModel} from '/model_loader/modelCache.js';\r\n\r\nimport sunTexture from '/images/sun.jpg';\r\nimport poolBallTexture from '/images/8ball.jpg';\r\n\r\nexport async function initSolarSystem(preloadedModels) {\r\n  // ******  SETUP  ******\r\n  console.log(\"Create the scene\");\r\n  const scene = new THREE.Scene();\r\n\r\n  console.log(\"Create a perspective projection camera\");\r\n  var camera = new THREE.PerspectiveCamera( 45, window.innerWidth/window.innerHeight, 0.1, 1000 );\r\n  camera.position.set(-175, 115, 5);\r\n\r\n  const canvas = document.getElementById('threeCanvas');\r\n  const renderer = new THREE.WebGLRenderer({ canvas, alpha: true, preserveDrawingBuffer: true});\r\n\r\n  console.log(\"Create the renderer\");\r\n\r\n  renderer.setClearColor(0x000000, 0); \r\n  renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n\r\n  console.log(\"Create an orbit control\");\r\n  const controls = new OrbitControls(camera, renderer.domElement);\r\n  controls.enableDamping = true;\r\n  controls.dampingFactor = 0.75;\r\n  controls.screenSpacePanning = false;\r\n  controls.maxDistance = 600;  \r\n\r\n\r\n  console.log(\"Set up texture loader\");\r\n  const cubeTextureLoader = new THREE.CubeTextureLoader();\r\n  const loadTexture = new THREE.TextureLoader();\r\n\r\n  // ******  POSTPROCESSING setup ******\r\n  const renderTarget = new THREE.WebGLRenderTarget(window.innerWidth, window.innerHeight, {\r\n    format: THREE.RGBAFormat,  \r\n    type: THREE.UnsignedByteType,\r\n    depthBuffer: true,\r\n    stencilBuffer: false\r\n  });\r\n\r\n  const composer = new EffectComposer(renderer, renderTarget);\r\n  composer.addPass(new RenderPass(scene, camera));\r\n\r\n  // ******  OUTLINE PASS  ******\r\n  const outlinePass = new OutlinePass(new THREE.Vector2(window.innerWidth, window.innerHeight), scene, camera);\r\n  outlinePass.edgeStrength = 3;\r\n  outlinePass.edgeGlow = 1;\r\n  outlinePass.visibleEdgeColor.set(0xFFFFFF);\r\n  outlinePass.hiddenEdgeColor.set(0x190a05);\r\n  composer.addPass(outlinePass);\r\n\r\n  // ******  BLOOM PASS  ******\r\n  const bloomPass = new UnrealBloomPass(new THREE.Vector2(window.innerWidth, window.innerHeight), 0.0001, 0.4, 0.001);\r\n  bloomPass.renderToScreen = true;\r\n  bloomPass.clear = false;\r\n  bloomPass.threshold = 1;\r\n  bloomPass.radius = 0.9;\r\n  composer.addPass(bloomPass);\r\n\r\n  // ****** AMBIENT LIGHT ******\r\n  console.log(\"Add the ambient light\");\r\n  var lightAmbient = new THREE.AmbientLight(0x222222, 6); \r\n  scene.add(lightAmbient);\r\n\r\n  // ******  Star background  ******\r\n  /*\r\n  scene.background = cubeTextureLoader.load([\r\n\r\n    bgTextureWood,\r\n    bgTextureWood,\r\n    bgTextureWood,\r\n    bgTextureWood,\r\n    bgTextureWood,\r\n    bgTextureWood\r\n  ]);\r\n  */\r\n\r\n  const colour = new THREE.Color(0x121212);\r\n  scene.background = colour;\r\n\r\n  // ****** SETTINGS FOR INTERACTIVE CONTROLS  ******\r\n  const settings = {\r\n    accelerationOrbit: 1,\r\n    acceleration: 1,\r\n    sunIntensity: 0\r\n  };\r\n\r\n  // mouse movement\r\n  const raycaster = new THREE.Raycaster();\r\n  const mouse = new THREE.Vector2();\r\n  let hasMouseMove = false;\r\n\r\n  function onMouseMove(event) {\r\n      if (!hoverEnabled) return;\r\n\r\n      hasMouseMove = true;\r\n      event.preventDefault();\r\n      mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n      mouse.y = - (event.clientY / window.innerHeight) * 2 + 1;\r\n\r\n      raycaster.setFromCamera(mouse, camera);\r\n    const intersects = raycaster.intersectObjects(raycastTargets);\r\n\r\n    const card = document.getElementById('hoverCard');\r\n\r\n    if (intersects.length > 0) {\r\n      const object = intersects[0].object;\r\n\r\n      // Position the card near the cursor\r\n      card.style.left = `${event.clientX + 10}px`;\r\n      card.style.top = `${event.clientY + 10}px`;\r\n      card.style.display = 'block';\r\n\r\n      // Add name or info\r\n      if (object === sun) {\r\n        card.innerText = \"Contact me\";\r\n      } else if (mercury.meshes.includes(object)) {\r\n        card.innerText = \"Resume\";\r\n      } else if (venus.meshes.includes(object)) {\r\n        card.innerText = \"Skill sets\";\r\n      } else if (object === earth.planet || object === earth.Atmosphere) {\r\n        card.innerText = \"Robotics\";\r\n      } else if (mars.meshes.includes(object)) {\r\n        card.innerText = \"Extracurricular\";\r\n      } else if (jupiter.meshes.includes(object)) {\r\n        card.innerText = \"Childhood\";\r\n      } else if (saturn.meshes.includes(object)) {\r\n        card.innerText = \"About me\";\r\n      } else {\r\n        card.innerText = \"\";\r\n        card.style.display = 'none';\r\n      }\r\n\r\n    } else {\r\n      card.style.display = 'none';\r\n    }\r\n\r\n  }\r\n\r\n  // ******  Globals  ******\r\n  let pendingPlanetSelection = null;\r\n  let isMovingTowardsPlanet = false;\r\n  let targetCameraPosition = new THREE.Vector3();\r\n  let hoverEnabled = true;\r\n  let offset;\r\n  let isHomeButtonView = false;\r\n\r\n\r\n  function sequentialHideUnselected(selectedPlanet, delay = 300) {\r\n    for (let i = planets.length - 1; i >= 0; i--) {\r\n      const planet3d = planets[i];\r\n      const isSelected = planet3d === selectedPlanet.planet3d;\r\n\r\n      setTimeout(() => {\r\n        if (isSelected) {\r\n          if (selectedPlanet.orbit && selectedPlanet.orbit.material) {\r\n            const orbitMaterial = selectedPlanet.orbit.material;\r\n            orbitMaterial.transparent = true;\r\n\r\n            const duration = 1000;\r\n            const startTime = performance.now();\r\n\r\n            function fadeOrbit(currentTime) {\r\n              const elapsed = currentTime - startTime;\r\n              const t = Math.min(elapsed / duration, 1);\r\n              const easedT = t * t * (3 - 2 * t);\r\n\r\n              orbitMaterial.opacity = 1 - easedT;\r\n\r\n              if (t < 1) {\r\n                requestAnimationFrame(fadeOrbit);\r\n              } else {\r\n                selectedPlanet.orbit.visible = false;\r\n              }\r\n            }\r\n\r\n            requestAnimationFrame(fadeOrbit);\r\n          }\r\n        } else {\r\n          hidePlanet(planet3d);\r\n        }\r\n      }, (planets.length - 1 - i) * delay); // reverse order\r\n    }\r\n  }\r\n\r\n  function getPlanetIndex(selectedPlanet) {\r\n    if (selectedPlanet === sun) return 0;\r\n    if (selectedPlanet === mercury) return 1;\r\n    if (selectedPlanet === venus) return 2;\r\n    if (selectedPlanet === earth) return 3;\r\n    if (selectedPlanet === mars) return 4;\r\n    if (selectedPlanet === jupiter) return 5;\r\n    if (selectedPlanet === saturn) return 6;\r\n    \r\n    return -1; // Return -1 if the planet isn't found\r\n  }\r\n\r\n  function fadeSunOpacity(targetOpacity, duration = 1000) {\r\n    if (!sunMat) return;\r\n\r\n    sunMat.transparent = true;\r\n    const startOpacity = sunMat.opacity;\r\n    const startTime = performance.now();\r\n\r\n    function fadeStep(currentTime) {\r\n      const elapsed = currentTime - startTime;\r\n      const t = Math.min(elapsed / duration, 1);\r\n      const easedT = t * t * (3 - 2 * t); // smoothstep easing\r\n\r\n      sunMat.opacity = startOpacity + (targetOpacity - startOpacity) * easedT;\r\n\r\n      if (t < 1) {\r\n        requestAnimationFrame(fadeStep);\r\n      }\r\n    }\r\n\r\n    requestAnimationFrame(fadeStep);\r\n  }\r\n\r\n  function onDocumentMouseClick(event) {\r\n    event.preventDefault();\r\n\r\n    isHomeButtonView = true;\r\n\r\n    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n    mouse.y = - (event.clientY / window.innerHeight) * 2 + 1;\r\n\r\n    raycaster.setFromCamera(mouse, camera);\r\n    const intersects = raycaster.intersectObjects(raycastTargets);\r\n\r\n    if (intersects.length > 0) {\r\n      const clickedObject = intersects[0].object;\r\n      const selectedPlanet = identifyPlanet(clickedObject);\r\n\r\n      if (selectedPlanet) {\r\n        window.planetIndex = getPlanetIndex(selectedPlanet);\r\n        const indexAnnouncementEvent = new CustomEvent(\"solarSystemToInfoSection\",\r\n          {\r\n            detail: {index: window.planetIndex}\r\n          }\r\n        )\r\n        window.dispatchEvent(indexAnnouncementEvent);\r\n        settings.accelerationOrbit = 0;\r\n\r\n        const planetPosition = new THREE.Vector3();\r\n\r\n        if (selectedPlanet === sun) {\r\n          pendingPlanetSelection = sun;\r\n        } else {\r\n          fadeSunOpacity(0,1000);\r\n          pendingPlanetSelection = selectedPlanet;\r\n          selectedPlanet.planet.getWorldPosition(planetPosition);\r\n        }\r\n\r\n        window.dispatchEvent(new CustomEvent(\"circularBorder\"));\r\n        \r\n        isMovingTowardsPlanet = true;\r\n        controls.target.copy(planetPosition);\r\n        camera.lookAt(planetPosition);\r\n        targetCameraPosition.copy(planetPosition).add(\r\n          camera.position.clone().sub(planetPosition).normalize().multiplyScalar(offset)\r\n        );\r\n        // Wait for sequential hide to complete before moving camera\r\n        sequentialHideUnselected(pendingPlanetSelection);\r\n        setTimeout(()=>{\r\n          window.dispatchEvent(new CustomEvent(\"beginPlanetTransform\"));\r\n        },1000)\r\n\r\n        hoverEnabled = false;\r\n        hasMouseMove = false;\r\n        document.getElementById('hoverCard').style.display = 'none';\r\n        outlinePass.selectedObjects = [];\r\n        \r\n      }\r\n    }\r\n  }\r\n\r\n  function isDescendantOf(object, potentialAncestor) {\r\n    let current = object;\r\n    while (current) {\r\n      if (current === potentialAncestor) return true;\r\n      current = current.parent;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function identifyPlanet(clickedObject) {\r\n\r\n    if (mercury.planet && isDescendantOf(clickedObject, mercury.planet)) {\r\n      offset = offsets[1];\r\n      return mercury;\r\n    } else if (clickedObject.material === sunMat) {\r\n      offset = offsets[0];\r\n      return sun;\r\n    } else if (venus.planet && isDescendantOf(clickedObject, venus.planet)) {\r\n      offset = offsets[2];\r\n      return venus;\r\n    } else if (clickedObject.material === earth.planet.material) {\r\n      offset = offsets[3];\r\n      return earth;\r\n    } else if (mars.planet && isDescendantOf(clickedObject, mars.planet)) {\r\n      offset = offsets[4];\r\n      return mars;\r\n    } else if (jupiter.planet && isDescendantOf(clickedObject, jupiter.planet)) {\r\n      offset = offsets[5];\r\n      return jupiter;\r\n    } else if (saturn.planet && isDescendantOf(clickedObject, saturn.planet)) {\r\n      offset = offsets[6];\r\n      return saturn;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n\r\n\r\n  // ******  SHOW PLANET INFO AFTER SELECTION  ******\r\n\r\n  function scrollToPlanetSection(planetName) {\r\n    const id = planetName.toLowerCase() + \"-section\"; // e.g., \"earth-section\"\r\n    const target = document.getElementById(id);\r\n\r\n    if (target) {\r\n      target.scrollIntoView({\r\n        behavior: \"smooth\",\r\n        block: \"start\"\r\n      });\r\n    } else{\r\n      console.log(\"planet not found! :(\")\r\n    }\r\n  }\r\n\r\n  let isZoomingOut = false;\r\n  let zoomOutTargetPosition = new THREE.Vector3(-175, 115, 5);\r\n\r\n\r\n  // ******  SUN  ******\r\n\r\n\r\n  const sunName = \"Sun\"\r\n  let sunMat;\r\n\r\n  const sunSize = 697/40; // 40 times smaller scale than earth\r\n  const sunGeom = new THREE.SphereGeometry(sunSize, 32, 20);\r\n  // sunMat = new THREE.MeshPhongMaterial({\r\n  //   map: loadTexture.load(sunTexture)\r\n  // });\r\n  sunMat = new THREE.MeshStandardMaterial({\r\n    emissive: 0xFFF88F,\r\n    emissiveMap: loadTexture.load(sunTexture),\r\n    emissiveIntensity: 1,\r\n    color: new THREE.Color(0xFFA500)\r\n  });\r\n\r\n  sunMat.transparent = true;\r\n\r\n  const sun = new THREE.Mesh(sunGeom, sunMat);\r\n\r\n  scene.add(sun);\r\n\r\n  sun.scale.set(1.7, 1.7, 1.7);\r\n  //initial y: -50\r\n  //target y: 40\r\n  sun.position.y=-50;\r\n  sun.position.z=0;\r\n  sun.position.x=0;\r\n\r\n  function solarStartSunrise() {\r\n    const startY = sun.position.y;\r\n    const targetY = 45;\r\n    const duration = 8000;\r\n    const startTime = performance.now();\r\n\r\n    function rise(currentTime) {\r\n      const elapsed = currentTime - startTime;\r\n      const t = Math.min(elapsed / duration, 1);\r\n\r\n      // Eased movement (cubic ease-out)\r\n      const easedT = 1 - Math.pow(1 - t, 2);\r\n      \r\n      sun.position.y = startY + (targetY - startY) * easedT;\r\n\r\n      if (t < 1) {\r\n        requestAnimationFrame(rise);\r\n      }else{\r\n        window.dispatchEvent(new CustomEvent(\"sunRose\"));\r\n      }\r\n    }\r\n\r\n    requestAnimationFrame(rise);\r\n  }\r\n\r\n  window.solarStartSunrise = solarStartSunrise;\r\n  window.dispatchEvent(new CustomEvent(\"sunLoaded\"));\r\n\r\n  //point light in the sun\r\n  const pointLight = new THREE.PointLight(0xFDFFD3 , 1200, 400, 1.4);\r\n  sun.add(pointLight);\r\n\r\n  // Gentle ambient\r\n\r\n\r\n  // Soft hemispheric fill\r\n  const hemiLight = new THREE.HemisphereLight(0xffffff, 0x222222, 0.2);\r\n  scene.add(hemiLight);\r\n\r\n\r\n\r\n\r\n  // ******  PLANET CREATION FUNCTION  ******\r\n  function createPlanet(planetName, size, position, tilt, texture, bump, ring, atmosphere, moons){\r\n\r\n    let material;\r\n    if (texture instanceof THREE.Material){\r\n      material = texture;\r\n    } \r\n    else if(bump){\r\n      material = new THREE.MeshPhongMaterial({\r\n      map: loadTexture.load(texture),\r\n      bumpMap: loadTexture.load(bump),\r\n      bumpScale: 0.7\r\n      });\r\n    }\r\n    else {\r\n      material = new THREE.MeshPhongMaterial({\r\n      map: loadTexture.load(texture)\r\n      });\r\n    } \r\n\r\n    const name = planetName;\r\n    const geometry = new THREE.SphereGeometry(size, 32, 20);\r\n    const planet = new THREE.Mesh(geometry, material);\r\n    const planet3d = new THREE.Object3D;\r\n    const planetSystem = new THREE.Group();\r\n    planetSystem.add(planet);\r\n    let Atmosphere;\r\n    let Ring;\r\n    planet.position.x = position;\r\n    planet.rotation.z = tilt * Math.PI / 180;\r\n\r\n    // add orbit path\r\n    const orbitPath = new THREE.EllipseCurve(\r\n      0, 0,            // ax, aY\r\n      position, position, // xRadius, yRadius\r\n      0, 2 * Math.PI,   // aStartAngle, aEndAngle\r\n      false,            // aClockwise\r\n      0                 // aRotation\r\n  );\r\n\r\n    const pathPoints = orbitPath.getPoints(100);\r\n    const orbitGeometry = new THREE.BufferGeometry().setFromPoints(pathPoints);\r\n    const orbitMaterial = new THREE.LineBasicMaterial({ color: 0xFFFFFF, transparent: true, opacity: 0.5 });\r\n    const orbit = new THREE.LineLoop(orbitGeometry, orbitMaterial);\r\n    orbit.rotation.x = Math.PI / 2;\r\n    planet.orbit = orbit;\r\n    planetSystem.add(orbit);\r\n\r\n    //add ring\r\n    if(ring)\r\n    {\r\n      const RingGeo = new THREE.RingGeometry(ring.innerRadius, ring.outerRadius,30);\r\n      const RingMat = new THREE.MeshStandardMaterial({\r\n        map: loadTexture.load(ring.texture),\r\n        side: THREE.DoubleSide\r\n      });\r\n      Ring = new THREE.Mesh(RingGeo, RingMat);\r\n      planetSystem.add(Ring);\r\n      Ring.position.x = position;\r\n      Ring.rotation.x = -0.5 *Math.PI;\r\n      Ring.rotation.y = -tilt * Math.PI / 180;\r\n    }\r\n    \r\n    //add atmosphere\r\n    if(atmosphere){\r\n      const atmosphereGeom = new THREE.SphereGeometry(size+0.1, 32, 20);\r\n      const atmosphereMaterial = new THREE.MeshPhongMaterial({\r\n        map:loadTexture.load(atmosphere),\r\n        transparent: true,\r\n        opacity: 0.4,\r\n        depthTest: true,\r\n        depthWrite: false\r\n      })\r\n      Atmosphere = new THREE.Mesh(atmosphereGeom, atmosphereMaterial)\r\n      \r\n      Atmosphere.rotation.z = 0.41;\r\n      planet.add(Atmosphere);\r\n    }\r\n\r\n    //add moons\r\n    if(moons){\r\n      moons.forEach(moon => {\r\n        let moonMaterial;\r\n        \r\n        if(moon.bump){\r\n          moonMaterial = new THREE.MeshStandardMaterial({\r\n            map: loadTexture.load(moon.texture),\r\n            bumpMap: loadTexture.load(moon.bump),\r\n            bumpScale: 0.5\r\n          });\r\n        } else{\r\n          moonMaterial = new THREE.MeshStandardMaterial({\r\n            map: loadTexture.load(moon.texture)\r\n          });\r\n        }\r\n        const moonGeometry = new THREE.SphereGeometry(moon.size, 32, 20);\r\n        const moonMesh = new THREE.Mesh(moonGeometry, moonMaterial);\r\n        const moonOrbitDistance = size * 1.5;\r\n        moonMesh.position.set(moonOrbitDistance, 0, 0);\r\n        planetSystem.add(moonMesh);\r\n        moon.mesh = moonMesh;\r\n      });\r\n    }\r\n    //add planet system to planet3d object and to the scene\r\n    planet3d.add(planetSystem);\r\n    scene.add(planet3d);\r\n    return {name, planet, planet3d, Atmosphere, moons, planetSystem, Ring, orbit};\r\n  }\r\n\r\n\r\n  // ******  LOADING OBJECTS METHOD  ******\r\n\r\n  //async function for loading glb models :D\r\n  function loadGLB(path) {\r\n    return new Promise((resolve, reject) => {\r\n      const loader = new GLTFLoader();\r\n      loader.load(\r\n        path,\r\n        (gltf) => {\r\n          const obj = gltf.scene;\r\n          scene.add(obj);\r\n          resolve(obj);\r\n        },\r\n        undefined,\r\n        (error) => {\r\n            console.error(`❌ Failed to load GLB: ${path}`);\r\n            reject(error);\r\n          }\r\n      );\r\n    });\r\n  }\r\n\r\n  // ******  MOONS  ******\r\n\r\n\r\n  // ******  PLANET CREATIONS  ******\r\n  //mercury original size: 2.4\r\n  const mercury = await createglbPlanet(\"mercury\",40,0.20);\r\n  mercury.planet.rotation.x = -90 * Math.PI / 180;\r\n\r\n\r\n  //const mercury = new createPlanet('Mercury', 5, 40, 0, mercuryTexture, mercuryBump);\r\n  //const venus = new createPlanet('Venus', 6.1, 65, 0, basketballTexture);\r\n  const venus = await createglbPlanet(\"venus\",65,6.1);\r\n  const earth = new createPlanet('Earth', 6.4, 90, 0, poolBallTexture, null, null);\r\n  const mars = await createglbPlanet(\"mars\",115,4);\r\n  // Load Mars moons\r\n\r\n  const jupiter = await createglbPlanet(\"jupiter\",170,15);\r\n\r\n  //jupiter.planet.rotation.z = 45 * Math.PI / 180;\r\n\r\n  //const jupiter = new createPlanet('Jupiter', 69/4, 170, 0, poolBallTexture, null, null, null);\r\n\r\n  //const saturn = new createPlanet('Saturn', 58/4, 240, 0, saturnTexture, null,null);\r\n\r\n  const saturn = await createglbPlanet(\"saturn\",240,1);\r\n\r\n  window.dispatchEvent(new CustomEvent(\"planetsLoaded\"));\r\n\r\n  async function createglbPlanet(name,position,scale){\r\n\r\n    const planet = await getCachedModel(name);\r\n    console.log(\"name: \",name);\r\n    console.log(\"planet: \",planet);\r\n    planet.traverse((child) => {\r\n      if (child.isMesh) {\r\n        child.material = new THREE.MeshStandardMaterial({\r\n          map: child.material.map,\r\n          color: child.material.color,\r\n        });\r\n        child.geometry.computeVertexNormals();\r\n      }\r\n    });\r\n\r\n    const planet3d = new THREE.Object3D;\r\n    const planetSystem = new THREE.Group();\r\n    planetSystem.add(planet);\r\n\r\n    planet.position.x = position;\r\n    planet.scale.set(scale,scale,scale);\r\n\r\n    const orbitPath = new THREE.EllipseCurve(\r\n      0, 0,            // ax, aY\r\n      position, position, // xRadius, yRadius\r\n      0, 2 * Math.PI,   // aStartAngle, aEndAngle\r\n      false,            // aClockwise\r\n      0                 // aRotation\r\n    );\r\n\r\n    const pathPoints = orbitPath.getPoints(100);\r\n    const orbitGeometry = new THREE.BufferGeometry().setFromPoints(pathPoints);\r\n    const orbitMaterial = new THREE.LineBasicMaterial({ color: 0xFFFFFF, transparent: true, opacity: 0.5 });\r\n    const orbit = new THREE.LineLoop(orbitGeometry, orbitMaterial);\r\n    orbit.rotation.x = Math.PI / 2;\r\n    planet.orbit = orbit;\r\n\r\n    planetSystem.add(orbit);\r\n\r\n    planet3d.add(planetSystem);\r\n    scene.add(planet3d);\r\n\r\n    let meshes = [];\r\n    planet.traverse(child => {\r\n      if (child.isMesh) {\r\n        // child.material.emissive = new THREE.Color(0xffddaa); // white glow\r\n        // child.material.emissiveIntensity = 0.05;\r\n        meshes.push(child);\r\n      } \r\n    });\r\n\r\n\r\n    return {name,planet,planet3d,orbit,meshes};\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  const indexOrderofPlanets = [\r\n    { name: \"Sun\", mesh: sun },\r\n    { name: \"Mercury\", mesh: mercury.planet },\r\n    { name: \"Venus\", mesh: venus.planet },\r\n    { name: \"Earth\", mesh: earth.planet },\r\n    { name: \"Mars\", mesh: mars.planet },\r\n    { name: \"Jupiter\", mesh: jupiter.planet },\r\n    { name: \"Saturn\", mesh: saturn.planet }\r\n  ];\r\n\r\n  const offsets = [\r\n    70,    // sun\r\n    30,  // mercury\r\n    30,  // venus\r\n    25,    // earth\r\n    30,    // mars\r\n    65,    // jupiter\r\n    70     // saturn\r\n  ];\r\n\r\n  // Array of planets and atmospheres for raycasting\r\n  const raycastTargets = [\r\n    sun, mercury.planet, venus.planet, earth.planet, \r\n    mars.planet, jupiter.planet, saturn.planet\r\n  ];\r\n\r\n  // ******  SHADOWS  ******\r\n  renderer.shadowMap.enabled = true;\r\n\r\n  //properties for the point light\r\n  pointLight.shadow.mapSize.width = 1024;\r\n  pointLight.shadow.mapSize.height = 1024;\r\n  pointLight.shadow.camera.near = 10;\r\n  pointLight.shadow.camera.far = 20;\r\n\r\n\r\n  //casting and receiving shadows\r\n  earth.planet.castShadow = true;\r\n  earth.planet.receiveShadow = true;\r\n\r\n  mercury.planet.castShadow = true;\r\n  mercury.planet.receiveShadow = true;\r\n  venus.planet.castShadow = true;\r\n  venus.planet.receiveShadow = true;\r\n  mars.planet.castShadow = true;\r\n  mars.planet.receiveShadow = true;\r\n  jupiter.planet.castShadow = true;\r\n  jupiter.planet.receiveShadow = true;\r\n\r\n  saturn.planet.castShadow = true;\r\n  saturn.planet.receiveShadow = true;\r\n\r\n\r\n\r\n  const planets = [\r\n    mercury.planet3d,\r\n    venus.planet3d,\r\n    earth.planet3d,\r\n    mars.planet3d,\r\n    jupiter.planet3d,\r\n    saturn.planet3d\r\n  ];\r\n\r\n  console.log(\"planets include saturn\",planets.includes(saturn.planet3d));\r\n\r\n  planets.forEach((planet, index) => {\r\n  planet.visible = false; // Initially hide them all\r\n  });\r\n\r\n  function revealPlanet(planetGroup) {\r\n    planetGroup.visible = true;\r\n\r\n    planetGroup.traverse(child => {\r\n      if ((child.isMesh || child.isLine) && child.material) {\r\n        child.visible = true;\r\n\r\n        const materials = Array.isArray(child.material) ? child.material : [child.material];\r\n        materials.forEach(mat => {\r\n          mat.transparent = true;\r\n\r\n          // Force reset opacity in case it’s stuck\r\n          mat.opacity = 0;\r\n\r\n          // Reset potential side-effects\r\n          if (mat.depthWrite === false) mat.depthWrite = true;\r\n          if (mat.color && mat.color.a !== undefined) mat.color.a = 1.0;\r\n        });\r\n\r\n        const duration = 800;\r\n        const startTime = performance.now();\r\n\r\n        function fade(currentTime) {\r\n          const elapsed = currentTime - startTime;\r\n          const t = Math.min(elapsed / duration, 1);\r\n          const easedT = t * t * (3 - 2 * t); // smoothstep\r\n\r\n          materials.forEach(mat => {\r\n            mat.opacity = easedT;\r\n          });\r\n\r\n          if (t < 1) {\r\n            requestAnimationFrame(fade);\r\n          }\r\n        }\r\n\r\n        requestAnimationFrame(fade);\r\n      }\r\n    });\r\n  }\r\n\r\n  function hidePlanet(planetGroup) {\r\n    return new Promise((resolve) => {\r\n      planetGroup.traverse(child => {\r\n        if (child.isMesh || child.isLine) {\r\n          child.material.transparent = true;\r\n\r\n          const duration = 200;\r\n          const startTime = performance.now();\r\n\r\n          function fade(currentTime) {\r\n            const elapsed = currentTime - startTime;\r\n            const t = Math.min(elapsed / duration, 1);\r\n            const easedT = 1 - (t * t * (3 - 2 * t)); // smoothstep fade-out\r\n\r\n            child.material.opacity = easedT;\r\n\r\n            if (t < 1) {\r\n              requestAnimationFrame(fade);\r\n            } else {\r\n              child.visible = false;\r\n              resolve(); \r\n            }\r\n          }\r\n\r\n          requestAnimationFrame(fade);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  function sequentialReveal(delay = 1000) {\r\n    planets.forEach((planet, index) => {\r\n      setTimeout(() => {\r\n        revealPlanet(planet);\r\n\r\n        // After the last planet, fire the event\r\n        if (index === planets.length - 1) {\r\n          setTimeout(() => {\r\n            window.dispatchEvent(new CustomEvent(\"planetsInView\"));\r\n            hoverEnabled = true;\r\n          }, delay); // wait for the final reveal animation\r\n        }\r\n\r\n      }, index * delay);\r\n    });\r\n  }\r\n\r\n  function solarTransformDownZoomOut() {\r\n    const startY = sun.position.y;\r\n    const targetY = 0;\r\n\r\n    const startScale = sun.scale.x; // assumed uniform scale\r\n    const targetScale = 1;\r\n\r\n    const duration = 2500; // ms\r\n    const startTime = performance.now();\r\n\r\n    function animate(time) {\r\n      const elapsed = time - startTime;\r\n      const t = Math.min(elapsed / duration, 1);\r\n      const easedT = t * t * (3 - 2 * t); // smoothstep easing\r\n\r\n      // Position\r\n      sun.position.y = startY + (targetY - startY) * easedT;\r\n\r\n      // Scale\r\n      const scale = startScale + (targetScale - startScale) * easedT;\r\n      sun.scale.set(scale, scale, scale);\r\n\r\n      if (t < 1) {\r\n        requestAnimationFrame(animate);\r\n      }else{\r\n        window.dispatchEvent(new CustomEvent(\"sunZoomComplete\"));\r\n      }\r\n    }\r\n\r\n    requestAnimationFrame(animate);\r\n  }\r\n    \r\n  function animate(){\r\n\r\n    //rotating planets around the sun and itself\r\n    sun.rotateY(0.0015);\r\n    \r\n\r\n\r\n      mercury.planet.rotateZ(0.003 * settings.acceleration);\r\n      mercury.planet3d.rotateY(0.002 * settings.accelerationOrbit);\r\n      venus.planet.rotateY(0.005 * settings.acceleration);\r\n      venus.planet3d.rotateY(0.0006 * settings.accelerationOrbit);\r\n      earth.planet.rotateY(0.005 * settings.acceleration);\r\n      earth.planet3d.rotateY(0.001 * settings.accelerationOrbit);\r\n      mars.planet.rotateY(0.008 * settings.acceleration);\r\n      mars.planet3d.rotateY(0.0015 * settings.accelerationOrbit);\r\n      jupiter.planet.rotateY(0.005 * settings.acceleration);\r\n      jupiter.planet3d.rotateY(0.0003 * settings.accelerationOrbit);\r\n      saturn.planet.rotateY(0.01 * settings.acceleration);\r\n      saturn.planet3d.rotateY(0.0002 * settings.accelerationOrbit);\r\n\r\n\r\n\r\n  // Rotate asteroids\r\n  /*\r\n  asteroids.forEach(asteroid => {\r\n    asteroid.rotation.y += 0.0001;\r\n    asteroid.position.x = asteroid.position.x * Math.cos(0.0001 * settings.accelerationOrbit) + asteroid.position.z * Math.sin(0.0001 * settings.accelerationOrbit);\r\n    asteroid.position.z = asteroid.position.z * Math.cos(0.0001 * settings.accelerationOrbit) - asteroid.position.x * Math.sin(0.0001 * settings.accelerationOrbit);\r\n  });\r\n  */\r\n\r\n  // ****** OUTLINES ON PLANETS ******\r\n\r\n  if (hasMouseMove){\r\n    raycaster.setFromCamera(mouse, camera);\r\n\r\n    // Check for intersections\r\n    var intersects = raycaster.intersectObjects(raycastTargets);\r\n\r\n    // Reset all outlines\r\n    outlinePass.selectedObjects = [];\r\n\r\n    if (intersects.length > 0) {\r\n      const intersectedObject = intersects[0].object;\r\n\r\n      // If the intersected object is an atmosphere, find the corresponding planet\r\n      if (intersectedObject === earth) {\r\n        outlinePass.selectedObjects = [earth.planet];\r\n      } else if (intersectedObject === venus.Atmosphere) {\r\n        outlinePass.selectedObjects = [venus.planet];\r\n      } else {\r\n        // For other planets, outline the intersected object itself\r\n        outlinePass.selectedObjects = [intersectedObject];\r\n      }\r\n    }\r\n  }\r\n\r\n  // ******  ZOOM IN/OUT  ******\r\n  if (isMovingTowardsPlanet) {\r\n    camera.position.lerp(targetCameraPosition, 0.03);\r\n    if (camera.position.distanceTo(targetCameraPosition) < 1) {\r\n      isMovingTowardsPlanet = false;\r\n\r\n      if (pendingPlanetSelection) {\r\n        pendingPlanetSelection = null;\r\n      }\r\n    }\r\n  } else if (isZoomingOut) {\r\n    camera.position.lerp(zoomOutTargetPosition, 0.03);\r\n\r\n    if (camera.position.distanceTo(zoomOutTargetPosition) < 1) {\r\n        isZoomingOut = false;\r\n    }\r\n  }\r\n\r\n    controls.update();\r\n    requestAnimationFrame(animate);\r\n    composer.render();\r\n  }\r\n\r\n  animate();\r\n\r\n  //window.sequentialReveal = sequentialReveal;\r\n  //window.solarTransformDownZoomOut = solarTransformDownZoomOut;\r\n\r\n  window.addEventListener('solarTransformDownZoomOutCue', () => {solarTransformDownZoomOut();});\r\n  window.addEventListener('firstReveal', () => {sequentialReveal(1000);});\r\n\r\n  window.addEventListener('zoomOutNeeded', async () => {\r\n    isHomeButtonView = false;\r\n    isZoomingOut = true;\r\n    console.log(\"zoom out received!\");\r\n    fadeSunOpacity(1,2000);\r\n    settings.accelerationOrbit = 1;\r\n\r\n    setTimeout(() => {\r\n      sequentialReveal(500);\r\n    }, 500); // optional pause\r\n  });\r\n\r\n  // function hideUnselectedPlanets(selectedIndex) {\r\n  //   planets.forEach\r\n  // }\r\n\r\n  function hideAllExceptSelected(selectedIndex) {\r\n    indexOrderofPlanets.forEach((planetObj, index) => {\r\n      const mesh = planetObj.mesh;\r\n\r\n      if (!mesh) return;\r\n\r\n      const isSelected = index === selectedIndex;\r\n\r\n      mesh.traverse(child => {\r\n        if ((child.isMesh || child.isLine) && child.material) {\r\n          const materials = Array.isArray(child.material) ? child.material : [child.material];\r\n          materials.forEach(mat => {\r\n            mat.transparent = true;\r\n            mat.opacity = isSelected ? 1 : 0;\r\n          });\r\n\r\n          child.visible = true; // Always keep children visible to prevent render bugs\r\n        }\r\n      });\r\n\r\n      // Orbits are optional; show only for selected planet\r\n      if (planetObj.orbit) {\r\n        planetObj.orbit.visible = isSelected;\r\n      }\r\n    });\r\n  }\r\n\r\n  window.addEventListener(\"planetChange\", (event) => {\r\n    const index = event.detail.index;\r\n    const selected = indexOrderofPlanets[index];\r\n    const offset = offsets[index];\r\n\r\n    hideAllExceptSelected(index);\r\n\r\n    selected.mesh.visible = true;\r\n    selected.mesh.traverse(child => {\r\n    child.visible = true; // <- make child renderable\r\n    if (child.material) {\r\n      child.material.transparent = true;\r\n      child.material.opacity = 1;\r\n    }\r\n  });\r\n    const planetPosition = new THREE.Vector3();\r\n    selected.mesh.getWorldPosition(planetPosition);\r\n\r\n    // Update camera target and position\r\n\r\n    controls.target.copy(planetPosition);\r\n    camera.lookAt(planetPosition);\r\n    targetCameraPosition.copy(planetPosition).add(\r\n      camera.position.clone().sub(planetPosition).normalize().multiplyScalar(offset)\r\n    );\r\n    \r\n    camera.position.copy(targetCameraPosition);\r\n    \r\n    console.log(`Camera updated to: ${selected.name}`);\r\n  });\r\n\r\n  canvas.addEventListener('mousemove', onMouseMove, false);\r\n  canvas.addEventListener('click', onDocumentMouseClick, false);\r\n  canvas.addEventListener('resize', function(){\r\n    camera.aspect = window.innerWidth/window.innerHeight;\r\n    camera.updateProjectionMatrix();\r\n    renderer.setSize(window.innerWidth,window.innerHeight);\r\n    composer.setSize(window.innerWidth,window.innerHeight);\r\n  });\r\n\r\n  function handleResize() {\r\n    const canvas = document.getElementById(\"threeCanvas\");\r\n\r\n    // Get current transform (e.g. scale + translate from animation)\r\n    const currentTransform = window.getComputedStyle(canvas).transform;\r\n\r\n    // Temporarily clear transform so we can measure properly\r\n    canvas.style.transform = \"none\";\r\n    const rectBefore = canvas.getBoundingClientRect();\r\n\r\n    // Resize Three.js renderer and camera\r\n    const width = window.innerWidth;\r\n    const height = window.innerHeight;\r\n    renderer.setSize(width, height);\r\n    camera.aspect = width / height;\r\n    camera.updateProjectionMatrix();\r\n\r\n    // Reset and reapply original transform\r\n    canvas.style.transform = currentTransform;\r\n\r\n    // Optionally, re-calculate new position based on rectBefore if you want more precise adjustment\r\n  }\r\n\r\n  window.addEventListener('resize', handleResize);\r\n}"],"names":["_changeEvent","_startEvent","_endEvent","_ray","Ray","_plane","Plane","_TILT_LIMIT","MathUtils","_v","Vector3","_twoPI","_STATE","_EPS","OrbitControls","Controls","object","domElement","MOUSE","TOUCH","Quaternion","Spherical","Vector2","onPointerMove","onPointerDown","onPointerUp","onContextMenu","onMouseWheel","onKeyDown","onTouchStart","onTouchMove","onMouseDown","onMouseMove","interceptControlDown","interceptControlUp","element","deltaTime","position","min","max","zoomChanged","prevRadius","newRadius","radiusDelta","mouseBefore","prevZoom","mouseAfter","delta","normalizedDelta","angle","distance","objectMatrix","deltaX","deltaY","targetDistance","dollyScale","x","y","rect","dx","dy","w","h","dist","event","needsUpdate","centerX","centerY","i","pointerId","mode","newEvent","mouseAction","CopyShader","Pass","_camera","OrthographicCamera","FullscreenTriangleGeometry","BufferGeometry","Float32BufferAttribute","_geometry","FullScreenQuad","material","Mesh","renderer","value","ShaderPass","shader","textureID","ShaderMaterial","UniformsUtils","writeBuffer","readBuffer","MaskPass","scene","camera","context","state","writeValue","clearValue","ClearMaskPass","EffectComposer","renderTarget","size","WebGLRenderTarget","HalfFloatType","NoBlending","Clock","tmp","pass","index","passIndex","currentRenderTarget","maskActive","il","stencil","width","height","effectiveWidth","effectiveHeight","pixelRatio","LuminosityHighPassShader","Color","UnrealBloomPass","resolution","strength","radius","threshold","resx","resy","renderTargetHorizontal","renderTargetVertical","highPassShader","kernelSizeArray","bloomFactors","AdditiveBlending","MeshBasicMaterial","oldAutoClear","inputRenderTarget","kernelRadius","coefficients","nMips","RenderPass","overrideMaterial","clearColor","clearAlpha","oldClearAlpha","oldOverrideMaterial","OutlinePass","selectedObjects","MeshDepthMaterial","DoubleSide","RGBADepthPacking","replaceDepthToViewZ","MAX_EDGE_THICKNESS","MAX_EDGE_GLOW","copyShader","Matrix4","string","type","currentBackground","currentOverrideMaterial","scalar","cache","gatherSelectedMeshesCallBack","bVisible","mesh","visibilityCache","selectionCache","VisibilityChangeCallBack","visibility","maxRadius","sunTexture","poolBallTexture","initSolarSystem","preloadedModels","THREE.Scene","THREE.PerspectiveCamera","canvas","THREE.WebGLRenderer","controls","THREE.CubeTextureLoader","loadTexture","THREE.TextureLoader","THREE.WebGLRenderTarget","THREE.RGBAFormat","THREE.UnsignedByteType","composer","outlinePass","THREE.Vector2","bloomPass","lightAmbient","THREE.AmbientLight","colour","THREE.Color","settings","raycaster","THREE.Raycaster","mouse","hasMouseMove","hoverEnabled","intersects","raycastTargets","card","sun","mercury","venus","earth","mars","jupiter","saturn","pendingPlanetSelection","isMovingTowardsPlanet","targetCameraPosition","THREE.Vector3","offset","sequentialHideUnselected","selectedPlanet","delay","planets","planet3d","isSelected","fadeOrbit","currentTime","elapsed","startTime","t","duration","easedT","orbitMaterial","hidePlanet","getPlanetIndex","fadeSunOpacity","targetOpacity","sunMat","startOpacity","fadeStep","onDocumentMouseClick","clickedObject","identifyPlanet","indexAnnouncementEvent","planetPosition","isDescendantOf","potentialAncestor","current","offsets","isZoomingOut","zoomOutTargetPosition","sunSize","sunGeom","THREE.SphereGeometry","THREE.MeshStandardMaterial","THREE.Mesh","solarStartSunrise","startY","targetY","rise","pointLight","THREE.PointLight","hemiLight","THREE.HemisphereLight","createPlanet","planetName","tilt","texture","bump","ring","atmosphere","moons","THREE.Material","THREE.MeshPhongMaterial","name","geometry","planet","THREE.Object3D","planetSystem","THREE.Group","Atmosphere","Ring","pathPoints","THREE.EllipseCurve","orbitGeometry","THREE.BufferGeometry","THREE.LineBasicMaterial","orbit","THREE.LineLoop","RingGeo","THREE.RingGeometry","RingMat","THREE.DoubleSide","atmosphereGeom","atmosphereMaterial","moon","moonMaterial","moonGeometry","moonMesh","moonOrbitDistance","createglbPlanet","scale","getCachedModel","child","meshes","indexOrderofPlanets","revealPlanet","planetGroup","fade","materials","mat","resolve","sequentialReveal","solarTransformDownZoomOut","startScale","targetScale","animate","time","intersectedObject","hideAllExceptSelected","selectedIndex","planetObj","selected","handleResize","currentTransform"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9]}